{"ast":null,"code":"var _jsxFileName = \"/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/PlantSpecifics/PlantDetails.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Button, Typography, Box, List, ListItem, TextField, IconButton, Card, CardHeader, CardContent, CardActions, Select, MenuItem } from '@mui/material';\nimport CloseRounded from '@mui/icons-material/CloseRounded';\nimport { CHARACTER_LIMIT } from '../../../constants/limits';\nimport selectedFile from '../../../models/fileClass';\nimport PlantSpecifics from '../../../models/plantSpecifics';\nimport { plantType } from '../../../constants/plantType';\nimport { nanoid } from 'nanoid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst PlantDetails = _ref => {\n  _s();\n\n  let {\n    plantInfo,\n    index,\n    handleInputChange,\n    handleSavePlant,\n    handleDeletePlantFromList\n  } = _ref;\n  return function (handleInputChange) {\n    let plantSpecificsObject = new PlantSpecifics(\"\", 0, \"\", []); // let localStoragePlantDetails = JSON.parse(localStorage.getItem(`plantDetails${plantInfo.idx}`)) || plantInfo\n\n    let obj = plantInfo || plantSpecificsObject;\n    const [plantDetails, setPlantDetails] = useState();\n    const [uniqueID, setUniqueID] = useState(nanoid()); // useEffect(()=>{\n    //     localStorage.setItem(`plantDetails:${plantInfo.idx}`, JSON.stringify(plantDetails))\n    // });\n\n    function handleInputChange(event) {\n      let newObj = {};\n\n      if (!isNaN(parseInt(event.target.value))) {\n        newObj[event.target.name] = parseInt(event.target.value);\n      } else {\n        newObj[event.target.name] = event.target.value;\n      }\n\n      setPlantDetails({ ...plantDetails,\n        ...newObj\n      });\n    }\n\n    ;\n\n    const toBase64 = file => new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n\n      reader.onload = () => resolve(reader.result);\n\n      reader.onerror = error => reject(error);\n    });\n\n    async function handleFileSelection(event) {\n      let files = event.target.files;\n      let tempArray = [];\n\n      if (files) {\n        for (let i = 0; i < files.length; i++) {\n          let selectedFileObj = new selectedFile(files[i].name, files[i].type, files[i].size, await toBase64(files[i]));\n          tempArray.push(selectedFileObj);\n        }\n\n        ;\n      } //setPlantDetails({ ...plantDetails, selectedFiles: tempArray })\n\n    }\n\n    function DeleteFileFromList(event) {// let filteredList = plantDetails.selectedFiles.filter(file => file.name !== event.currentTarget.value);\n      //setPlantDetails({ ...plantDetails, selectedFiles: [...filteredList] });\n    }\n\n    function DeletePlantCard() {\n      localStorage.removeItem(`plantDetails:${plantInfo.idx}`);\n      handleDeletePlantFromList(plantInfo.idx);\n    }\n\n    function handleClearForm() {//setPlantDetails(plantSpecificsObject)\n    }\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        sx: {\n          maxWidth: 345,\n          backgroundColor: '#cfd1d0',\n          margin: '1rem .5rem'\n        },\n        children: [/*#__PURE__*/_jsxDEV(CardActions, {\n          disableSpacing: true,\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            onClick: DeletePlantCard,\n            children: /*#__PURE__*/_jsxDEV(CloseRounded, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 25\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 21\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 17\n        }, _this), /*#__PURE__*/_jsxDEV(CardHeader, {\n          title: `Plant #${plantInfo.idx + 1}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 17\n        }, _this), /*#__PURE__*/_jsxDEV(CardContent, {\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              value: plantInfo.type,\n              label: \"Type\",\n              name: \"type\",\n              onChange: handleInputChange,\n              children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                value: \"\",\n                children: \"--\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 87,\n                columnNumber: 29\n              }, _this), plantType.map(type => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: type,\n                children: type\n              }, plantType.indexOf(type), false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 52\n              }, _this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 25\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 21\n          }, _this), /*#__PURE__*/_jsxDEV(Box, {\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              label: \"Price\",\n              name: \"price\",\n              fullWidth: true,\n              inputProps: {\n                inputMode: 'numeric',\n                pattern: '[0-9]*'\n              },\n              value: plantInfo.price,\n              variant: \"outlined\",\n              onChange: handleInputChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 25\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 21\n          }, _this), /*#__PURE__*/_jsxDEV(Box, {\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              label: \"Description\",\n              name: \"description\",\n              id: plantInfo.idx.toString(),\n              fullWidth: true,\n              multiline: true,\n              maxRows: 4,\n              inputProps: {\n                maxLength: CHARACTER_LIMIT\n              },\n              value: plantInfo.description,\n              variant: \"outlined\",\n              onChange: handleInputChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 25\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 21\n          }, _this), /*#__PURE__*/_jsxDEV(Box, {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              style: {\n                display: \"none\"\n              },\n              name: \"selectedFiles\",\n              id: uniqueID,\n              type: \"file\",\n              multiple: true,\n              onChange: handleFileSelection\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 25\n            }, _this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: uniqueID,\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"contained\",\n                component: \"span\",\n                children: \"Upload Image(s)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 29\n              }, _this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 25\n            }, _this), /*#__PURE__*/_jsxDEV(Box, {\n              children: /*#__PURE__*/_jsxDEV(List, {\n                children: plantInfo.selectedFiles.map(file => /*#__PURE__*/_jsxDEV(ListItem, {\n                  children: [/*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"subtitle2\",\n                    children: `${file.name.slice(0, 10)}...${file.name.slice(file.name.length - 4, file.name.length)}`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 134,\n                    columnNumber: 37\n                  }, _this), /*#__PURE__*/_jsxDEV(Button, {\n                    value: file.name,\n                    onClick: DeleteFileFromList,\n                    children: /*#__PURE__*/_jsxDEV(CloseRounded, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 139,\n                      columnNumber: 41\n                    }, _this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 135,\n                    columnNumber: 37\n                  }, _this)]\n                }, plantInfo.selectedFiles.indexOf(file), true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 133,\n                  columnNumber: 70\n                }, _this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 132,\n                columnNumber: 29\n              }, _this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 25\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 21\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 17\n        }, _this), /*#__PURE__*/_jsxDEV(CardActions, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: handleSavePlant,\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 21\n          }, _this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: handleClearForm,\n            children: \"Clear\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 21\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 17\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }, _this)\n    }, void 0, false);\n  }(handleInputChange);\n};\n\n_s(PlantDetails, \"2+jeHaLOjYrOmwsQKhV7nZj9t2E=\");\n\n_c = PlantDetails;\nexport default PlantDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlantDetails\");","map":{"version":3,"sources":["/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/PlantSpecifics/PlantDetails.js"],"names":["React","useEffect","useState","Button","Typography","Box","List","ListItem","TextField","IconButton","Card","CardHeader","CardContent","CardActions","Select","MenuItem","CloseRounded","CHARACTER_LIMIT","selectedFile","PlantSpecifics","plantType","nanoid","PlantDetails","plantInfo","index","handleInputChange","handleSavePlant","handleDeletePlantFromList","plantSpecificsObject","obj","plantDetails","setPlantDetails","uniqueID","setUniqueID","event","newObj","isNaN","parseInt","target","value","name","toBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","handleFileSelection","files","tempArray","i","length","selectedFileObj","type","size","push","DeleteFileFromList","DeletePlantCard","localStorage","removeItem","idx","handleClearForm","maxWidth","backgroundColor","margin","map","indexOf","inputMode","pattern","price","toString","maxLength","description","display","selectedFiles","slice"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,MAAT,EAAiBC,UAAjB,EAA6BC,GAA7B,EAAkCC,IAAlC,EAAwCC,QAAxC,EAAkDC,SAAlD,EAA6DC,UAA7D,EAAyEC,IAAzE,EAA+EC,UAA/E,EAA2FC,WAA3F,EAAwGC,WAAxG,EAAqHC,MAArH,EAA6HC,QAA7H,QAA4I,eAA5I;AACA,OAAOC,YAAP,MAAyB,kCAAzB;AACA,SAAQC,eAAR,QAA8B,2BAA9B;AAEA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,cAAP,MAA2B,gCAA3B;AACA,SAAQC,SAAR,QAAwB,8BAAxB;AACA,SAASC,MAAT,QAAuB,QAAvB;;;;AAEA,MAAMC,YAAY,GAAG;AAAA;;AAAA,MAAC;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,KAAb;AAAoBC,IAAAA,iBAApB;AAAuCC,IAAAA,eAAvC;AAAwDC,IAAAA;AAAxD,GAAD;AAAA,sCAAwF;AACzG,QAAIC,oBAAoB,GAAG,IAAIT,cAAJ,CAAmB,EAAnB,EAAuB,CAAvB,EAA0B,EAA1B,EAA8B,EAA9B,CAA3B,CADyG,CAEzG;;AACA,QAAIU,GAAG,GAAGN,SAAS,IAAIK,oBAAvB;AACA,UAAM,CAACE,YAAD,EAAeC,eAAf,IAAkC7B,QAAQ,EAAhD;AACA,UAAM,CAAC8B,QAAD,EAAWC,WAAX,IAA0B/B,QAAQ,CAACmB,MAAM,EAAP,CAAxC,CALyG,CAOzG;AACA;AACA;;AAEA,aAASI,iBAAT,CAA2BS,KAA3B,EAAkC;AAC9B,UAAIC,MAAM,GAAG,EAAb;;AACA,UAAI,CAACC,KAAK,CAACC,QAAQ,CAACH,KAAK,CAACI,MAAN,CAAaC,KAAd,CAAT,CAAV,EAA0C;AACtCJ,QAAAA,MAAM,CAACD,KAAK,CAACI,MAAN,CAAaE,IAAd,CAAN,GAA4BH,QAAQ,CAACH,KAAK,CAACI,MAAN,CAAaC,KAAd,CAApC;AACH,OAFD,MAEO;AACHJ,QAAAA,MAAM,CAACD,KAAK,CAACI,MAAN,CAAaE,IAAd,CAAN,GAA4BN,KAAK,CAACI,MAAN,CAAaC,KAAzC;AACH;;AAEDR,MAAAA,eAAe,CAAC,EACZ,GAAGD,YADS;AAEZ,WAAGK;AAFS,OAAD,CAAf;AAIH;;AAAA;;AAED,UAAMM,QAAQ,GAAGC,IAAI,IAAI,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtD,YAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;AACAD,MAAAA,MAAM,CAACE,aAAP,CAAqBN,IAArB;;AACAI,MAAAA,MAAM,CAACG,MAAP,GAAgB,MAAML,OAAO,CAACE,MAAM,CAACI,MAAR,CAA7B;;AACAJ,MAAAA,MAAM,CAACK,OAAP,GAAiBC,KAAK,IAAIP,MAAM,CAACO,KAAD,CAAhC;AACH,KALwB,CAAzB;;AAOA,mBAAeC,mBAAf,CAAmCnB,KAAnC,EAA0C;AACtC,UAAIoB,KAAK,GAAGpB,KAAK,CAACI,MAAN,CAAagB,KAAzB;AACA,UAAIC,SAAS,GAAG,EAAhB;;AAEA,UAAID,KAAJ,EAAW;AACP,aAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnC,cAAIE,eAAe,GAAG,IAAIxC,YAAJ,CAAiBoC,KAAK,CAACE,CAAD,CAAL,CAAShB,IAA1B,EAAgCc,KAAK,CAACE,CAAD,CAAL,CAASG,IAAzC,EAA+CL,KAAK,CAACE,CAAD,CAAL,CAASI,IAAxD,EAA8D,MAAMnB,QAAQ,CAACa,KAAK,CAACE,CAAD,CAAN,CAA5E,CAAtB;AACAD,UAAAA,SAAS,CAACM,IAAV,CAAeH,eAAf;AACH;;AAAA;AACJ,OATqC,CAUtC;;AACH;;AAED,aAASI,kBAAT,CAA4B5B,KAA5B,EAAmC,CAC/B;AACA;AACH;;AACD,aAAS6B,eAAT,GAA0B;AACtBC,MAAAA,YAAY,CAACC,UAAb,CAAyB,gBAAe1C,SAAS,CAAC2C,GAAI,EAAtD;AACAvC,MAAAA,yBAAyB,CAACJ,SAAS,CAAC2C,GAAX,CAAzB;AACH;;AAED,aAASC,eAAT,GAA2B,CACvB;AACH;;AAED,wBACI;AAAA,6BACI,QAAC,IAAD;AAAM,QAAA,EAAE,EAAE;AAAEC,UAAAA,QAAQ,EAAE,GAAZ;AAAiBC,UAAAA,eAAe,EAAE,SAAlC;AAA6CC,UAAAA,MAAM,EAAE;AAArD,SAAV;AAAA,gCACI,QAAC,WAAD;AAAa,UAAA,cAAc,MAA3B;AAAA,iCACI,QAAC,UAAD;AAAY,YAAA,OAAO,EAAEP,eAArB;AAAA,mCACI,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,iBADJ,eAMI,QAAC,UAAD;AACI,UAAA,KAAK,EAAG,UAASxC,SAAS,CAAC2C,GAAV,GAAgB,CAAE;AADvC;AAAA;AAAA;AAAA;AAAA,iBANJ,eASI,QAAC,WAAD;AAAA,kCACI,QAAC,GAAD;AAAA,mCACI,QAAC,MAAD;AACI,cAAA,KAAK,EAAE3C,SAAS,CAACoC,IADrB;AAEI,cAAA,KAAK,EAAC,MAFV;AAGI,cAAA,IAAI,EAAC,MAHT;AAII,cAAA,QAAQ,EAAElC,iBAJd;AAAA,sCAKI,QAAC,QAAD;AAAU,gBAAA,KAAK,EAAC,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBALJ,EAMKL,SAAS,CAACmD,GAAV,CAAcZ,IAAI,iBAAI,QAAC,QAAD;AAAU,gBAAA,KAAK,EAAEA,IAAjB;AAAA,0BAAsDA;AAAtD,iBAA4BvC,SAAS,CAACoD,OAAV,CAAkBb,IAAlB,CAA5B;AAAA;AAAA;AAAA;AAAA,uBAAtB,CANL;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,mBADJ,eAWI,QAAC,GAAD;AAAA,mCACI,QAAC,SAAD;AACI,cAAA,KAAK,EAAC,OADV;AAEI,cAAA,IAAI,EAAC,OAFT;AAII,cAAA,SAAS,MAJb;AAKI,cAAA,UAAU,EAAE;AAAEc,gBAAAA,SAAS,EAAE,SAAb;AAAwBC,gBAAAA,OAAO,EAAE;AAAjC,eALhB;AAMI,cAAA,KAAK,EAAEnD,SAAS,CAACoD,KANrB;AAOI,cAAA,OAAO,EAAC,UAPZ;AAQI,cAAA,QAAQ,EAAElD;AARd;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,mBAXJ,eAuBI,QAAC,GAAD;AAAA,mCACI,QAAC,SAAD;AACI,cAAA,KAAK,EAAC,aADV;AAEI,cAAA,IAAI,EAAC,aAFT;AAGI,cAAA,EAAE,EAAGF,SAAS,CAAC2C,GAAV,CAAcU,QAAd,EAHT;AAII,cAAA,SAAS,MAJb;AAKI,cAAA,SAAS,MALb;AAMI,cAAA,OAAO,EAAE,CANb;AAOI,cAAA,UAAU,EAAE;AAAEC,gBAAAA,SAAS,EAAE5D;AAAb,eAPhB;AAQI,cAAA,KAAK,EAAEM,SAAS,CAACuD,WARrB;AASI,cAAA,OAAO,EAAC,UATZ;AAUI,cAAA,QAAQ,EAAErD;AAVd;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,mBAvBJ,eAqCI,QAAC,GAAD;AAAA,oCACI;AACI,cAAA,KAAK,EAAE;AAAEsD,gBAAAA,OAAO,EAAE;AAAX,eADX;AAEI,cAAA,IAAI,EAAC,eAFT;AAGI,cAAA,EAAE,EAAE/C,QAHR;AAII,cAAA,IAAI,EAAC,MAJT;AAKI,cAAA,QAAQ,MALZ;AAMI,cAAA,QAAQ,EAAEqB;AANd;AAAA;AAAA;AAAA;AAAA,qBADJ,eASI;AAAO,cAAA,OAAO,EAAErB,QAAhB;AAAA,qCACI,QAAC,MAAD;AAAQ,gBAAA,OAAO,EAAC,WAAhB;AAA4B,gBAAA,SAAS,EAAC,MAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,qBATJ,eAcI,QAAC,GAAD;AAAA,qCACI,QAAC,IAAD;AAAA,0BACKT,SAAS,CAACyD,aAAV,CAAwBT,GAAxB,CAA4B7B,IAAI,iBAAI,QAAC,QAAD;AAAA,0CACjC,QAAC,UAAD;AAAY,oBAAA,OAAO,EAAC,WAApB;AAAA,8BAAkC,GAAEA,IAAI,CAACF,IAAL,CAAUyC,KAAV,CAAgB,CAAhB,EAAmB,EAAnB,CAAuB,MAAKvC,IAAI,CAACF,IAAL,CAAUyC,KAAV,CAAgBvC,IAAI,CAACF,IAAL,CAAUiB,MAAV,GAAmB,CAAnC,EAAsCf,IAAI,CAACF,IAAL,CAAUiB,MAAhD,CAAwD;AAAxH;AAAA;AAAA;AAAA;AAAA,2BADiC,eAEjC,QAAC,MAAD;AACI,oBAAA,KAAK,EAAEf,IAAI,CAACF,IADhB;AAEI,oBAAA,OAAO,EAAEsB,kBAFb;AAAA,2CAII,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,2BAFiC;AAAA,mBAAevC,SAAS,CAACyD,aAAV,CAAwBR,OAAxB,CAAgC9B,IAAhC,CAAf;AAAA;AAAA;AAAA;AAAA,yBAApC;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,qBAdJ;AAAA;AAAA;AAAA;AAAA;AAAA,mBArCJ;AAAA;AAAA;AAAA;AAAA;AAAA,iBATJ,eA2EI,QAAC,WAAD;AAAA,kCACI,QAAC,MAAD;AAAQ,YAAA,OAAO,EAAEhB,eAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,eAEI,QAAC,MAAD;AAAQ,YAAA,OAAO,EAAEyC,eAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,iBA3EJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ,qBADJ;AAoFH,GA9IoB;AAAA,CAArB;;GAAM7C,Y;;KAAAA,Y;AAgJN,eAAeA,YAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Button, Typography, Box, List, ListItem, TextField, IconButton, Card, CardHeader, CardContent, CardActions, Select, MenuItem} from '@mui/material';\nimport CloseRounded from '@mui/icons-material/CloseRounded';\nimport {CHARACTER_LIMIT} from '../../../constants/limits'; \n\nimport selectedFile from '../../../models/fileClass';\nimport PlantSpecifics from '../../../models/plantSpecifics';\nimport {plantType} from '../../../constants/plantType'; \nimport { nanoid } from 'nanoid';\n\nconst PlantDetails = ({ plantInfo, index, handleInputChange, handleSavePlant, handleDeletePlantFromList}) => {\n    let plantSpecificsObject = new PlantSpecifics(\"\", 0, \"\", []);\n    // let localStoragePlantDetails = JSON.parse(localStorage.getItem(`plantDetails${plantInfo.idx}`)) || plantInfo\n    let obj = plantInfo || plantSpecificsObject\n    const [plantDetails, setPlantDetails] = useState();\n    const [uniqueID, setUniqueID] = useState(nanoid())\n   \n    // useEffect(()=>{\n    //     localStorage.setItem(`plantDetails:${plantInfo.idx}`, JSON.stringify(plantDetails))\n    // });\n\n    function handleInputChange(event) {\n        let newObj = {};\n        if (!isNaN(parseInt(event.target.value))) {\n            newObj[event.target.name] = parseInt(event.target.value);\n        } else {\n            newObj[event.target.name] = event.target.value;\n        }\n        \n        setPlantDetails({\n            ...plantDetails,\n            ...newObj\n        })\n    };\n\n    const toBase64 = file => new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = error => reject(error);\n    });\n\n    async function handleFileSelection(event) {\n        let files = event.target.files;\n        let tempArray = [];\n\n        if (files) {\n            for (let i = 0; i < files.length; i++) {\n                let selectedFileObj = new selectedFile(files[i].name, files[i].type, files[i].size, await toBase64(files[i]));\n                tempArray.push(selectedFileObj);\n            };\n        }\n        //setPlantDetails({ ...plantDetails, selectedFiles: tempArray })\n    }\n\n    function DeleteFileFromList(event) {\n        // let filteredList = plantDetails.selectedFiles.filter(file => file.name !== event.currentTarget.value);\n        //setPlantDetails({ ...plantDetails, selectedFiles: [...filteredList] });\n    }\n    function DeletePlantCard(){\n        localStorage.removeItem(`plantDetails:${plantInfo.idx}`)\n        handleDeletePlantFromList(plantInfo.idx)\n    }\n\n    function handleClearForm() {\n        //setPlantDetails(plantSpecificsObject)\n    }\n\n    return(\n        <>\n            <Card sx={{ maxWidth: 345, backgroundColor: '#cfd1d0', margin: '1rem .5rem'}}>\n                <CardActions disableSpacing>\n                    <IconButton onClick={DeletePlantCard}>\n                        <CloseRounded />\n                    </IconButton>\n                </CardActions>\n                <CardHeader \n                    title={`Plant #${plantInfo.idx + 1}`}\n                />\n                <CardContent>\n                    <Box>\n                        <Select \n                            value={plantInfo.type}\n                            label=\"Type\"\n                            name=\"type\"\n                            onChange={handleInputChange}>\n                            <MenuItem value=\"\">--</MenuItem>\n                            {plantType.map(type => <MenuItem value={type} key={plantType.indexOf(type)}>{type}</MenuItem>)}\n                        </Select>\n                    </Box>\n                    <Box>\n                        <TextField\n                            label=\"Price\"\n                            name=\"price\"\n                            \n                            fullWidth\n                            inputProps={{ inputMode: 'numeric', pattern: '[0-9]*'}}\n                            value={plantInfo.price}\n                            variant=\"outlined\"\n                            onChange={handleInputChange}\n                        />\n                    </Box>\n                    <Box>\n                        <TextField\n                            label=\"Description\"\n                            name=\"description\"\n                            id ={plantInfo.idx.toString()}\n                            fullWidth\n                            multiline\n                            maxRows={4}\n                            inputProps={{ maxLength: CHARACTER_LIMIT }}\n                            value={plantInfo.description}\n                            variant=\"outlined\"\n                            onChange={handleInputChange}\n                        />\n                    </Box>\n                    <Box>\n                        <input\n                            style={{ display: \"none\" }}\n                            name=\"selectedFiles\"\n                            id={uniqueID}\n                            type=\"file\"\n                            multiple\n                            onChange={handleFileSelection}\n                        />\n                        <label htmlFor={uniqueID}>\n                            <Button variant=\"contained\" component=\"span\">\n                                Upload Image(s)\n                                </Button>\n                        </label>\n                        <Box>\n                            <List>\n                                {plantInfo.selectedFiles.map(file => <ListItem key={plantInfo.selectedFiles.indexOf(file)}>\n                                    <Typography variant=\"subtitle2\">{`${file.name.slice(0, 10)}...${file.name.slice(file.name.length - 4, file.name.length)}`}</Typography>\n                                    <Button\n                                        value={file.name}\n                                        onClick={DeleteFileFromList}\n                                    >\n                                        <CloseRounded />\n                                    </Button>\n                                </ListItem>)}\n                            </List>\n                        </Box>\n                    </Box>\n                </CardContent>\n                <CardActions>\n                    <Button onClick={handleSavePlant}>Save</Button>\n                    <Button onClick={handleClearForm}>Clear</Button>\n                </CardActions>\n            </Card>                       \n                        </>\n    )\n}\n\nexport default PlantDetails;"]},"metadata":{},"sourceType":"module"}