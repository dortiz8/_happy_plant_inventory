{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport * as api from '../api/index';\nconst slice2 = createSlice({\n  name: 'plant',\n  initialState: {\n    plant: {}\n  },\n  reducers: {\n    fetchOne: (state, action) => {\n      state.plant = action.payload;\n    }\n  }\n});\nexport default slice2.reducer;\nconst {\n  fetchOne\n} = slice2.actions;\nexport const fetchOnePlant = id => async dispatch => {\n  try {\n    let {\n      data\n    } = await api.fetchOnePlant(id);\n    dispatch(fetchOne({\n      data\n    }));\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/store/plant.js"],"names":["createSlice","api","slice2","name","initialState","plant","reducers","fetchOne","state","action","payload","reducer","actions","fetchOnePlant","id","dispatch","data","error","console","log"],"mappings":"AACA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAO,KAAKC,GAAZ,MAAqB,cAArB;AAEA,MAAMC,MAAM,GAAGF,WAAW,CAAC;AACvBG,EAAAA,IAAI,EAAE,OADiB;AAEvBC,EAAAA,YAAY,EAAE;AACVC,IAAAA,KAAK,EAAE;AADG,GAFS;AAKvBC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,QAAQ,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACzBD,MAAAA,KAAK,CAACH,KAAN,GAAcI,MAAM,CAACC,OAArB;AACH;AAHK;AALa,CAAD,CAA1B;AAWA,eAAeR,MAAM,CAACS,OAAtB;AAEA,MAAM;AAAEJ,EAAAA;AAAF,IAAeL,MAAM,CAACU,OAA5B;AAEA,OAAO,MAAMC,aAAa,GAAIC,EAAD,IAAQ,MAAOC,QAAP,IAAoB;AACrD,MAAI;AACA,QAAI;AAAEC,MAAAA;AAAF,QAAW,MAAMf,GAAG,CAACY,aAAJ,CAAkBC,EAAlB,CAArB;AACAC,IAAAA,QAAQ,CAACR,QAAQ,CAAC;AAAES,MAAAA;AAAF,KAAD,CAAT,CAAR;AACH,GAHD,CAGE,OAAOC,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ,CAPM","sourcesContent":["\nimport { createSlice } from '@reduxjs/toolkit';\nimport * as api from '../api/index';\n\nconst slice2 = createSlice({\n    name: 'plant',\n    initialState: {\n        plant: {}\n    },\n    reducers: {\n        fetchOne: (state, action) => {\n            state.plant = action.payload\n        },\n    }\n})\nexport default slice2.reducer; \n\nconst { fetchOne } = slice2.actions\n\nexport const fetchOnePlant = (id) => async (dispatch) => {\n    try {\n        let { data } = await api.fetchOnePlant(id);\n        dispatch(fetchOne({ data }));\n    } catch (error) {\n        console.log(error)\n    }\n}"]},"metadata":{},"sourceType":"module"}