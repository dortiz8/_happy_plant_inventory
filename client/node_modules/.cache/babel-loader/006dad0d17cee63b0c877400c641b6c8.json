{"ast":null,"code":"var _jsxFileName = \"/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/Plants.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom'; // Import Redux store components\n\nimport { fetchAllPlants, getPlantsError, getPlantsStatus } from '../../store/plantsSlice';\nimport { Button, Box, Input, Typography } from '@mui/material';\nimport SearchIcon from '@mui/icons-material/Search';\nimport AddIcon from '@mui/icons-material/Add';\nimport PlantListItem from './PlantListItem';\nimport LoadingSpinner from '../Common/LoadingSpinner';\nimport { SelectAllPlants } from '../../store/plantsSlice';\nimport ErrorMessage from '../Common/ErrorMessage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Plants = () => {\n  _s();\n\n  const [searchedString, setSearchedString] = useState(\"\");\n  const plantList = useSelector(SelectAllPlants);\n  const [filteredList, setFilteredList] = useState(plant);\n  const plantsStatus = useSelector(getPlantsStatus);\n  const plantsError = useSelector(getPlantsError);\n  console.log(filteredList);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (plantsStatus == 'idle') {\n      dispatch(fetchAllPlants());\n    }\n  }, [plantsStatus, dispatch]);\n  useEffect(() => {\n    let list = plantList.filter(item => item.name.toUpperCase().includes(searchedString.toUpperCase()));\n    setFilteredList(list);\n  }, [searchedString]);\n\n  function OpenFormConfirmDelete() {}\n\n  function handleSearchedStringChange(e) {\n    setSearchedString(e.target.value);\n  }\n\n  let content;\n\n  if (plantsStatus == 'loading') {\n    content = /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 19\n    }, this);\n  } else if (plantsStatus == 'succeeded') {\n    content = /*#__PURE__*/_jsxDEV(Box, {\n      children: plantList && !plantsError ? plantList.map(plant => /*#__PURE__*/_jsxDEV(PlantListItem, {\n        plant: plant,\n        OpenFormConfirmDelete: OpenFormConfirmDelete\n      }, plant._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 68\n      }, this)) : filteredList.map(plant => /*#__PURE__*/_jsxDEV(PlantListItem, {\n        plant: plant,\n        OpenFormConfirmDelete: OpenFormConfirmDelete\n      }, plant._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 45\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 19\n    }, this);\n  } else if (plantsStatus == 'failed') {\n    content = /*#__PURE__*/_jsxDEV(ErrorMessage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 19\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        margin: '1rem 0',\n        backgroundColor: 'whitesmoke'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          onChange: handleSearchedStringChange,\n          sx: {\n            width: '80%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(SearchIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          children: searchedString\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/add-plant\",\n            replace: true,\n            children: [/*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 59\n            }, this), \"Plant\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), content]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Plants, \"14r5K6aDWlUmDH6T7qI34utDyMo=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c = Plants;\nexport default Plants;\n\nvar _c;\n\n$RefreshReg$(_c, \"Plants\");","map":{"version":3,"sources":["/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/Plants.js"],"names":["React","useState","useEffect","useSelector","useDispatch","Link","fetchAllPlants","getPlantsError","getPlantsStatus","Button","Box","Input","Typography","SearchIcon","AddIcon","PlantListItem","LoadingSpinner","SelectAllPlants","ErrorMessage","Plants","searchedString","setSearchedString","plantList","filteredList","setFilteredList","plant","plantsStatus","plantsError","console","log","dispatch","list","filter","item","name","toUpperCase","includes","OpenFormConfirmDelete","handleSearchedStringChange","e","target","value","content","map","_id","margin","backgroundColor","width"],"mappings":"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","sourcesContent":["import React, { useState, useEffect} from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\n// Import Redux store components\nimport { fetchAllPlants, getPlantsError, getPlantsStatus } from '../../store/plantsSlice'; \nimport { Button, Box, Input, Typography} from '@mui/material';\nimport SearchIcon from '@mui/icons-material/Search'; \nimport AddIcon from '@mui/icons-material/Add';\nimport PlantListItem from './PlantListItem';\nimport LoadingSpinner from '../Common/LoadingSpinner'; \nimport {SelectAllPlants} from '../../store/plantsSlice'; \nimport ErrorMessage from '../Common/ErrorMessage';\n\n\nconst Plants = () => {\n    const [searchedString, setSearchedString] = useState(\"\");\n    const plantList = useSelector(SelectAllPlants); \n    const [filteredList, setFilteredList] = useState(plant)\n    const plantsStatus = useSelector(getPlantsStatus); \n    const plantsError = useSelector(getPlantsError); \n    \n    console.log(filteredList)\n    const dispatch = useDispatch(); \n    useEffect(() => {\n        if(plantsStatus == 'idle'){\n            dispatch(fetchAllPlants())\n        }   \n    }, [plantsStatus, dispatch]); \n\n    useEffect(()=>{\n        let list = plantList.filter(item => item.name.toUpperCase().includes(searchedString.toUpperCase()))\n        setFilteredList(list)\n    }, [searchedString])\n    function OpenFormConfirmDelete(){\n\n    }\n    function handleSearchedStringChange(e){\n        setSearchedString(e.target.value)\n    }\n    let content; \n    \n    if(plantsStatus == 'loading'){\n        content = <LoadingSpinner />\n    } else if (plantsStatus == 'succeeded'){\n        content = <Box>\n            { plantList && !plantsError ? plantList.map((plant) => <PlantListItem key={plant._id} plant={plant} OpenFormConfirmDelete={OpenFormConfirmDelete} />) : \n                filteredList.map((plant) => <PlantListItem key={plant._id} plant={plant} OpenFormConfirmDelete={OpenFormConfirmDelete} /> )}\n        </Box>\n    } else if (plantsStatus == 'failed'){\n        content = <ErrorMessage />\n    }\n\n    \n    return (\n        <div>\n            <Box sx={{ margin: '1rem 0', backgroundColor: 'whitesmoke'}}>\n                <Box>\n                        <Input \n                            onChange={handleSearchedStringChange}\n                            sx={{ width: '80%' }}></Input>\n                        <SearchIcon />\n                        <Typography>{searchedString}</Typography>\n                </Box>\n                <Box>\n                    <Button><Link to=\"/add-plant\" replace><AddIcon />Plant</Link></Button>\n                </Box>\n               \n            </Box>\n           {content}\n        </div>\n    )\n}\n\nexport default Plants;"]},"metadata":{},"sourceType":"module"}