{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport * as api from '../api/index';\nconst slice = createSlice({\n  name: 'plant',\n  initialState: {\n    plant: {},\n    status: 'idle',\n    //'idel' | 'loading' | 'succeeded' | 'failed'\n    error: null\n  },\n  reducers: {\n    fetchOne: (state, action) => {\n      state.plant = action.payload;\n    }\n  },\n\n  extraReducers(buildrer) {\n    buildrer.addCase(fetchPlant.pending, (state, action) => {\n      state.status = 'loading';\n    }).addCase(fetchPlant.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.plant = action.payload;\n    }).addCase(fetchPlant.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n\n});\nexport default slice.reducer;\nconst {\n  fetchOne\n} = slice.actions;\nexport const SelectSinglePlant = state => state.plant.plant.data;\n_c = SelectSinglePlant;\nexport const getPlantStatus = state => state.plant.status;\nexport const getPlantError = state => state.plant.error;\nexport const fetchOnePlant = id => async dispatch => {\n  try {\n    let {\n      data\n    } = await api.fetchOnePlant(id);\n    dispatch(fetchOne({\n      data\n    }));\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const fetchPlant = createAsyncThunk('plant/fetchPlant', async id => {\n  try {\n    let {\n      data\n    } = await api.fetchOnePlant(id);\n    return data;\n  } catch (error) {}\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectSinglePlant\");","map":{"version":3,"sources":["/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/store/plantSlice.js"],"names":["createAsyncThunk","createSlice","api","slice","name","initialState","plant","status","error","reducers","fetchOne","state","action","payload","extraReducers","buildrer","addCase","fetchPlant","pending","fulfilled","rejected","message","reducer","actions","SelectSinglePlant","data","getPlantStatus","getPlantError","fetchOnePlant","id","dispatch","console","log"],"mappings":"AACA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,OAAO,KAAKC,GAAZ,MAAqB,cAArB;AAEA,MAAMC,KAAK,GAAGF,WAAW,CAAC;AACtBG,EAAAA,IAAI,EAAE,OADgB;AAEtBC,EAAAA,YAAY,EAAE;AACVC,IAAAA,KAAK,EAAE,EADG;AAEVC,IAAAA,MAAM,EAAE,MAFE;AAEM;AAChBC,IAAAA,KAAK,EAAE;AAHG,GAFQ;AAOtBC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,QAAQ,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACzBD,MAAAA,KAAK,CAACL,KAAN,GAAcM,MAAM,CAACC,OAArB;AACH;AAHK,GAPY;;AAYtBC,EAAAA,aAAa,CAACC,QAAD,EAAU;AACnBA,IAAAA,QAAQ,CACHC,OADL,CACaC,UAAU,CAACC,OADxB,EACiC,CAACP,KAAD,EAAOC,MAAP,KAAgB;AACzCD,MAAAA,KAAK,CAACJ,MAAN,GAAe,SAAf;AACH,KAHL,EAIKS,OAJL,CAIaC,UAAU,CAACE,SAJxB,EAImC,CAACR,KAAD,EAAQC,MAAR,KAAmB;AAC9CD,MAAAA,KAAK,CAACJ,MAAN,GAAe,WAAf;AACAI,MAAAA,KAAK,CAACL,KAAN,GAAcM,MAAM,CAACC,OAArB;AACH,KAPL,EAQKG,OARL,CAQaC,UAAU,CAACG,QARxB,EAQkC,CAACT,KAAD,EAAQC,MAAR,KAAmB;AAC7CD,MAAAA,KAAK,CAACJ,MAAN,GAAe,QAAf;AACAI,MAAAA,KAAK,CAACH,KAAN,GAAcI,MAAM,CAACJ,KAAP,CAAaa,OAA3B;AACH,KAXL;AAYH;;AAzBqB,CAAD,CAAzB;AA2BA,eAAelB,KAAK,CAACmB,OAArB;AAEA,MAAM;AAAEZ,EAAAA;AAAF,IAAeP,KAAK,CAACoB,OAA3B;AAEA,OAAO,MAAMC,iBAAiB,GAAIb,KAAD,IAAWA,KAAK,CAACL,KAAN,CAAYA,KAAZ,CAAkBmB,IAAvD;KAAMD,iB;AACb,OAAO,MAAME,cAAc,GAAIf,KAAD,IAAWA,KAAK,CAACL,KAAN,CAAYC,MAA9C;AACP,OAAO,MAAMoB,aAAa,GAAIhB,KAAD,IAAWA,KAAK,CAACL,KAAN,CAAYE,KAA7C;AACP,OAAO,MAAMoB,aAAa,GAAIC,EAAD,IAAQ,MAAOC,QAAP,IAAoB;AACrD,MAAI;AACA,QAAI;AAAEL,MAAAA;AAAF,QAAW,MAAMvB,GAAG,CAAC0B,aAAJ,CAAkBC,EAAlB,CAArB;AACAC,IAAAA,QAAQ,CAACpB,QAAQ,CAAC;AAAEe,MAAAA;AAAF,KAAD,CAAT,CAAR;AACH,GAHD,CAGE,OAAOjB,KAAP,EAAc;AACZuB,IAAAA,OAAO,CAACC,GAAR,CAAYxB,KAAZ;AACH;AACJ,CAPM;AAQP,OAAO,MAAMS,UAAU,GAAGjB,gBAAgB,CAAC,kBAAD,EAAqB,MAAO6B,EAAP,IAAc;AACzE,MAAI;AACA,QAAI;AAAEJ,MAAAA;AAAF,QAAW,MAAMvB,GAAG,CAAC0B,aAAJ,CAAkBC,EAAlB,CAArB;AACA,WAAOJ,IAAP;AACH,GAHD,CAGE,OAAOjB,KAAP,EAAc,CAEf;AACJ,CAPyC,CAAnC","sourcesContent":["\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport * as api from '../api/index';\n\nconst slice = createSlice({\n    name: 'plant',\n    initialState: {\n        plant: {},\n        status: 'idle', //'idel' | 'loading' | 'succeeded' | 'failed'\n        error: null\n    },\n    reducers: {\n        fetchOne: (state, action) => {\n            state.plant = action.payload\n        },\n    }, \n    extraReducers(buildrer){\n        buildrer\n            .addCase(fetchPlant.pending, (state,action)=>{\n                state.status = 'loading';\n            })\n            .addCase(fetchPlant.fulfilled, (state, action) => {\n                state.status = 'succeeded'\n                state.plant = action.payload\n            })\n            .addCase(fetchPlant.rejected, (state, action) => {\n                state.status = 'failed'\n                state.error = action.error.message\n            })\n    }\n})\nexport default slice.reducer; \n\nconst { fetchOne } = slice.actions; \n\nexport const SelectSinglePlant = (state) => state.plant.plant.data; \nexport const getPlantStatus = (state) => state.plant.status; \nexport const getPlantError = (state) => state.plant.error; \nexport const fetchOnePlant = (id) => async (dispatch) => {\n    try {\n        let { data } = await api.fetchOnePlant(id);\n        dispatch(fetchOne({ data }));\n    } catch (error) {\n        console.log(error)\n    }\n}\nexport const fetchPlant = createAsyncThunk('plant/fetchPlant', async (id) => {\n    try {\n        let { data } = await api.fetchOnePlant(id);\n        return data\n    } catch (error) {\n\n    }\n})"]},"metadata":{},"sourceType":"module"}