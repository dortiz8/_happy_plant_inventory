{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport * as api from '../api/index'; //Slice \n\nconst slice = createSlice({\n  name: 'plants',\n  initialState: [],\n  reducers: {\n    fetchAll: (state, action) => {\n      state = action.payload;\n    },\n    fetchOne: (state, action) => {\n      state.plant = action.payload;\n    },\n    createPlant: (state, action) => {\n      const newPlantList = state.push(action.payload);\n      state = newPlantList;\n    },\n    deleteOne: (state, action) => {\n      state.plants = state.plants.filter(plant => plant._id !== action.payload._id);\n    }\n  }\n});\nexport default slice.reducer; // Actions\n\nconst {\n  fetchAll,\n  fetchOne,\n  createPlant,\n  deleteOne\n} = slice.actions;\nexport const createNewPlant = plantInfo => async dispatch => {\n  try {\n    let {\n      data\n    } = await api.addNewPlant(plantInfo);\n    dispatch(createPlant({\n      data\n    }));\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const fetchAllPlants = () => async dispatch => {\n  try {\n    let {\n      data\n    } = await api.fetchAllPlants();\n    dispatch(fetchAll({\n      data\n    }));\n  } catch (error) {}\n};\nexport const fetchOnePlant = id => async dispatch => {\n  try {\n    let {\n      data\n    } = await api.fetchOnePlant(id);\n    dispatch(fetchOne({\n      data\n    }));\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deleteOnePlant = id => async dispatch => {\n  try {\n    let {\n      data\n    } = await api.deleteOnePlant(id);\n    dispatch(deleteOne({\n      data\n    }));\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/store/plants.js"],"names":["createSlice","api","slice","name","initialState","reducers","fetchAll","state","action","payload","fetchOne","plant","createPlant","newPlantList","push","deleteOne","plants","filter","_id","reducer","actions","createNewPlant","plantInfo","dispatch","data","addNewPlant","error","console","log","fetchAllPlants","fetchOnePlant","id","deleteOnePlant"],"mappings":"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","sourcesContent":["\nimport {createSlice} from '@reduxjs/toolkit'; \nimport * as api from '../api/index'; \n//Slice \n\nconst slice = createSlice({\n    name: 'plants', \n    initialState: [], \n    reducers: {\n        fetchAll: (state, action) =>{\n            state = action.payload; \n        }, \n        fetchOne: (state, action) =>{\n            state.plant = action.payload\n        },\n        createPlant: (state, action) =>{\n            const newPlantList = state.push(action.payload)\n            state = newPlantList\n        }, \n        deleteOne: (state, action) =>{\n            state.plants  = state.plants.filter(plant => plant._id !== action.payload._id)\n           \n        }\n    }\n}); \n\nexport default slice.reducer; \n\n// Actions\nconst {fetchAll, fetchOne, createPlant, deleteOne} = slice.actions; \n\nexport const createNewPlant = (plantInfo) => async (dispatch)=>{\n    try{\n        let {data} = await api.addNewPlant(plantInfo); \n        dispatch(createPlant({data}))\n    }catch(error){\n        console.log(error)\n    }\n}; \n\nexport const fetchAllPlants = () => async (dispatch)=>{\n    try {\n        let {data} = await api.fetchAllPlants(); \n        dispatch(fetchAll({data}))\n    } catch (error) {\n        \n    }\n}\n\nexport const fetchOnePlant = (id) => async (dispatch) =>{\n    try{\n        let {data} = await api.fetchOnePlant(id); \n        dispatch(fetchOne({data})); \n    } catch(error){\n        console.log(error)\n    }\n}\n\nexport const deleteOnePlant = (id) => async (dispatch) =>{\n    try {\n        let {data} = await api.deleteOnePlant(id);\n        dispatch(deleteOne({data}))\n    } catch (error) {\n        console.log(error)\n    }\n}"]},"metadata":{},"sourceType":"module"}