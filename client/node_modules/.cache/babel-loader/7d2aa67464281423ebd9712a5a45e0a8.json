{"ast":null,"code":"var _jsxFileName = \"/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/FormAddPlant.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux'; // Redux store functions\n\nimport { createNewPlant } from '../../store/plantsSlice'; // Material UI Section \n\nimport { Button, Typography, Paper, Box, Input, InputLabel, Select, MenuItem, List, ListItem, Radio, FormControl, FormLabel, RadioGroup, FormControlLabel } from '@mui/material';\nimport CloseRounded from '@mui/icons-material/CloseRounded';\nimport AddIcon from '@mui/icons-material/Add'; // Component Imports\n\nimport FormConfirmAddPlant from './FormConfirmAddPlant';\nimport FormConfirmClear from './FormConfirmClear'; // Other imports \n\nimport plantCategories from '../../lists/plantCategories';\nimport { useNavigate } from 'react-router';\nimport { PlantObjectValidator } from '../../services/validation';\nimport GeneralPlantInfo from '../../models/generalPlantInfo';\nimport PlantDetails from './PlantSpecifics/PlantDetails';\nimport PlantSpecifics from '../../models/plantSpecifics';\nimport { nanoid } from 'nanoid';\nimport plantSpecifics from '../../models/plantSpecifics';\nimport WarningMessage from '../Common/WarningMessage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst FormAddPlant = e => {\n  _s();\n\n  // Local Storage variables\n  let localStorageData = JSON.parse(localStorage.getItem('plantInfo')) || new GeneralPlantInfo(\"\", \"\");\n  let localStorageQuantityArray = JSON.parse(localStorage.getItem('quantityArray')) || [];\n  let localStoragePlantIndex = JSON.parse(localStorage.getItem('plantIndex')) || 1; // Component State\n\n  const [plantInfo, setPlantInfo] = useState(localStorageData);\n  const [quantityArray, setQuantityArray] = useState(localStorageQuantityArray);\n  const [multiple, setMultiple] = useState(quantityArray.length > 1);\n  const [plantIndex, setPlantIndex] = useState(localStoragePlantIndex);\n  const [disableAdd, setDisableAdd] = useState(false);\n  const [formHasAllRequiredFields, setFormHasAllRequiredFields] = useState(true);\n  const [isQuantityArrayValid, setisQuantityArrayValid] = useState(true);\n  const [formConfirmVisible, setFormConfirmVisible] = useState(false);\n  const [formConfirmClearVisible, setFormConfirmClearVisible] = useState(false);\n  const [showWarningMessage, setShowWarningMessage] = useState(false); // Dispatch\n\n  const dispatch = useDispatch(); // Navigation \n\n  const navigate = useNavigate(); // Set one default plant card if the array of plants is empty. This allows the user to \n  // start off with one object when visiting this page. \n\n  useEffect(() => {\n    if (!quantityArray.length) {\n      let arr = [];\n      arr.push(new PlantSpecifics(\"\", 0, \"\", [], 0));\n      setQuantityArray(arr);\n    } else {\n      if (!validateQuantityArray(true)) {\n        setDisableAdd(true);\n      } else {\n        setDisableAdd(false);\n      }\n    }\n  }, [quantityArray]); // Setting plantInfo into local storage\n\n  useEffect(() => {\n    localStorage.setItem('plantInfo', JSON.stringify(plantInfo));\n    localStorage.setItem('quantityArray', JSON.stringify(quantityArray));\n    localStorage.setItem('plantIndex', JSON.stringify(plantIndex));\n  }, [plantInfo, quantityArray, plantIndex]);\n\n  function handleInputChange(event) {\n    let newObj = {};\n\n    if (!isNaN(parseInt(event.target.value))) {\n      newObj[event.target.name] = parseInt(event.target.value);\n    } else {\n      newObj[event.target.name] = event.target.value;\n    }\n\n    setPlantInfo({ ...plantInfo,\n      ...newObj\n    });\n  }\n\n  ;\n\n  function handleMultiple(e) {\n    let val = e.target.value;\n\n    if (val.toLocaleUpperCase() == \"Single\".toLocaleUpperCase()) {\n      if (quantityArray.length > 1) {\n        setShowWarningMessage(true);\n      }\n    } else {\n      setMultiple(true);\n    }\n  }\n\n  function handleSwitchingFromMultipleToSingle() {\n    setQuantityArray([]);\n    setMultiple(false);\n    setShowWarningMessage(false);\n  }\n\n  function handleDeletePlantFromList(idx) {\n    let filteredArr = quantityArray.filter(obj => obj.idx !== idx);\n    setQuantityArray(filteredArr);\n  }\n\n  function handleAddPlantToList() {\n    let tempArr = [...quantityArray, new PlantSpecifics(\"\", 0, \"\", [], plantIndex)];\n    setQuantityArray(tempArr);\n    setPlantIndex(plantIndex + 1);\n  }\n\n  function handleSavePlant(detailsObj) {\n    // validation here\n    let newObj = quantityArray.find(obj => detailsObj.idx == obj.idx);\n    let idxOfObj = quantityArray.indexOf(newObj);\n    detailsObj.saved = true;\n    let newArr = [...quantityArray.slice(0, idxOfObj), detailsObj, ...quantityArray.slice(idxOfObj + 1)];\n    setQuantityArray(newArr);\n  }\n\n  function handlePreSubmit(e) {\n    // Prevent postback \n    e.preventDefault();\n\n    if (validatePlantObject() && validateQuantityArray()) {\n      setFormConfirmVisible(true);\n    }\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault(); // Add quantity array to our plant object\n\n    plantInfo.multiple = quantityArray;\n    dispatch(createNewPlant(plantInfo));\n    setFormConfirmVisible(false);\n    localStorage.removeItem('plantInfo');\n    localStorage.removeItem('quantityArray');\n    localStorage.removeItem('plantIndex');\n    navigate('/plants', {\n      replace: true\n    });\n  }\n\n  function handleClearForm() {\n    let blankPlantObject = new GeneralPlantInfo(\"\", \"\");\n    setPlantInfo(blankPlantObject);\n  }\n\n  function validateQuantityArray() {\n    let validateWithoutErrors = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let result = true;\n\n    for (let i = 0; i < quantityArray.length; i++) {\n      const details = quantityArray[i];\n\n      if (!details.saved) {\n        if (!validateWithoutErrors) setisQuantityArrayValid(false);\n        return false;\n      }\n    }\n\n    console.log(result, ' qty array');\n    return result;\n  }\n\n  function validatePlantObject() {\n    let PlantValidator = new PlantObjectValidator(plantInfo);\n    let result = PlantValidator.validatePlantObject();\n    setFormHasAllRequiredFields(PlantValidator.hasAllRequiredFields);\n    return result;\n  }\n\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    children: [formConfirmVisible && /*#__PURE__*/_jsxDEV(FormConfirmAddPlant, {\n      plantInfo: plantInfo,\n      quantityArray: quantityArray,\n      setFormConfirmVisible: setFormConfirmVisible,\n      handleSubmit: handleSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 36\n    }, this), formConfirmClearVisible && /*#__PURE__*/_jsxDEV(FormConfirmClear, {\n      handleClearForm: handleClearForm,\n      setFormConfirmClearVisible: setFormConfirmClearVisible\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 41\n    }, this), showWarningMessage && /*#__PURE__*/_jsxDEV(WarningMessage, {\n      message: \"Changing to Single will delete all other plants. Do you wish to proceed?\",\n      handleYes: handleSwitchingFromMultipleToSingle,\n      handleNo: () => setShowWarningMessage(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 36\n    }, this), formConfirmVisible || formConfirmClearVisible ? /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false) : /*#__PURE__*/_jsxDEV(\"form\", {\n      autoComplete: \"off\",\n      noValidate: true,\n      onSubmit: e => handlePreSubmit(e),\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          children: \"Describe the new member!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        children: [!formHasAllRequiredFields && /*#__PURE__*/_jsxDEV(Typography, {\n          color: \"error\",\n          children: \"* Name and Category are required.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 55\n        }, this), !isQuantityArrayValid && /*#__PURE__*/_jsxDEV(Typography, {\n          color: \"error\",\n          children: \"* Please save all plants. You can discard if necessary.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 51\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          backgroundColor: '#FAFAFA',\n          margin: '1rem 0'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            name: \"name\",\n            type: \"text\",\n            value: plantInfo.name,\n            onChange: handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            children: \"Category\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            label: \"Category\",\n            name: \"category\",\n            value: plantInfo.category ? plantInfo.category : '',\n            onChange: handleInputChange,\n            children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n              value: \"\",\n              children: \" -- \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 33\n            }, this), plantCategories.map(category => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: category,\n              children: category\n            }, plantCategories.indexOf(category), false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 69\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(FormControl, {\n            children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n              children: \"How Many?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(RadioGroup, {\n              onChange: handleMultiple,\n              children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n                value: \"Single\",\n                label: \"Single\",\n                control: /*#__PURE__*/_jsxDEV(Radio, {\n                  checked: !multiple\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 201,\n                  columnNumber: 94\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 201,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                value: \"Multiple\",\n                label: \"Multiple\",\n                control: /*#__PURE__*/_jsxDEV(Radio, {\n                  checked: multiple\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 202,\n                  columnNumber: 98\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 202,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 29\n          }, this), multiple && /*#__PURE__*/_jsxDEV(Box, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"success\",\n              disabled: disableAdd,\n              onClick: handleAddPlantToList,\n              children: [\"Add\", /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 205,\n                columnNumber: 147\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 47\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 42\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          children: quantityArray.map((info, index) => /*#__PURE__*/_jsxDEV(PlantDetails, {\n            plantInfo: info,\n            listIndex: index,\n            handleSavePlant: handleSavePlant,\n            handleDeletePlantFromList: handleDeletePlantFromList\n          }, nanoid(), false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 37\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        margin: '2rem 0',\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          size: \"large\",\n          type: \"submit\",\n          children: \"Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"error\",\n          size: \"large\",\n          onClick: () => setFormConfirmClearVisible(true),\n          children: \"Clear\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 9\n  }, this);\n};\n\n_s(FormAddPlant, \"Gh3Dtlcqx9A16KgmkJF6PrQ6wFc=\", false, function () {\n  return [useDispatch, useNavigate];\n});\n\n_c = FormAddPlant;\nexport default FormAddPlant;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormAddPlant\");","map":{"version":3,"sources":["/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/FormAddPlant.js"],"names":["React","useState","useEffect","useDispatch","useSelector","createNewPlant","Button","Typography","Paper","Box","Input","InputLabel","Select","MenuItem","List","ListItem","Radio","FormControl","FormLabel","RadioGroup","FormControlLabel","CloseRounded","AddIcon","FormConfirmAddPlant","FormConfirmClear","plantCategories","useNavigate","PlantObjectValidator","GeneralPlantInfo","PlantDetails","PlantSpecifics","nanoid","plantSpecifics","WarningMessage","FormAddPlant","e","localStorageData","JSON","parse","localStorage","getItem","localStorageQuantityArray","localStoragePlantIndex","plantInfo","setPlantInfo","quantityArray","setQuantityArray","multiple","setMultiple","length","plantIndex","setPlantIndex","disableAdd","setDisableAdd","formHasAllRequiredFields","setFormHasAllRequiredFields","isQuantityArrayValid","setisQuantityArrayValid","formConfirmVisible","setFormConfirmVisible","formConfirmClearVisible","setFormConfirmClearVisible","showWarningMessage","setShowWarningMessage","dispatch","navigate","arr","push","validateQuantityArray","setItem","stringify","handleInputChange","event","newObj","isNaN","parseInt","target","value","name","handleMultiple","val","toLocaleUpperCase","handleSwitchingFromMultipleToSingle","handleDeletePlantFromList","idx","filteredArr","filter","obj","handleAddPlantToList","tempArr","handleSavePlant","detailsObj","find","idxOfObj","indexOf","saved","newArr","slice","handlePreSubmit","preventDefault","validatePlantObject","handleSubmit","removeItem","replace","handleClearForm","blankPlantObject","validateWithoutErrors","result","i","details","console","log","PlantValidator","hasAllRequiredFields","backgroundColor","margin","category","map","info","index"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {useState, useEffect} from 'react'; \nimport { useDispatch, useSelector } from 'react-redux'; \n// Redux store functions\nimport { createNewPlant} from '../../store/plantsSlice';\n// Material UI Section \nimport { Button, Typography, Paper, Box, Input, InputLabel, Select, MenuItem, List, ListItem, Radio, FormControl, FormLabel, RadioGroup, FormControlLabel} from '@mui/material';\nimport CloseRounded from '@mui/icons-material/CloseRounded';\n\nimport AddIcon from '@mui/icons-material/Add';\n// Component Imports\nimport FormConfirmAddPlant from './FormConfirmAddPlant'; \nimport FormConfirmClear from './FormConfirmClear';\n// Other imports \nimport plantCategories from '../../lists/plantCategories';\n\nimport { useNavigate } from 'react-router';\nimport { PlantObjectValidator } from '../../services/validation';\nimport GeneralPlantInfo from '../../models/generalPlantInfo';\n\nimport PlantDetails from './PlantSpecifics/PlantDetails';\nimport PlantSpecifics from '../../models/plantSpecifics';\nimport {nanoid} from 'nanoid'; \nimport plantSpecifics from '../../models/plantSpecifics';\nimport WarningMessage from '../Common/WarningMessage';\n\nconst FormAddPlant = (e) => {\n    // Local Storage variables\n    let localStorageData = JSON.parse(localStorage.getItem('plantInfo')) || new GeneralPlantInfo(\"\", \"\");\n    let localStorageQuantityArray = JSON.parse(localStorage.getItem('quantityArray')) || []; \n    let localStoragePlantIndex = JSON.parse(localStorage.getItem('plantIndex')) || 1; \n\n    // Component State\n    const [plantInfo, setPlantInfo] = useState(localStorageData);\n    const [quantityArray, setQuantityArray] = useState(localStorageQuantityArray); \n    const [multiple, setMultiple] = useState(quantityArray.length > 1); \n    const [plantIndex, setPlantIndex] = useState(localStoragePlantIndex);\n    const [disableAdd, setDisableAdd] = useState(false)\n    const [formHasAllRequiredFields, setFormHasAllRequiredFields] = useState(true); \n    const [isQuantityArrayValid, setisQuantityArrayValid] = useState(true); \n    const [formConfirmVisible, setFormConfirmVisible] = useState(false); \n    const [formConfirmClearVisible, setFormConfirmClearVisible] = useState(false); \n    const [showWarningMessage, setShowWarningMessage] = useState(false); \n\n    // Dispatch\n    const dispatch = useDispatch()\n\n    // Navigation \n    const navigate = useNavigate()\n    \n    // Set one default plant card if the array of plants is empty. This allows the user to \n    // start off with one object when visiting this page. \n    useEffect(()=>{\n        if(!quantityArray.length){\n            let arr = []; \n            arr.push(new PlantSpecifics(\"\", 0, \"\", [], 0))\n            setQuantityArray(arr); \n        }else{\n            if(!validateQuantityArray(true)){\n                setDisableAdd(true); \n            }else{\n                setDisableAdd(false);\n            }\n        }\n    },[quantityArray])\n    // Setting plantInfo into local storage\n    useEffect(()=>{\n        localStorage.setItem('plantInfo', JSON.stringify(plantInfo))\n        localStorage.setItem('quantityArray', JSON.stringify(quantityArray));\n        localStorage.setItem('plantIndex', JSON.stringify(plantIndex));\n    }, [plantInfo, quantityArray, plantIndex])\n\n\n    function handleInputChange(event){\n        let newObj = {}; \n        if (!isNaN(parseInt(event.target.value))){\n            newObj[event.target.name] = parseInt(event.target.value);\n        }else{\n            newObj[event.target.name] = event.target.value;\n        }\n        \n            setPlantInfo({\n                ...plantInfo, \n                ...newObj\n            })  \n    }; \n    \n    function handleMultiple(e){\n        let val = e.target.value; \n        if(val.toLocaleUpperCase() == \"Single\".toLocaleUpperCase()){\n            if(quantityArray.length > 1){\n                setShowWarningMessage(true)\n            }\n        }else{\n            setMultiple(true); \n        } \n    }\n    function handleSwitchingFromMultipleToSingle(){\n        setQuantityArray([]); \n        setMultiple(false); \n        setShowWarningMessage(false); \n    }\n\n    function handleDeletePlantFromList(idx){\n        let filteredArr = quantityArray.filter(obj => obj.idx !== idx)\n        setQuantityArray(filteredArr);\n    }\n\n    function handleAddPlantToList(){\n        let tempArr = [...quantityArray, new PlantSpecifics(\"\", 0, \"\", [], plantIndex) ];\n        setQuantityArray(tempArr); \n        setPlantIndex(plantIndex + 1)\n    }\n\n    function handleSavePlant(detailsObj){\n        // validation here\n        let newObj = quantityArray.find(obj => detailsObj.idx == obj.idx)\n        let idxOfObj = quantityArray.indexOf(newObj);\n        detailsObj.saved = true; \n        let newArr = [...quantityArray.slice(0,idxOfObj), detailsObj, ...quantityArray.slice(idxOfObj+1)]; \n        setQuantityArray(newArr); \n    }\n\n    function handlePreSubmit(e){\n        // Prevent postback \n        e.preventDefault(); \n        if (validatePlantObject() && validateQuantityArray()){\n            setFormConfirmVisible(true); \n        }\n    }\n    function handleSubmit(e){\n\n        e.preventDefault(); \n        // Add quantity array to our plant object\n        plantInfo.multiple = quantityArray; \n        dispatch(createNewPlant(plantInfo));\n        setFormConfirmVisible(false); \n        localStorage.removeItem('plantInfo'); \n        localStorage.removeItem('quantityArray'); \n        localStorage.removeItem('plantIndex'); \n        navigate('/plants', {replace: true})\n    }\n\n    function handleClearForm(){\n        let blankPlantObject = new GeneralPlantInfo(\"\", \"\")\n        setPlantInfo(blankPlantObject)\n    }\n    function validateQuantityArray(validateWithoutErrors = null){\n        let result = true; \n        for (let i = 0; i < quantityArray.length; i++) {\n            const details = quantityArray[i];\n            if(!details.saved){\n                if(!validateWithoutErrors) setisQuantityArrayValid(false); \n                return false; \n            } \n        }\n        \n        console.log(result, ' qty array')\n        return result; \n    }\n    function validatePlantObject(){\n        let PlantValidator = new PlantObjectValidator(plantInfo); \n        let result  = PlantValidator.validatePlantObject(); \n        setFormHasAllRequiredFields(PlantValidator.hasAllRequiredFields); \n        return result; \n    }\n    \n    return (\n        <Paper>\n            {formConfirmVisible && <FormConfirmAddPlant plantInfo={plantInfo} quantityArray={quantityArray} setFormConfirmVisible={setFormConfirmVisible} handleSubmit={handleSubmit}/>}\n            {formConfirmClearVisible && <FormConfirmClear handleClearForm={handleClearForm} setFormConfirmClearVisible={setFormConfirmClearVisible}/>}\n            {showWarningMessage && <WarningMessage message=\"Changing to Single will delete all other plants. Do you wish to proceed?\" handleYes={handleSwitchingFromMultipleToSingle} handleNo={()=>setShowWarningMessage(false)}/>}\n            {formConfirmVisible || formConfirmClearVisible ? <></> : \n                <form autoComplete=\"off\" noValidate onSubmit={(e) => handlePreSubmit(e)}>\n                \n                    <Box>\n                        <Typography>Describe the new member!</Typography>\n                    </Box>\n                    <Box>\n                        {!formHasAllRequiredFields && <Typography color=\"error\">* Name and Category are required.</Typography>}\n                        {!isQuantityArrayValid && <Typography color=\"error\">* Please save all plants. You can discard if necessary.</Typography>}\n                    </Box>\n                    <Box sx={{backgroundColor: '#FAFAFA', margin: '1rem 0'}}>\n                        <Box>\n                            <InputLabel>Name</InputLabel>\n                            <Input name=\"name\" type=\"text\" value={plantInfo.name} onChange={handleInputChange}></Input>\n                        </Box>\n                        <Box>\n                            <InputLabel>Category</InputLabel>\n                            <Select label=\"Category\" name=\"category\" value={plantInfo.category ? plantInfo.category : ''} onChange={handleInputChange}>\n                                <MenuItem value=\"\"> -- </MenuItem>\n                                {\n                                    plantCategories.map(category => <MenuItem key={plantCategories.indexOf(category)} value={category}>{category}</MenuItem>)\n                                }\n                            </Select>\n                        </Box>\n                        <Box>\n                            <FormControl>\n                                <FormLabel>How Many?</FormLabel>\n                                <RadioGroup onChange={handleMultiple}>\n                                    <FormControlLabel value=\"Single\" label=\"Single\" control={<Radio checked={!multiple} />} />\n                                    <FormControlLabel value=\"Multiple\" label=\"Multiple\" control={<Radio checked={multiple} />} />\n                                </RadioGroup>\n                            </FormControl>\n                            {multiple && <Box><Button variant=\"contained\" color=\"success\" disabled={disableAdd} onClick={handleAddPlantToList}>Add<AddIcon /></Button></Box>}\n                        </Box>\n                    </Box>\n                    <Box>\n                        <Box>\n                            {\n                                quantityArray.map((info, index) => (\n                                    <PlantDetails plantInfo={info}\n                                        listIndex ={index}\n                                        handleSavePlant={handleSavePlant}\n                                        handleDeletePlantFromList={handleDeletePlantFromList}\n                                        key={nanoid()}\n                                    />))\n                            }\n                        </Box>\n                        \n                    </Box>\n                    <Box margin={'2rem 0'}>\n                        <Button variant=\"contained\" size=\"large\" type=\"submit\">Add</Button>\n                        <Button variant=\"contained\" color=\"error\" size=\"large\" onClick={() => setFormConfirmClearVisible(true)}>Clear</Button>\n                    </Box>\n                </form>\n            }\n        </Paper>\n    )\n}\n\nexport default FormAddPlant;"]},"metadata":{},"sourceType":"module"}