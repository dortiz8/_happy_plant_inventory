{"ast":null,"code":"var _jsxFileName = \"/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/FormAddPlant.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux'; // Redux store functions\n\nimport { createNewPlant } from '../../store/plants'; // Material UI Section \n\nimport { Button, Typography, Paper, Box, Input, InputLabel, Select, MenuItem, List, ListItem } from '@mui/material';\nimport CloseRounded from '@mui/icons-material/CloseRounded'; // Component Imports\n\nimport FormConfirmAddPlant from './FormConfirmAddPlant';\nimport FormConfirmClear from './FormConfirmClear'; // Other imports \n\nimport plantCategories from '../../lists/plantCategories';\nimport sizes from '../../constants/sizes';\nimport { CHARACTER_LIMIT } from '../../constants/limits';\nimport selectedFile from '../../models/fileClass';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet blankState = {\n  name: \"\",\n  category: \"\",\n  quantity: 0,\n  size: \"\",\n  description: \"\",\n  price: 0,\n  selectedFiles: []\n};\n\nconst FormAddPlant = e => {\n  _s();\n\n  // Component State section \n  let localStorageData = JSON.parse(localStorage.getItem('plantInfo')) || blankState;\n  const [plantInfo, setPlantInfo] = useState(localStorageData);\n  const [formHasAllRequiredFields, setFormHasAllRequiredFields] = useState(true);\n  const [inputOfNumberValid, setInputOfNumberValid] = useState(true);\n  const [formConfirmVisible, setFormConfirmVisible] = useState(false);\n  const [formConfirmClearVisible, setFormConfirmClearVisible] = useState(false);\n  const dispatch = useDispatch();\n  console.log(plantInfo);\n  useEffect(() => {\n    localStorage.setItem('plantInfo', JSON.stringify(plantInfo));\n  });\n\n  function handleInputChange(event) {\n    let newObj = {};\n\n    if (!isNaN(parseInt(event.target.value))) {\n      newObj[event.target.name] = parseInt(event.target.value);\n    } else {\n      newObj[event.target.name] = event.target.value;\n    }\n\n    setPlantInfo({ ...plantInfo,\n      ...newObj\n    });\n  }\n\n  ;\n\n  const toBase64 = file => new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n\n    reader.onload = () => resolve(reader.result);\n\n    reader.onerror = error => reject(error);\n  });\n\n  async function handleFileSelection(event) {\n    let files = event.target.files;\n    let tempArray = [];\n\n    if (files) {\n      for (let i = 0; i < files.length; i++) {\n        let selectedFileObj = new selectedFile(files[i].name, files[i].type, files[i].size, await toBase64(files[i]));\n        tempArray.push(selectedFileObj);\n      }\n\n      ;\n      setPlantInfo({ ...plantInfo,\n        selectedFiles: tempArray\n      });\n    }\n  }\n\n  function DeleteFileFromList(event) {\n    let filteredList = plantInfo.selectedFiles.filter(file => file.name !== event.currentTarget.value);\n    setPlantInfo({ ...plantInfo,\n      selectedFiles: [...filteredList]\n    });\n  }\n\n  function handlePreSubmit(e) {\n    // Prevent postback \n    e.preventDefault();\n\n    if (submitValidation()) {\n      setFormConfirmVisible(true);\n    }\n  }\n\n  function handleSubmit(e) {\n    dispatch(createNewPlant(plantInfo));\n    setFormConfirmVisible(false);\n  }\n\n  function handleClearForm() {\n    setPlantInfo(blankState);\n  }\n\n  function submitValidation() {\n    let result = true;\n\n    if (!(plantInfo.name.trim() !== \"\" && plantInfo.category.trim() !== \"\" && plantInfo.quantity !== 0 && plantInfo.size.trim() !== \"\" && plantInfo.description.trim() !== \"\" && plantInfo.price !== 0 && plantInfo.selectedFiles.length !== 0)) {\n      result = false;\n      setFormHasAllRequiredFields(false);\n    } else if (isNaN(parseInt(plantInfo.quantity)) || parseInt(plantInfo.quantity) < 0) {\n      result = false;\n      setInputOfNumberValid(false);\n      setFormHasAllRequiredFields(true);\n    } else if (parseInt(plantInfo.price) < 0) {\n      result = false;\n      setInputOfNumberValid(false);\n      setFormHasAllRequiredFields(true);\n    } else {\n      setFormHasAllRequiredFields(true);\n      setInputOfNumberValid(true);\n      return result;\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    children: [formConfirmVisible && /*#__PURE__*/_jsxDEV(FormConfirmAddPlant, {\n      plantInfo: plantInfo,\n      setFormConfirmVisible: setFormConfirmVisible,\n      handleSubmit: handleSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 36\n    }, this), formConfirmClearVisible && /*#__PURE__*/_jsxDEV(FormConfirmClear, {\n      handleClearForm: handleClearForm,\n      setFormConfirmClearVisible: setFormConfirmClearVisible\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 41\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 9\n  }, this);\n};\n\n_s(FormAddPlant, \"M8A1bUIxQSmFHY78yR2bUTIQ+XE=\", false, function () {\n  return [useDispatch];\n});\n\n_c = FormAddPlant;\nexport default FormAddPlant;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormAddPlant\");","map":{"version":3,"sources":["/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/FormAddPlant.js"],"names":["React","useState","useEffect","useDispatch","useSelector","createNewPlant","Button","Typography","Paper","Box","Input","InputLabel","Select","MenuItem","List","ListItem","CloseRounded","FormConfirmAddPlant","FormConfirmClear","plantCategories","sizes","CHARACTER_LIMIT","selectedFile","blankState","name","category","quantity","size","description","price","selectedFiles","FormAddPlant","e","localStorageData","JSON","parse","localStorage","getItem","plantInfo","setPlantInfo","formHasAllRequiredFields","setFormHasAllRequiredFields","inputOfNumberValid","setInputOfNumberValid","formConfirmVisible","setFormConfirmVisible","formConfirmClearVisible","setFormConfirmClearVisible","dispatch","console","log","setItem","stringify","handleInputChange","event","newObj","isNaN","parseInt","target","value","toBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","handleFileSelection","files","tempArray","i","length","selectedFileObj","type","push","DeleteFileFromList","filteredList","filter","currentTarget","handlePreSubmit","preventDefault","submitValidation","handleSubmit","handleClearForm","trim"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {useState, useEffect} from 'react'; \nimport { useDispatch, useSelector } from 'react-redux'; \n// Redux store functions\nimport { createNewPlant} from '../../store/plants';\n// Material UI Section \nimport { Button, Typography, Paper, Box, Input, InputLabel, Select, MenuItem, List, ListItem} from '@mui/material';\nimport CloseRounded from '@mui/icons-material/CloseRounded'; \n// Component Imports\nimport FormConfirmAddPlant from './FormConfirmAddPlant'; \nimport FormConfirmClear from './FormConfirmClear';\n// Other imports \nimport plantCategories from '../../lists/plantCategories';\nimport sizes from '../../constants/sizes'; \nimport {CHARACTER_LIMIT} from '../../constants/limits'; \nimport selectedFile from '../../models/fileClass'; \nlet blankState = {name: \"\", category: \"\", quantity: 0, size: \"\", description: \"\", price: 0, selectedFiles: []}\nconst FormAddPlant = (e) => {\n    // Component State section \n    let localStorageData = JSON.parse(localStorage.getItem('plantInfo')) || blankState; \n    const [plantInfo, setPlantInfo] = useState(localStorageData);\n    const [formHasAllRequiredFields, setFormHasAllRequiredFields] = useState(true); \n    const [inputOfNumberValid, setInputOfNumberValid] = useState(true); \n    const [formConfirmVisible, setFormConfirmVisible] = useState(false); \n    const [formConfirmClearVisible, setFormConfirmClearVisible] = useState(false); \n    const dispatch = useDispatch()\n    console.log(plantInfo)\n\n    useEffect(()=>{\n        localStorage.setItem('plantInfo', JSON.stringify(plantInfo))\n    })\n    function handleInputChange(event){\n        let newObj = {}; \n        if (!isNaN(parseInt(event.target.value))){\n            newObj[event.target.name] = parseInt(event.target.value);\n        }else{\n            newObj[event.target.name] = event.target.value;\n        }       \n        setPlantInfo({\n            ...plantInfo, \n            ...newObj\n        })\n    }; \n    const toBase64 = file => new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = error => reject(error);\n    });\n    async function handleFileSelection(event){\n        let files = event.target.files; \n        let tempArray = []; \n\n        if(files){\n            for (let i = 0; i < files.length; i++) {\n                let selectedFileObj = new selectedFile(files[i].name, files[i].type, files[i].size, await toBase64(files[i]));\n                tempArray.push(selectedFileObj);\n            }; \n            setPlantInfo({...plantInfo, selectedFiles: tempArray})\n        }\n    }\n    function DeleteFileFromList(event){\n        let filteredList = plantInfo.selectedFiles.filter(file => file.name !== event.currentTarget.value); \n        setPlantInfo({...plantInfo, selectedFiles: [...filteredList]}); \n    }\n\n    function handlePreSubmit(e){\n        // Prevent postback \n        e.preventDefault(); \n        if(submitValidation()){\n            setFormConfirmVisible(true); \n        }\n    }\n    function handleSubmit(e){\n        dispatch(createNewPlant(plantInfo));\n        setFormConfirmVisible(false); \n\n    }\n\n    function handleClearForm(){\n        setPlantInfo(blankState)\n    }\n\n    function submitValidation(){\n        let result = true; \n        if(!(plantInfo.name.trim() !== \"\" && plantInfo.category.trim() !== \"\" && plantInfo.quantity !== 0 && plantInfo.size.trim() !== \"\" && plantInfo.description.trim()  !== \"\" && plantInfo.price !== 0 && plantInfo.selectedFiles.length !== 0)){\n            result = false; \n            setFormHasAllRequiredFields(false);\n        } else if (isNaN(parseInt(plantInfo.quantity)) || parseInt(plantInfo.quantity) < 0){\n            result = false; \n            setInputOfNumberValid(false);\n            setFormHasAllRequiredFields(true);\n        } else if (parseInt(plantInfo.price) < 0){\n            result = false; \n            setInputOfNumberValid(false);\n            setFormHasAllRequiredFields(true);\n        } else {\n            setFormHasAllRequiredFields(true);\n            setInputOfNumberValid(true);\n            return result; \n        }\n    }\n    \n    return (\n        <Paper>\n            {formConfirmVisible && <FormConfirmAddPlant plantInfo={plantInfo} setFormConfirmVisible={setFormConfirmVisible} handleSubmit={handleSubmit}/>}\n            {formConfirmClearVisible && <FormConfirmClear handleClearForm={handleClearForm} setFormConfirmClearVisible={setFormConfirmClearVisible}/>}\n            {\n                \n            }\n  \n        </Paper>\n    )\n}\n\nexport default FormAddPlant;"]},"metadata":{},"sourceType":"module"}