{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport * as api from '../api/index';\nconst slice = createSlice({\n  name: 'plant',\n  initialState: {\n    plant: {}\n  },\n  reducers: {\n    fetchOne: (state, action) => {\n      state.plant = action.payload;\n    }\n  },\n\n  extraReducers(buildrer) {}\n\n});\nexport default slice.reducer;\nconst {\n  fetchOne\n} = slice.actions;\nexport const SelectSinglePlant = state => state.plant.plant.data;\n_c = SelectSinglePlant;\nexport const fetchOnePlant = id => async dispatch => {\n  try {\n    let {\n      data\n    } = await api.fetchOnePlant(id);\n    dispatch(fetchOne({\n      data\n    }));\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const fetchPlant = createAsyncThunk('plant/fetchPlant', async id => {\n  try {\n    let {\n      data\n    } = await api.fetchOnePlant(id);\n    return data;\n  } catch (error) {}\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectSinglePlant\");","map":{"version":3,"sources":["/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/store/plantSlice.js"],"names":["createAsyncThunk","createSlice","api","slice","name","initialState","plant","reducers","fetchOne","state","action","payload","extraReducers","buildrer","reducer","actions","SelectSinglePlant","data","fetchOnePlant","id","dispatch","error","console","log","fetchPlant"],"mappings":"AACA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,OAAO,KAAKC,GAAZ,MAAqB,cAArB;AAEA,MAAMC,KAAK,GAAGF,WAAW,CAAC;AACtBG,EAAAA,IAAI,EAAE,OADgB;AAEtBC,EAAAA,YAAY,EAAE;AACVC,IAAAA,KAAK,EAAE;AADG,GAFQ;AAKtBC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,QAAQ,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACzBD,MAAAA,KAAK,CAACH,KAAN,GAAcI,MAAM,CAACC,OAArB;AACH;AAHK,GALY;;AAUtBC,EAAAA,aAAa,CAACC,QAAD,EAAU,CAEtB;;AAZqB,CAAD,CAAzB;AAcA,eAAeV,KAAK,CAACW,OAArB;AAEA,MAAM;AAAEN,EAAAA;AAAF,IAAeL,KAAK,CAACY,OAA3B;AAEA,OAAO,MAAMC,iBAAiB,GAAIP,KAAD,IAAWA,KAAK,CAACH,KAAN,CAAYA,KAAZ,CAAkBW,IAAvD;KAAMD,iB;AACb,OAAO,MAAME,aAAa,GAAIC,EAAD,IAAQ,MAAOC,QAAP,IAAoB;AACrD,MAAI;AACA,QAAI;AAAEH,MAAAA;AAAF,QAAW,MAAMf,GAAG,CAACgB,aAAJ,CAAkBC,EAAlB,CAArB;AACAC,IAAAA,QAAQ,CAACZ,QAAQ,CAAC;AAAES,MAAAA;AAAF,KAAD,CAAT,CAAR;AACH,GAHD,CAGE,OAAOI,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ,CAPM;AAQP,OAAO,MAAMG,UAAU,GAAGxB,gBAAgB,CAAC,kBAAD,EAAqB,MAAOmB,EAAP,IAAc;AACzE,MAAI;AACA,QAAI;AAAEF,MAAAA;AAAF,QAAW,MAAMf,GAAG,CAACgB,aAAJ,CAAkBC,EAAlB,CAArB;AACA,WAAOF,IAAP;AACH,GAHD,CAGE,OAAOI,KAAP,EAAc,CAEf;AACJ,CAPyC,CAAnC","sourcesContent":["\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport * as api from '../api/index';\n\nconst slice = createSlice({\n    name: 'plant',\n    initialState: {\n        plant: {}\n    },\n    reducers: {\n        fetchOne: (state, action) => {\n            state.plant = action.payload\n        },\n    }, \n    extraReducers(buildrer){\n        \n    }\n})\nexport default slice.reducer; \n\nconst { fetchOne } = slice.actions; \n\nexport const SelectSinglePlant = (state) => state.plant.plant.data; \nexport const fetchOnePlant = (id) => async (dispatch) => {\n    try {\n        let { data } = await api.fetchOnePlant(id);\n        dispatch(fetchOne({ data }));\n    } catch (error) {\n        console.log(error)\n    }\n}\nexport const fetchPlant = createAsyncThunk('plant/fetchPlant', async (id) => {\n    try {\n        let { data } = await api.fetchOnePlant(id);\n        return data\n    } catch (error) {\n\n    }\n})"]},"metadata":{},"sourceType":"module"}