{"ast":null,"code":"var _jsxFileName = \"/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/Plants.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom'; // Import Redux store components\n\nimport { fetchAllPlants, getPlantsError, getPlantsStatus } from '../../store/plantsSlice';\nimport { Button, Box } from '@mui/material';\nimport PlantListItem from './PlantListItem';\nimport LoadingSpinner from '../Common/LoadingSpinner';\nimport { SelectAllPlants } from '../../store/plantsSlice';\nimport ErrorMessage from '../Common/ErrorMessage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Plants = () => {\n  _s();\n\n  const [formConfirmDelete, setFormConfirmDelete] = useState(false);\n  const [loading, setLoading] = useState(tr);\n  const [error, setError] = useState(false);\n  const plantList = useSelector(SelectAllPlants);\n  const plantsStatus = useSelector(getPlantsStatus);\n  const plantsError = useSelector(getPlantsError);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    // switch (plantsStatus) {\n    //     case 'idle':\n    //         dispatch(fetchAllPlants())\n    //         break;\n    //     case 'loading': \n    //         setLoading(true);\n    //     case 'succeeded':\n    //         setLoading(false); \n    //     default:\n    //         break;\n    // }\n    if (plantsStatus == 'idle') {\n      dispatch(fetchAllPlants());\n    } else if (plantsStatus == 'idle') {\n      setLoading(true);\n    }\n  }, [plantsStatus, dispatch]);\n\n  function OpenFormConfirmDelete(id) {}\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: loading ? /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 27\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error ? /*#__PURE__*/_jsxDEV(ErrorMessage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 30\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          children: plantList && !plantsError && plantList.map(plant => /*#__PURE__*/_jsxDEV(PlantListItem, {\n            plant: plant,\n            OpenFormConfirmDelete: OpenFormConfirmDelete\n          }, plant._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 90\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            margin: '1rem 0',\n            backgroundColor: 'whitesmoke'\n          },\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/add-plant\",\n              replace: true,\n              children: \"Add a Plant\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 41\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Plants, \"7ni7Nh6UUfiuqWK/9UJzLfYTceA=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c = Plants;\nexport default Plants;\n\nvar _c;\n\n$RefreshReg$(_c, \"Plants\");","map":{"version":3,"sources":["/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/Plants.js"],"names":["React","useState","useEffect","useSelector","useDispatch","Link","fetchAllPlants","getPlantsError","getPlantsStatus","Button","Box","PlantListItem","LoadingSpinner","SelectAllPlants","ErrorMessage","Plants","formConfirmDelete","setFormConfirmDelete","loading","setLoading","tr","error","setError","plantList","plantsStatus","plantsError","dispatch","OpenFormConfirmDelete","id","map","plant","_id","margin","backgroundColor"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA0C,OAA1C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,IAAT,QAAqB,kBAArB,C,CACA;;AACA,SAASC,cAAT,EAAyBC,cAAzB,EAAyCC,eAAzC,QAAgE,yBAAhE;AACA,SAASC,MAAT,EAAiBC,GAAjB,QAA2B,eAA3B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,cAAP,MAA2B,0BAA3B;AACA,SAAQC,eAAR,QAA8B,yBAA9B;AACA,OAAOC,YAAP,MAAyB,wBAAzB;;;;AAGA,MAAMC,MAAM,GAAG,MAAM;AAAA;;AACjB,QAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4ChB,QAAQ,CAAC,KAAD,CAA1D;AACA,QAAM,CAACiB,OAAD,EAAUC,UAAV,IAAwBlB,QAAQ,CAACmB,EAAD,CAAtC;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBrB,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAMsB,SAAS,GAAGpB,WAAW,CAACU,eAAD,CAA7B;AACA,QAAMW,YAAY,GAAGrB,WAAW,CAACK,eAAD,CAAhC;AACA,QAAMiB,WAAW,GAAGtB,WAAW,CAACI,cAAD,CAA/B;AAEA,QAAMmB,QAAQ,GAAGtB,WAAW,EAA5B;AACAF,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA,QAAGsB,YAAY,IAAI,MAAnB,EAA0B;AACtBE,MAAAA,QAAQ,CAACpB,cAAc,EAAf,CAAR;AACH,KAFD,MAEO,IAAIkB,YAAY,IAAI,MAApB,EAA2B;AAC9BL,MAAAA,UAAU,CAAC,IAAD,CAAV;AACH;AAEJ,GAnBQ,EAmBN,CAACK,YAAD,EAAeE,QAAf,CAnBM,CAAT;;AAqBA,WAASC,qBAAT,CAA+BC,EAA/B,EAAkC,CAEjC;;AAED,sBACI;AAAA,cAEQV,OAAO,gBAAG,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,YAAH,gBACP;AAAA,gBACKG,KAAK,gBAAG,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,cAAH,gBACF;AAAA,gCACI,QAAC,GAAD;AAAA,oBACME,SAAS,IAAI,CAACE,WAAf,IAA+BF,SAAS,CAACM,GAAV,CAAeC,KAAD,iBAAW,QAAC,aAAD;AAA+B,YAAA,KAAK,EAAEA,KAAtC;AAA6C,YAAA,qBAAqB,EAAEH;AAApE,aAAoBG,KAAK,CAACC,GAA1B;AAAA;AAAA;AAAA;AAAA,kBAAzB;AADpC;AAAA;AAAA;AAAA;AAAA,gBADJ,eAII,QAAC,GAAD;AAAK,UAAA,EAAE,EAAE;AAAEC,YAAAA,MAAM,EAAE,QAAV;AAAoBC,YAAAA,eAAe,EAAE;AAArC,WAAT;AAAA,iCACI,QAAC,MAAD;AAAA,mCAAQ,QAAC,IAAD;AAAM,cAAA,EAAE,EAAC,YAAT;AAAsB,cAAA,OAAO,MAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAR;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAFR;AAAA;AAAA;AAAA;AAAA;AAHR;AAAA;AAAA;AAAA;AAAA,UADJ;AAoBH,CAtDD;;GAAMlB,M;UAIgBZ,W,EACGA,W,EACDA,W,EAEHC,W;;;KARfW,M;AAwDN,eAAeA,MAAf","sourcesContent":["import React, { useState, useEffect} from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\n// Import Redux store components\nimport { fetchAllPlants, getPlantsError, getPlantsStatus } from '../../store/plantsSlice'; \nimport { Button, Box} from '@mui/material';\nimport PlantListItem from './PlantListItem';\nimport LoadingSpinner from '../Common/LoadingSpinner'; \nimport {SelectAllPlants} from '../../store/plantsSlice'; \nimport ErrorMessage from '../Common/ErrorMessage';\n\n\nconst Plants = () => {\n    const [formConfirmDelete, setFormConfirmDelete] = useState(false);\n    const [loading, setLoading] = useState(tr);  \n    const [error, setError] = useState(false); \n    const plantList = useSelector(SelectAllPlants); \n    const plantsStatus = useSelector(getPlantsStatus); \n    const plantsError = useSelector(getPlantsError); \n\n    const dispatch = useDispatch(); \n    useEffect(() => {\n        // switch (plantsStatus) {\n        //     case 'idle':\n        //         dispatch(fetchAllPlants())\n        //         break;\n        //     case 'loading': \n        //         setLoading(true);\n        //     case 'succeeded':\n        //         setLoading(false); \n              \n        //     default:\n        //         break;\n        // }\n        if(plantsStatus == 'idle'){\n            dispatch(fetchAllPlants())\n        } else if (plantsStatus == 'idle'){\n            setLoading(true);\n        }\n        \n    }, [plantsStatus, dispatch]); \n\n    function OpenFormConfirmDelete(id){\n\n    }\n    \n    return (\n        <div>\n            {\n                loading ? <LoadingSpinner /> : \n                <div>\n                    {error ? <ErrorMessage /> : \n                        <>\n                            <Box>\n                                {(plantList && !plantsError) && plantList.map((plant) => <PlantListItem key={plant._id} plant={plant} OpenFormConfirmDelete={OpenFormConfirmDelete} />)}\n                            </Box>\n                            <Box sx={{ margin: '1rem 0', backgroundColor: 'whitesmoke' }}>\n                                <Button><Link to=\"/add-plant\" replace>Add a Plant</Link></Button>\n                            </Box>\n                        </>\n                    }\n                    \n                </div>\n            }\n        </div>\n    )\n}\n\nexport default Plants;"]},"metadata":{},"sourceType":"module"}