{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport * as api from '../api/index';\nconst slice = createSlice({\n  name: 'plant',\n  initialState: {\n    plant: {},\n    status: 'idle',\n    //'idel' | 'loading' | 'succeeded' | 'failed'\n    error: null\n  },\n  reducers: {},\n\n  extraReducers(buildrer) {\n    buildrer.addCase(fetchPlant.pending, (state, action) => {\n      state.status = 'loading';\n    }).addCase(fetchPlant.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.plant.data = action.payload;\n      console.log(action.payload, \" payload ---- \");\n    }).addCase(fetchPlant.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n\n});\nexport default slice.reducer;\nconst {\n  fetchOne\n} = slice.actions;\nexport const SelectSinglePlant = state => state.plant.plant.data;\n_c = SelectSinglePlant;\nexport const getPlantStatus = state => state.plant.status;\nexport const getPlantError = state => state.plant.error;\nexport const fetchPlant = createAsyncThunk('plant/fetchPlant', async id => {\n  try {\n    let {\n      data\n    } = await api.fetchOnePlant(id);\n    return data;\n  } catch (error) {}\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectSinglePlant\");","map":{"version":3,"sources":["/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/store/plantSlice.js"],"names":["createAsyncThunk","createSlice","api","slice","name","initialState","plant","status","error","reducers","extraReducers","buildrer","addCase","fetchPlant","pending","state","action","fulfilled","data","payload","console","log","rejected","message","reducer","fetchOne","actions","SelectSinglePlant","getPlantStatus","getPlantError","id","fetchOnePlant"],"mappings":"AACA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,OAAO,KAAKC,GAAZ,MAAqB,cAArB;AAEA,MAAMC,KAAK,GAAGF,WAAW,CAAC;AACtBG,EAAAA,IAAI,EAAE,OADgB;AAEtBC,EAAAA,YAAY,EAAE;AACVC,IAAAA,KAAK,EAAE,EADG;AAEVC,IAAAA,MAAM,EAAE,MAFE;AAEM;AAChBC,IAAAA,KAAK,EAAE;AAHG,GAFQ;AAOtBC,EAAAA,QAAQ,EAAE,EAPY;;AAUtBC,EAAAA,aAAa,CAACC,QAAD,EAAU;AACnBA,IAAAA,QAAQ,CACHC,OADL,CACaC,UAAU,CAACC,OADxB,EACiC,CAACC,KAAD,EAAOC,MAAP,KAAgB;AACzCD,MAAAA,KAAK,CAACR,MAAN,GAAe,SAAf;AACH,KAHL,EAIKK,OAJL,CAIaC,UAAU,CAACI,SAJxB,EAImC,CAACF,KAAD,EAAQC,MAAR,KAAmB;AAC9CD,MAAAA,KAAK,CAACR,MAAN,GAAe,WAAf;AACAQ,MAAAA,KAAK,CAACT,KAAN,CAAYY,IAAZ,GAAmBF,MAAM,CAACG,OAA1B;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYL,MAAM,CAACG,OAAnB,EAA4B,gBAA5B;AACH,KARL,EASKP,OATL,CASaC,UAAU,CAACS,QATxB,EASkC,CAACP,KAAD,EAAQC,MAAR,KAAmB;AAC7CD,MAAAA,KAAK,CAACR,MAAN,GAAe,QAAf;AACAQ,MAAAA,KAAK,CAACP,KAAN,GAAcQ,MAAM,CAACR,KAAP,CAAae,OAA3B;AACH,KAZL;AAaH;;AAxBqB,CAAD,CAAzB;AA0BA,eAAepB,KAAK,CAACqB,OAArB;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAetB,KAAK,CAACuB,OAA3B;AAEA,OAAO,MAAMC,iBAAiB,GAAIZ,KAAD,IAAWA,KAAK,CAACT,KAAN,CAAYA,KAAZ,CAAkBY,IAAvD;KAAMS,iB;AACb,OAAO,MAAMC,cAAc,GAAIb,KAAD,IAAWA,KAAK,CAACT,KAAN,CAAYC,MAA9C;AACP,OAAO,MAAMsB,aAAa,GAAId,KAAD,IAAWA,KAAK,CAACT,KAAN,CAAYE,KAA7C;AAEP,OAAO,MAAMK,UAAU,GAAGb,gBAAgB,CAAC,kBAAD,EAAqB,MAAO8B,EAAP,IAAc;AACzE,MAAI;AACA,QAAI;AAAEZ,MAAAA;AAAF,QAAW,MAAMhB,GAAG,CAAC6B,aAAJ,CAAkBD,EAAlB,CAArB;AACA,WAAOZ,IAAP;AACH,GAHD,CAGE,OAAOV,KAAP,EAAc,CAEf;AACJ,CAPyC,CAAnC","sourcesContent":["\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport * as api from '../api/index';\n\nconst slice = createSlice({\n    name: 'plant',\n    initialState: {\n        plant: {},\n        status: 'idle', //'idel' | 'loading' | 'succeeded' | 'failed'\n        error: null\n    },\n    reducers: {\n\n    }, \n    extraReducers(buildrer){\n        buildrer\n            .addCase(fetchPlant.pending, (state,action)=>{\n                state.status = 'loading';\n            })\n            .addCase(fetchPlant.fulfilled, (state, action) => {\n                state.status = 'succeeded'\n                state.plant.data = action.payload\n                console.log(action.payload, \" payload ---- \")\n            })\n            .addCase(fetchPlant.rejected, (state, action) => {\n                state.status = 'failed'\n                state.error = action.error.message\n            })\n    }\n})\nexport default slice.reducer; \n\nconst { fetchOne } = slice.actions; \n\nexport const SelectSinglePlant = (state) => state.plant.plant.data; \nexport const getPlantStatus = (state) => state.plant.status; \nexport const getPlantError = (state) => state.plant.error; \n\nexport const fetchPlant = createAsyncThunk('plant/fetchPlant', async (id) => {\n    try {\n        let { data } = await api.fetchOnePlant(id);\n        return data\n    } catch (error) {\n\n    }\n})"]},"metadata":{},"sourceType":"module"}