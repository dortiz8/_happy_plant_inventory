{"ast":null,"code":"var _jsxFileName = \"/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/FormAddPlant.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState } from 'react'; // Material UI Section \n\nimport { Button, Typography, Paper, Box, Input, InputLabel, Select, MenuItem } from '@mui/material'; // Other imports \n\nimport plantCategories from '../../lists/plantCategories';\nimport sizes from '../../constants/sizes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet blankState = {\n  name: \"\",\n  category: \"\",\n  quantity: 0,\n  size: \"\",\n  description: \"\"\n};\n\nconst FormAddPlant = e => {\n  _s();\n\n  // Component State section \n  const [plantInfo, setPlantInfo] = useState(blankState);\n  const [formHasAllRequiredFields, setFormHasAllRequiredFields] = useState(true);\n  const [inputOfNumberValid, setInputOfNumberValid] = useState(true);\n  console.log(plantInfo);\n\n  function handleInputChange(event) {\n    let newObj = {};\n\n    if (!isNaN(parseInt(event.target.value))) {\n      newObj[event.target.name] = parseInt(event.target.value);\n    } else {\n      newObj[event.target.name] = event.target.value;\n    }\n\n    setPlantInfo({ ...plantInfo,\n      ...newObj\n    });\n  }\n\n  function handleSubmit(e) {\n    // Prevent postback \n    e.preventDefault();\n\n    if (submitValidation()) {\n      console.log(\"submitted\");\n    } else {\n      console.log(\"not valid\");\n    }\n  }\n\n  function handleClearForm() {\n    setPlantInfo(blankState);\n  }\n\n  function submitValidation() {\n    let result = true;\n\n    if (!(plantInfo.name.trim() !== \"\" && plantInfo.category.trim() !== \"\" && plantInfo.quantity !== 0 && plantInfo.size.trim() !== \"\" && plantInfo.description.trim() !== \"\")) {\n      result = false;\n      setFormHasAllRequiredFields(false);\n    } else if (isNaN(parseInt(plantInfo.quantity))) {\n      result = false;\n      setInputOfNumberValid(false);\n    }\n\n    return result;\n  }\n\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      autoComplete: \"off\",\n      noValidate: true,\n      onSubmit: e => handleSubmit(e),\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          children: \"Describe the new member!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        children: [!formHasAllRequiredFields && /*#__PURE__*/_jsxDEV(Typography, {\n          color: \"error\",\n          children: \"* All fields are required.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 51\n        }, this), \"!inputOfNumberValid && \", /*#__PURE__*/_jsxDEV(Typography, {\n          color: \"error\",\n          children: \"* Quantity is not a valid number.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 48\n        }, this), \"}\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            name: \"name\",\n            type: \"text\",\n            value: plantInfo.name,\n            onChange: handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            children: \"Category\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            label: \"Category\",\n            name: \"category\",\n            value: plantInfo.category,\n            onChange: handleInputChange,\n            children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n              value: \"\",\n              children: \" -- \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 29\n            }, this), plantCategories.map(category => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: category,\n              children: category\n            }, plantCategories.indexOf(category), false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 65\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            children: \"Quantity\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            name: \"quantity\",\n            type: \"number\",\n            value: plantInfo.quantity,\n            onChange: handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            children: \"Size\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            label: \"Size\",\n            name: \"size\",\n            value: plantInfo.size,\n            onChange: handleInputChange,\n            children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n              value: \"\",\n              children: \" -- \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 29\n            }, this), sizes.map(size => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: size,\n              children: size\n            }, sizes.indexOf(size), false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 51\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            children: \"Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            name: \"description\",\n            type: \"text\",\n            value: plantInfo.description,\n            onChange: handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          size: \"large\",\n          type: \"submit\",\n          children: \"Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"error\",\n          size: \"large\",\n          onClick: handleClearForm,\n          children: \"Clear\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n};\n\n_s(FormAddPlant, \"vxcGx2V/v13EIuApMvPCEnC3wY8=\");\n\n_c = FormAddPlant;\nexport default FormAddPlant;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormAddPlant\");","map":{"version":3,"sources":["/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/FormAddPlant.js"],"names":["React","useState","Button","Typography","Paper","Box","Input","InputLabel","Select","MenuItem","plantCategories","sizes","blankState","name","category","quantity","size","description","FormAddPlant","e","plantInfo","setPlantInfo","formHasAllRequiredFields","setFormHasAllRequiredFields","inputOfNumberValid","setInputOfNumberValid","console","log","handleInputChange","event","newObj","isNaN","parseInt","target","value","handleSubmit","preventDefault","submitValidation","handleClearForm","result","trim","map","indexOf"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {useState} from 'react'; \n// Material UI Section \nimport { Button, Typography, Paper, Box, Input, InputLabel, Select, MenuItem} from '@mui/material';\n// Other imports \nimport plantCategories from '../../lists/plantCategories';\nimport sizes from '../../constants/sizes'; \nlet blankState = {name: \"\", category: \"\", quantity: 0, size: \"\", description: \"\"}\nconst FormAddPlant = (e) => {\n    // Component State section \n    const [plantInfo, setPlantInfo] = useState(blankState); \n    const [formHasAllRequiredFields, setFormHasAllRequiredFields] = useState(true); \n    const [inputOfNumberValid, setInputOfNumberValid] = useState(true); \n    console.log(plantInfo)\n    function handleInputChange(event){\n        let newObj = {}; \n        if(!isNaN(parseInt(event.target.value))){\n            newObj[event.target.name] = parseInt(event.target.value);\n        }else{\n            newObj[event.target.name] = event.target.value;\n        }\n        \n        setPlantInfo({\n            ...plantInfo, \n            ...newObj\n        })\n    }\n\n    function handleSubmit(e){\n        // Prevent postback \n        e.preventDefault(); \n        if(submitValidation()){\n      \n            console.log(\"submitted\")\n        }else{\n           \n            console.log(\"not valid\")\n        }\n        \n    }\n\n    function handleClearForm(){\n        setPlantInfo(blankState)\n    }\n\n    function submitValidation(){\n        let result = true; \n        if(!(plantInfo.name.trim() !== \"\" && plantInfo.category.trim() !== \"\" && plantInfo.quantity !== 0 && plantInfo.size.trim() !== \"\" && plantInfo.description.trim()  !== \"\")){\n            result = false; \n            setFormHasAllRequiredFields(false);\n        } else if (isNaN(parseInt(plantInfo.quantity))){\n            result = false; \n            setInputOfNumberValid(false); \n        }\n        return result; \n    }\n    return (\n        <Paper>\n            <form autoComplete=\"off\" noValidate onSubmit={(e) => handleSubmit(e)}>\n                <Box>\n                    <Typography>Describe the new member!</Typography>\n                </Box>\n                <Box>\n                    {!formHasAllRequiredFields && <Typography color=\"error\">* All fields are required.</Typography>}\n                        !inputOfNumberValid && <Typography color=\"error\">* Quantity is not a valid number.</Typography>\n                    }\n                </Box>\n                <Box>\n                    <Box>\n                        <InputLabel>Name</InputLabel>\n                        <Input name=\"name\" type=\"text\" value={plantInfo.name} onChange={handleInputChange}></Input>\n                    </Box>\n                    <Box>\n                        <InputLabel>Category</InputLabel>\n                        <Select label=\"Category\" name=\"category\" value={plantInfo.category} onChange={handleInputChange}>\n                            <MenuItem value=\"\"> -- </MenuItem>\n                            {\n                                plantCategories.map(category => <MenuItem key={plantCategories.indexOf(category)} value={category}>{category}</MenuItem>)\n                            }\n                        </Select>\n                    </Box>\n                    <Box>\n                        <InputLabel>Quantity</InputLabel>\n                        <Input name=\"quantity\" type=\"number\" value={plantInfo.quantity} onChange={handleInputChange}></Input>\n                    </Box>\n                    <Box>\n                        <InputLabel>Size</InputLabel>\n                        <Select label=\"Size\" name=\"size\" value={plantInfo.size} onChange={handleInputChange}>\n                            <MenuItem value=\"\"> -- </MenuItem>\n                            {\n                                sizes.map(size => <MenuItem key={sizes.indexOf(size)} value={size}>{size}</MenuItem>)\n                            }\n                        </Select>\n                    </Box>\n                    <Box>\n                        <InputLabel>Description</InputLabel>\n                        <Input name=\"description\" type=\"text\" value={plantInfo.description} onChange={handleInputChange}></Input>\n                    </Box>\n                </Box>\n                <Box>\n                    <Button variant=\"contained\" size=\"large\" type=\"submit\">Add</Button>\n                    <Button variant=\"contained\" color=\"error\" size=\"large\" onClick={handleClearForm}>Clear</Button>\n                </Box>\n            </form>\n        </Paper>\n    )\n}\n\nexport default FormAddPlant;"]},"metadata":{},"sourceType":"module"}