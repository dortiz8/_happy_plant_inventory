{"ast":null,"code":"var _jsxFileName = \"/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/Plants.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom'; // Import Redux store components\n\nimport { fetchAllPlants, getPlantsStatus } from '../../store/plantsSlice';\nimport { Button, Box, Input, Typography } from '@mui/material';\nimport SearchIcon from '@mui/icons-material/Search';\nimport AddIcon from '@mui/icons-material/Add';\nimport { SelectAllPlants } from '../../store/plantsSlice';\nimport Content from '../Common/Content';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Plants = () => {\n  _s();\n\n  const plantsStatus = useSelector(getPlantsStatus);\n  const plantList = useSelector(SelectAllPlants);\n  const [searchedString, setSearchedString] = useState(\"\");\n  const [filteredList, setFilteredList] = useState([]);\n  const searchBarRef = useRef();\n  const currentRef = useRef(1);\n  const dispatch = useDispatch(); // UseEffects only\n\n  useEffect(() => {\n    // used to count current renders\n    currentRef.current = currentRef.current + 1;\n  });\n  useEffect(() => {\n    if (plantsStatus == 'idle') {\n      dispatch(fetchAllPlants());\n    }\n  }, [plantsStatus, dispatch]);\n  useEffect(() => {\n    let list = plantList.filter(item => item.name.toUpperCase().includes(searchedString.toUpperCase()));\n    setFilteredList(list);\n  }, [searchedString]); // Work functions \n\n  function handleSearchedStringChange(e) {\n    setSearchedString(e.target.value);\n  }\n\n  function focus() {\n    searchBarRef.current.firstChild.focus();\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      children: currentRef.current\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        margin: '1rem 0',\n        backgroundColor: 'whitesmoke'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          onChange: handleSearchedStringChange,\n          sx: {\n            width: '60%'\n          },\n          ref: searchBarRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: focus,\n          children: /*#__PURE__*/_jsxDEV(SearchIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          children: searchedString\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/add-plant\",\n            replace: true,\n            children: [/*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 59\n            }, this), \"Plant\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Content, {\n      status: plantsStatus,\n      plantList: plantList,\n      filteredList: filteredList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 12\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Plants, \"6amEFBJ24SrzYDA5PP+8jMR9Vdw=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = Plants;\nexport default Plants;\n\nvar _c;\n\n$RefreshReg$(_c, \"Plants\");","map":{"version":3,"sources":["/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/Plants.js"],"names":["React","useState","useEffect","useRef","useSelector","useDispatch","Link","fetchAllPlants","getPlantsStatus","Button","Box","Input","Typography","SearchIcon","AddIcon","SelectAllPlants","Content","Plants","plantsStatus","plantList","searchedString","setSearchedString","filteredList","setFilteredList","searchBarRef","currentRef","dispatch","current","list","filter","item","name","toUpperCase","includes","handleSearchedStringChange","e","target","value","focus","firstChild","margin","backgroundColor","width"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef} from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\n// Import Redux store components\nimport { fetchAllPlants, getPlantsStatus } from '../../store/plantsSlice'; \nimport { Button, Box, Input, Typography} from '@mui/material';\nimport SearchIcon from '@mui/icons-material/Search'; \nimport AddIcon from '@mui/icons-material/Add';\nimport {SelectAllPlants} from '../../store/plantsSlice'; \nimport Content from '../Common/Content'; \n\nconst Plants = () => {\n    const plantsStatus = useSelector(getPlantsStatus); \n    const plantList = useSelector(SelectAllPlants); \n    const [searchedString, setSearchedString] = useState(\"\");\n    const [filteredList, setFilteredList] = useState([])\n    const searchBarRef = useRef();  \n    const currentRef = useRef(1);\n    \n    const dispatch = useDispatch(); \n    // UseEffects only\n    useEffect(()=>{\n        // used to count current renders\n        currentRef.current = currentRef.current + 1; \n    })\n    useEffect(() => {\n        if(plantsStatus == 'idle'){\n            dispatch(fetchAllPlants())\n        }   \n    }, [plantsStatus,dispatch]); \n\n    useEffect(()=>{\n        let list = plantList.filter(item => item.name.toUpperCase().includes(searchedString.toUpperCase()))\n        setFilteredList(list)\n    }, [searchedString])\n \n    // Work functions \n\n    function handleSearchedStringChange(e){\n        setSearchedString(e.target.value)\n    }\n    function focus(){\n        searchBarRef.current.firstChild.focus()\n    }\n    \n    return (\n        <div>\n            <Typography>{currentRef.current}</Typography>\n            <Box sx={{ margin: '1rem 0', backgroundColor: 'whitesmoke'}}>\n                <Box>\n                        <Input \n                            onChange={handleSearchedStringChange}\n                            sx={{ width: '60%'}}\n                            ref={searchBarRef}></Input>\n                        <Button onClick={focus}>\n                            <SearchIcon />\n                        </Button>\n                        <Typography>{searchedString}</Typography>\n                </Box>\n                <Box>\n                    <Button><Link to=\"/add-plant\" replace><AddIcon />Plant</Link></Button>\n                </Box>\n               \n            </Box>\n            {}\n           <Content status={plantsStatus} plantList={plantList} filteredList={filteredList}/>\n        </div>\n    )\n}\n\nexport default Plants;"]},"metadata":{},"sourceType":"module"}