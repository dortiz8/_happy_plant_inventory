{"ast":null,"code":"var _jsxFileName = \"/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/PlantSpecifics/PlantDetails.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Button, Typography, Box, List, ListItem, TextField, IconButton, Card, CardHeader, CardContent, CardActions, Select, MenuItem } from '@mui/material';\nimport CloseRounded from '@mui/icons-material/CloseRounded';\nimport { CHARACTER_LIMIT } from '../../../constants/limits';\nimport selectedFile from '../../../models/fileClass';\nimport PlantSpecifics from '../../../models/plantSpecifics';\nimport { plantType } from '../../../constants/plantType';\nimport { nanoid } from 'nanoid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst PlantDetails = _ref => {\n  _s();\n\n  let {\n    plantInfo,\n    listIndex,\n    handleSavePlant,\n    handleDeletePlantFromList\n  } = _ref;\n  let plantSpecificsObject = new PlantSpecifics(\"\", 0, \"\", []); // let localStoragePlantDetails = JSON.parse(localStorage.getItem(`plantDetails${plantInfo.idx}`)) || plantInfo\n\n  let obj = plantInfo || plantSpecificsObject;\n  const [plantDetails, setPlantDetails] = useState(obj);\n  const [uniqueID, setUniqueID] = useState(nanoid());\n  const [formCompleted, setFormCompleted] = useState(true);\n  const [isNumericOrPositive, setIsNumericOrPositive] = useState(true);\n  console.log(plantDetails); // useEffect(()=>{\n  //     localStorage.setItem(`plantDetails:${plantInfo.idx}`, JSON.stringify(plantDetails))\n  // });\n\n  function handleInputChange(event) {\n    let newObj = {};\n\n    if (!isNaN(parseInt(event.target.value))) {\n      newObj[event.target.name] = parseInt(event.target.value);\n    } else {\n      newObj[event.target.name] = event.target.value;\n    }\n\n    setPlantDetails({ ...plantDetails,\n      ...newObj\n    });\n  }\n\n  ;\n\n  const toBase64 = file => new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n\n    reader.onload = () => resolve(reader.result);\n\n    reader.onerror = error => reject(error);\n  });\n\n  async function handleFileSelection(event) {\n    let files = event.target.files;\n    let tempArray = [];\n\n    if (files) {\n      for (let i = 0; i < files.length; i++) {\n        let selectedFileObj = new selectedFile(files[i].name, files[i].type, files[i].size, await toBase64(files[i]));\n        tempArray.push(selectedFileObj);\n      }\n\n      ;\n    }\n\n    setPlantDetails({ ...plantDetails,\n      selectedFiles: tempArray\n    });\n  }\n\n  function DeleteFileFromList(event) {\n    let filteredList = plantDetails.selectedFiles.filter(file => file.name !== event.currentTarget.value);\n    setPlantDetails({ ...plantDetails,\n      selectedFiles: [...filteredList]\n    });\n  }\n\n  function DeletePlantCard() {\n    handleDeletePlantFromList(plantDetails.idx);\n  }\n\n  function handleClearForm() {\n    let clearedDetails = new PlantSpecifics(\"\", 0, \"\", [], plantDetails.idx);\n    setPlantDetails(clearedDetails);\n  }\n\n  function handleSave() {\n    // validation here\n    if (validatePlantDetailsObject()) {\n      handleSavePlant(plantDetails);\n    } else {}\n  }\n\n  function handleEditMode() {\n    let newobj = { ...plantDetails,\n      saved: false\n    };\n    setPlantDetails(newobj);\n  }\n\n  function validatePlantDetailsObject() {\n    let result = true;\n\n    if (plantDetails.description == \"\" || plantDetails.price == 0 || plantDetails.type == \"\" || plantDetails.selectedFiles.length == 0) {\n      // Fill out entire form\n      setFormCompleted(false);\n      result = false;\n    } else if (isNaN(plantDetails.price) || parseInt(plantDetails.price) < 0) {\n      // price cannot be non-numeric or negative\n      set;\n      result = false;\n    }\n\n    return result;\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      children: [!formCompleted && /*#__PURE__*/_jsxDEV(Typography, {\n        children: \"Please fill out entire form\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 36\n      }, this), !isNumericOrPositive && /*#__PURE__*/_jsxDEV(Typography, {\n        children: \"Price must be numeric and over 0.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 42\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        maxWidth: 345,\n        backgroundColor: '#cfd1d0',\n        margin: '1rem .5rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(CardActions, {\n        disableSpacing: true,\n        children: /*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: DeletePlantCard,\n          children: /*#__PURE__*/_jsxDEV(CloseRounded, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CardHeader, {\n        title: `Plant #${listIndex + 1}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            value: plantDetails.type,\n            label: \"Type\",\n            name: \"type\",\n            disabled: plantDetails.saved,\n            onChange: handleInputChange,\n            children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n              value: \"\",\n              children: \"--\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 29\n            }, this), plantType.map(type => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: type,\n              children: type\n            }, plantType.indexOf(type), false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 52\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            label: \"Price\",\n            name: \"price\",\n            disabled: plantDetails.saved,\n            fullWidth: true,\n            inputProps: {\n              inputMode: 'numeric',\n              pattern: '[0-9]*'\n            },\n            value: plantDetails.price,\n            variant: \"outlined\",\n            onChange: handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            label: \"Description\",\n            name: \"description\",\n            disabled: plantDetails.saved,\n            id: plantDetails.idx.toString(),\n            fullWidth: true,\n            multiline: true,\n            maxRows: 4,\n            inputProps: {\n              maxLength: CHARACTER_LIMIT\n            },\n            value: plantDetails.description,\n            variant: \"outlined\",\n            onChange: handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            style: {\n              display: \"none\"\n            },\n            name: \"selectedFiles\",\n            id: uniqueID,\n            type: \"file\",\n            multiple: true,\n            onChange: handleFileSelection\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: uniqueID,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              component: \"span\",\n              disabled: plantDetails.saved,\n              children: \"Upload Image(s)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            children: /*#__PURE__*/_jsxDEV(List, {\n              children: plantDetails.selectedFiles.map(file => /*#__PURE__*/_jsxDEV(ListItem, {\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"subtitle2\",\n                  children: `${file.name.slice(0, 10)}...${file.name.slice(file.name.length - 4, file.name.length)}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 168,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  disabled: plantDetails.saved,\n                  value: file.name,\n                  onClick: DeleteFileFromList,\n                  children: /*#__PURE__*/_jsxDEV(CloseRounded, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 174,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 169,\n                  columnNumber: 37\n                }, this)]\n              }, plantDetails.selectedFiles.indexOf(file), true, {\n                fileName: _jsxFileName,\n                lineNumber: 167,\n                columnNumber: 73\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n        children: plantDetails.saved ? /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleEditMode,\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 45\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: handleSave,\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: handleClearForm,\n            children: \"Clear\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(PlantDetails, \"h7WTWoyz3TRiRg1Dlbs/B+ETINw=\");\n\n_c = PlantDetails;\nexport default PlantDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlantDetails\");","map":{"version":3,"sources":["/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/PlantSpecifics/PlantDetails.js"],"names":["React","useEffect","useState","Button","Typography","Box","List","ListItem","TextField","IconButton","Card","CardHeader","CardContent","CardActions","Select","MenuItem","CloseRounded","CHARACTER_LIMIT","selectedFile","PlantSpecifics","plantType","nanoid","PlantDetails","plantInfo","listIndex","handleSavePlant","handleDeletePlantFromList","plantSpecificsObject","obj","plantDetails","setPlantDetails","uniqueID","setUniqueID","formCompleted","setFormCompleted","isNumericOrPositive","setIsNumericOrPositive","console","log","handleInputChange","event","newObj","isNaN","parseInt","target","value","name","toBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","handleFileSelection","files","tempArray","i","length","selectedFileObj","type","size","push","selectedFiles","DeleteFileFromList","filteredList","filter","currentTarget","DeletePlantCard","idx","handleClearForm","clearedDetails","handleSave","validatePlantDetailsObject","handleEditMode","newobj","saved","description","price","set","maxWidth","backgroundColor","margin","map","indexOf","inputMode","pattern","toString","maxLength","display","slice"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Button, Typography, Box, List, ListItem, TextField, IconButton, Card, CardHeader, CardContent, CardActions, Select, MenuItem} from '@mui/material';\nimport CloseRounded from '@mui/icons-material/CloseRounded';\nimport {CHARACTER_LIMIT} from '../../../constants/limits'; \n\nimport selectedFile from '../../../models/fileClass';\nimport PlantSpecifics from '../../../models/plantSpecifics';\nimport {plantType} from '../../../constants/plantType'; \nimport { nanoid } from 'nanoid';\n\nconst PlantDetails = ({ plantInfo, listIndex, handleSavePlant, handleDeletePlantFromList}) => {\n    let plantSpecificsObject = new PlantSpecifics(\"\", 0, \"\", []);\n    // let localStoragePlantDetails = JSON.parse(localStorage.getItem(`plantDetails${plantInfo.idx}`)) || plantInfo\n    let obj = plantInfo || plantSpecificsObject; \n    const [plantDetails, setPlantDetails] = useState(obj);\n    const [uniqueID, setUniqueID] = useState(nanoid()); \n    const [formCompleted, setFormCompleted] = useState(true); \n    const [isNumericOrPositive, setIsNumericOrPositive] = useState(true); \n   console.log(plantDetails)\n    // useEffect(()=>{\n    //     localStorage.setItem(`plantDetails:${plantInfo.idx}`, JSON.stringify(plantDetails))\n    // });\n\n    function handleInputChange(event) {\n        let newObj = {};\n        if (!isNaN(parseInt(event.target.value))) {\n            newObj[event.target.name] = parseInt(event.target.value);\n        } else {\n            newObj[event.target.name] = event.target.value;\n        }\n        \n        setPlantDetails({\n            ...plantDetails,\n            ...newObj\n        })\n    };\n\n    const toBase64 = file => new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = error => reject(error);\n    });\n\n    async function handleFileSelection(event) {\n        let files = event.target.files;\n        let tempArray = [];\n\n        if (files) {\n            for (let i = 0; i < files.length; i++) {\n                let selectedFileObj = new selectedFile(files[i].name, files[i].type, files[i].size, await toBase64(files[i]));\n                tempArray.push(selectedFileObj);\n            };\n        }\n        setPlantDetails({ ...plantDetails, selectedFiles: tempArray })\n    }\n\n    function DeleteFileFromList(event) {\n        let filteredList = plantDetails.selectedFiles.filter(file => file.name !== event.currentTarget.value);\n        setPlantDetails({ ...plantDetails, selectedFiles: [...filteredList] });\n    }\n    function DeletePlantCard(){\n        handleDeletePlantFromList(plantDetails.idx)\n    }\n\n    function handleClearForm() {\n        let clearedDetails = new PlantSpecifics(\"\", 0, \"\", [], plantDetails.idx)\n        setPlantDetails(clearedDetails)\n    }\n    function handleSave(){\n        // validation here\n        if(validatePlantDetailsObject()){\n            handleSavePlant(plantDetails); \n        }else{\n            \n        }\n    }\n    function handleEditMode(){\n        let newobj = {...plantDetails, saved: false}\n        setPlantDetails(newobj); \n    }\n\n    function validatePlantDetailsObject(){\n        let result = true; \n        if (plantDetails.description == \"\" || plantDetails.price == 0 || plantDetails.type == \"\" || plantDetails.selectedFiles.length == 0){\n            // Fill out entire form\n            setFormCompleted(false); \n            result = false\n        } else if (isNaN(plantDetails.price) || parseInt(plantDetails.price) < 0){\n            // price cannot be non-numeric or negative\n            set\n            result = false\n        }\n        return result; \n    }\n\n    return(\n        <>\n            <Box>\n                {!formCompleted && <Typography>Please fill out entire form</Typography>}\n                {!isNumericOrPositive && <Typography>Price must be numeric and over 0.</Typography>}\n            </Box>\n            <Card sx={{ maxWidth: 345, backgroundColor: '#cfd1d0', margin: '1rem .5rem'}}>\n                <CardActions disableSpacing>\n                    <IconButton onClick={DeletePlantCard}>\n                        <CloseRounded />\n                    </IconButton>\n                </CardActions>\n                <CardHeader \n                    title={`Plant #${listIndex + 1}`}\n                />\n                <CardContent>\n                    <Box>\n                        <Select \n                            value={plantDetails.type}\n                            label=\"Type\"\n                            name=\"type\"\n                            disabled={plantDetails.saved}\n                            onChange={handleInputChange}>\n                            <MenuItem value=\"\">--</MenuItem>\n                            {plantType.map(type => <MenuItem value={type} key={plantType.indexOf(type)}>{type}</MenuItem>)}\n                        </Select>\n                    </Box>\n                    <Box>\n                        <TextField\n                            label=\"Price\"\n                            name=\"price\"\n                            disabled={plantDetails.saved}\n                            fullWidth\n                            inputProps={{ inputMode: 'numeric', pattern: '[0-9]*'}}\n                            value={plantDetails.price}\n                            variant=\"outlined\"\n                            onChange={handleInputChange}\n                        />\n                    </Box>\n                    <Box>\n                        <TextField\n                            label=\"Description\"\n                            name=\"description\"\n                            disabled={plantDetails.saved}\n                            id={plantDetails.idx.toString()}\n                            fullWidth\n                            multiline\n                            maxRows={4}\n                            inputProps={{ maxLength: CHARACTER_LIMIT }}\n                            value={plantDetails.description}\n                            variant=\"outlined\"\n                            onChange={handleInputChange}\n                        />\n                    </Box>\n                    <Box>\n                        <input\n                            style={{ display: \"none\" }}\n                            name=\"selectedFiles\"\n                            id={uniqueID}\n                            type=\"file\"\n                            multiple\n                            onChange={handleFileSelection}\n                        />\n                        <label htmlFor={uniqueID}>\n                            <Button variant=\"contained\" component=\"span\" disabled={plantDetails.saved}>\n                                Upload Image(s)\n                                </Button>\n                        </label>\n                        <Box>\n                            <List >\n                                {plantDetails.selectedFiles.map(file => <ListItem key={plantDetails.selectedFiles.indexOf(file)}>\n                                    <Typography variant=\"subtitle2\">{`${file.name.slice(0, 10)}...${file.name.slice(file.name.length - 4, file.name.length)}`}</Typography>\n                                    <Button\n                                        disabled={plantDetails.saved}\n                                        value={file.name}\n                                        onClick={DeleteFileFromList}\n                                    >\n                                        <CloseRounded />\n                                    </Button>\n                                </ListItem>)}\n                            </List>\n                        </Box>\n                    </Box>\n                </CardContent>\n                <CardActions>\n                    { plantDetails.saved ? (<Button onClick={handleEditMode}>Edit</Button>) : (\n                        <>\n                            <Button onClick={handleSave}>Save</Button>\n                            <Button onClick={handleClearForm}>Clear</Button>\n                        </>\n                    )\n                        \n                    }\n                </CardActions>\n            </Card>                       \n                        </>\n    )\n}\n\nexport default PlantDetails;"]},"metadata":{},"sourceType":"module"}