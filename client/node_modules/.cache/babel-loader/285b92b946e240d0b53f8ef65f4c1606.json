{"ast":null,"code":"var _jsxFileName = \"/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/PlantsContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Typography, ListItem, Badge, Box } from '@mui/material';\nimport PreviewIcon from '@mui/icons-material/Preview';\nimport PlantListItem from '../Plants/PlantListItem';\nimport { SelectAllPlants } from '../../store/plantsSlice';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getPlantsStatus } from '../../store/plantsSlice';\nimport LoadingSpinner from '../Common/LoadingSpinner';\nimport ErrorMessage from '../Common/ErrorMessage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PlantsContainer = _ref => {\n  _s();\n\n  let {\n    searchedString\n  } = _ref;\n  const plantsStatus = useSelector(getPlantsStatus);\n  const plantList = useSelector(SelectAllPlants);\n  const [filteredList, setFilteredList] = useState([]);\n  console.log(filte);\n  useEffect(() => {\n    let list = plantList.filter(item => item.name.toUpperCase().includes(searchedString.toUpperCase()));\n    setFilteredList(list);\n  }, [searchedString]);\n\n  if (plantsStatus == 'loading') {\n    return /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 16\n    }, this);\n  }\n\n  if (plantsStatus == 'failed') {\n    return /*#__PURE__*/_jsxDEV(ErrorMessage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 16\n    }, this);\n  }\n\n  if (searchedString.length == 0) {\n    return plantList.map(plant => /*#__PURE__*/_jsxDEV(PlantListItem, {\n      plant: plant\n    }, plant._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 36\n    }, this));\n  } else {\n    filteredList.map(plant => /*#__PURE__*/_jsxDEV(PlantListItem, {\n      plant: plant\n    }, plant._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 35\n    }, this));\n  }\n};\n\n_s(PlantsContainer, \"ZOc2uHnQhlxSZJrQsnWgp9SqnkM=\", false, function () {\n  return [useSelector, useSelector];\n});\n\n_c = PlantsContainer;\nexport default PlantsContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlantsContainer\");","map":{"version":3,"sources":["/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/PlantsContainer.js"],"names":["React","useEffect","useState","Link","Button","Typography","ListItem","Badge","Box","PreviewIcon","PlantListItem","SelectAllPlants","useSelector","useDispatch","getPlantsStatus","LoadingSpinner","ErrorMessage","PlantsContainer","searchedString","plantsStatus","plantList","filteredList","setFilteredList","console","log","filte","list","filter","item","name","toUpperCase","includes","length","map","plant","_id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,MAAT,EAAiBC,UAAjB,EAA6BC,QAA7B,EAAuCC,KAAvC,EAA8CC,GAA9C,QAAyD,eAAzD;AACA,OAAOC,WAAP,MAAwB,6BAAxB;AACA,OAAOC,aAAP,MAA0B,yBAA1B;AACA,SAASC,eAAT,QAAgC,yBAAhC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAAQC,eAAR,QAA+B,yBAA/B;AACA,OAAOC,cAAP,MAA2B,0BAA3B;AACA,OAAOC,YAAP,MAAyB,wBAAzB;;;AAEA,MAAMC,eAAe,GAAG,QAAsB;AAAA;;AAAA,MAArB;AAACC,IAAAA;AAAD,GAAqB;AAC1C,QAAMC,YAAY,GAAGP,WAAW,CAACE,eAAD,CAAhC;AACA,QAAMM,SAAS,GAAGR,WAAW,CAACD,eAAD,CAA7B;AACA,QAAM,CAACU,YAAD,EAAeC,eAAf,IAAkCpB,QAAQ,CAAC,EAAD,CAAhD;AACAqB,EAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACAxB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIyB,IAAI,GAAGN,SAAS,CAACO,MAAV,CAAiBC,IAAI,IAAIA,IAAI,CAACC,IAAL,CAAUC,WAAV,GAAwBC,QAAxB,CAAiCb,cAAc,CAACY,WAAf,EAAjC,CAAzB,CAAX;AACAR,IAAAA,eAAe,CAACI,IAAD,CAAf;AACH,GAHQ,EAGN,CAACR,cAAD,CAHM,CAAT;;AAIA,MAAGC,YAAY,IAAI,SAAnB,EAA6B;AACzB,wBAAO,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AACD,MAAGA,YAAY,IAAI,QAAnB,EAA4B;AACxB,wBAAO,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AACD,MAAID,cAAc,CAACc,MAAf,IAAyB,CAA7B,EAAgC;AAC5B,WACIZ,SAAS,CAACa,GAAV,CAAcC,KAAK,iBAAI,QAAC,aAAD;AAA+B,MAAA,KAAK,EAAEA;AAAtC,OAAoBA,KAAK,CAACC,GAA1B;AAAA;AAAA;AAAA;AAAA,YAAvB,CADJ;AAGH,GAJD,MAIK;AACDd,IAAAA,YAAY,CAACY,GAAb,CAAiBC,KAAK,iBAAI,QAAC,aAAD;AAA+B,MAAA,KAAK,EAAEA;AAAtC,OAAoBA,KAAK,CAACC,GAA1B;AAAA;AAAA;AAAA;AAAA,YAA1B;AACH;AAEJ,CAvBD;;GAAMlB,e;UACmBL,W,EACHA,W;;;KAFhBK,e;AAyBN,eAAeA,eAAf","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Typography, ListItem, Badge, Box } from '@mui/material';\nimport PreviewIcon from '@mui/icons-material/Preview';\nimport PlantListItem from '../Plants/PlantListItem';\nimport { SelectAllPlants } from '../../store/plantsSlice';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {getPlantsStatus } from '../../store/plantsSlice';\nimport LoadingSpinner from '../Common/LoadingSpinner';\nimport ErrorMessage from '../Common/ErrorMessage';\n\nconst PlantsContainer = ({searchedString}) => {\n    const plantsStatus = useSelector(getPlantsStatus);\n    const plantList = useSelector(SelectAllPlants);\n    const [filteredList, setFilteredList] = useState([])\n    console.log(filte)\n    useEffect(() => {\n        let list = plantList.filter(item => item.name.toUpperCase().includes(searchedString.toUpperCase()))\n        setFilteredList(list)\n    }, [searchedString])\n    if(plantsStatus == 'loading'){\n        return(<LoadingSpinner/>)\n    }\n    if(plantsStatus == 'failed'){\n        return(<ErrorMessage />)\n    }\n    if (searchedString.length == 0) {\n        return (\n            plantList.map(plant => <PlantListItem key={plant._id} plant={plant} />)\n        )\n    }else{\n        filteredList.map(plant => <PlantListItem key={plant._id} plant={plant} />)\n    }\n   \n}\n\nexport default PlantsContainer;"]},"metadata":{},"sourceType":"module"}