{"ast":null,"code":"var _jsxFileName = \"/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/PlantCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { useParams, useNavigate } from 'react-router-dom'; // Redux store functions\n\nimport { deletePlant, editPlant } from '../../store/plantsSlice';\nimport { fetchPlant, SelectSinglePlant, getPlantStatus, getPlantError } from '../../store/plantSlice'; // Meterial UI Section\n\nimport { FormControl, Button, Typography, Card, CardMedia, CardContent, CardActions, Box, Input, InputLabel, MenuItem, Select } from '@mui/material';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteForeverIcon from '@mui/icons-material/DeleteForever';\nimport ArrowLeftIcon from '@mui/icons-material/ArrowLeft'; // Other Imports \n\nimport plantCategories from '../../lists/plantCategories';\nimport sizes from '../../constants/sizes';\nimport statuses from '../../constants/status';\nimport FormConfirmDelete from './FormConfirmDelete';\nimport { PlantObjectValidator } from '../../services/validation';\nimport LoadingSpinner from '../Common/LoadingSpinner';\nimport ErrorMessage from '../Common/ErrorMessage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst PlantCard = () => {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const plant = useSelector(SelectSinglePlant);\n  const plantStatus = useSelector(getPlantStatus);\n  const plantError = useSelector(getPlantError);\n  const [plantInfo, setPlantInfo] = useState({});\n  const [editMode, setEditMode] = useState(false);\n  const [formConfirmDeleteVisible, setFormConfirmDeleteVisible] = useState(false);\n  const [formHasAllRequiredFields, setFormHasAllRequiredFields] = useState(true);\n  const [inputOfNumberValid, setInputOfNumberValid] = useState(true);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (plantStatus == 'idle') {\n      dispatch(fetchPlant(id));\n    }\n  }, [plantStatus, id, dispatch]);\n  useEffect(() => {\n    setPlantInfo(plant);\n  }, [plant]);\n  let content;\n\n  if (plantStatus == 'loading') {\n    content = /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 19\n    }, this);\n  } else if (plantStatus == 'succeeded') {\n    content = /*#__PURE__*/_jsxDEV(CardContent, {\n      children: [/*#__PURE__*/_jsxDEV(CardMedia, {\n        component: \"img\",\n        height: \"200\",\n        image: `${plant === null || plant === void 0 ? void 0 : plant.selectedFiles[0].base64}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        children: plant === null || plant === void 0 ? void 0 : plant.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Category: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 25\n        }, this), plant === null || plant === void 0 ? void 0 : plant.category]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Size: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 25\n        }, this), plant === null || plant === void 0 ? void 0 : plant.size]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Status: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 25\n        }, this), plant === null || plant === void 0 ? void 0 : plant.status]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Price: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 25\n        }, this), \"$\", plant === null || plant === void 0 ? void 0 : plant.price]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 19\n    }, this);\n  } else if (plantStatus == 'failed') {\n    content = /*#__PURE__*/_jsxDEV(ErrorMessage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 19\n    }, this);\n  }\n\n  function handleInputChange(event) {\n    let newObj = {};\n\n    if (!isNaN(parseInt(event.target.value))) {\n      newObj[event.target.name] = parseInt(event.target.value);\n    } else {\n      newObj[event.target.name] = event.target.value;\n    }\n\n    setPlantInfo({ ...plantInfo,\n      ...newObj\n    });\n  }\n\n  function handleEditMode() {\n    setEditMode(!editMode);\n  }\n\n  ;\n\n  function handleSaveEdit() {\n    let PlantValidator = new PlantObjectValidator(plantInfo);\n    let result = PlantValidator.validate();\n    setFormHasAllRequiredFields(PlantValidator.hasAllRequiredFields);\n    setInputOfNumberValid(PlantValidator.inputNumberIsValid);\n\n    if (result) {\n      dispatch(editPlant(plantInfo));\n      navigate('/plants');\n    }\n  }\n\n  ;\n\n  function handleDeleteItem() {\n    dispatch(deletePlant(id));\n    navigate('/plants');\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [formConfirmDeleteVisible && /*#__PURE__*/_jsxDEV(FormConfirmDelete, {\n      handleDeleteItem: handleDeleteItem,\n      setFormConfirmDeleteVisible: setFormConfirmDeleteVisible\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 42\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        margin: \"10px\"\n      },\n      children: [editMode ? /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            id: \"file\",\n            style: {\n              display: 'none'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(CardMedia, {\n            component: \"img\",\n            height: \"200\",\n            image: `${plant === null || plant === void 0 ? void 0 : plant.selectedFiles[0].base64}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true), /*#__PURE__*/_jsxDEV(Box, {\n          children: [!formHasAllRequiredFields && /*#__PURE__*/_jsxDEV(Typography, {\n            color: \"error\",\n            children: \"* All fields and images are required.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 63\n          }, this), !inputOfNumberValid && /*#__PURE__*/_jsxDEV(Typography, {\n            color: \"error\",\n            children: \"* Quantity or Price is not a valid number.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 57\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(FormControl, {\n            fullWidth: true,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              id: \"name\",\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              name: \"name\",\n              type: \"text\",\n              id: \"name\",\n              value: plantInfo === null || plantInfo === void 0 ? void 0 : plantInfo.name,\n              sx: {\n                display: 'block'\n              },\n              placeholder: `Name: ${plant === null || plant === void 0 ? void 0 : plant.name}`,\n              onChange: handleInputChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            children: /*#__PURE__*/_jsxDEV(FormControl, {\n              fullWidth: true,\n              children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                id: \"category\",\n                children: \"Category\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                label: \"Category\",\n                name: \"category\",\n                id: \"category\",\n                value: plantInfo === null || plantInfo === void 0 ? void 0 : plantInfo.category,\n                sx: {\n                  color: 'black'\n                },\n                onChange: handleInputChange,\n                children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: \"\",\n                  children: \" -- \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 116,\n                  columnNumber: 45\n                }, this), plantCategories.map(category => /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: category,\n                  children: category\n                }, plantCategories.indexOf(category), false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 117,\n                  columnNumber: 78\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            children: /*#__PURE__*/_jsxDEV(FormControl, {\n              fullWidth: true,\n              children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                id: \"size\",\n                children: \"Size\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                label: \"Size\",\n                name: \"size\",\n                id: \"size\",\n                value: plantInfo === null || plantInfo === void 0 ? void 0 : plantInfo.size,\n                onChange: handleInputChange,\n                children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: \"\",\n                  children: \" -- \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 125,\n                  columnNumber: 45\n                }, this), sizes.map(size => /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: size,\n                  children: size\n                }, sizes.indexOf(size), false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 126,\n                  columnNumber: 64\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            children: /*#__PURE__*/_jsxDEV(FormControl, {\n              fullWidth: true,\n              children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                id: \"status\",\n                children: \"Status\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 132,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                label: \"status\",\n                name: \"status\",\n                id: \"status\",\n                value: plantInfo === null || plantInfo === void 0 ? void 0 : plantInfo.status,\n                onChange: handleInputChange,\n                children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: \"\",\n                  children: \" -- \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 134,\n                  columnNumber: 45\n                }, this), statuses.map(status => /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: status,\n                  children: status\n                }, statuses.indexOf(status), false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 135,\n                  columnNumber: 69\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n            fullWidth: true,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              id: \"price\",\n              children: \"Price\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              name: \"price\",\n              type: \"number\",\n              id: \"price\",\n              value: plantInfo === null || plantInfo === void 0 ? void 0 : plantInfo.price,\n              sx: {\n                display: 'block'\n              },\n              placeholder: `Price: $${plantInfo === null || plantInfo === void 0 ? void 0 : plantInfo.price}`,\n              onChange: handleInputChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 25\n      }, this) : content, /*#__PURE__*/_jsxDEV(CardActions, {\n        children: editMode ? /*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: handleSaveEdit,\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            color: \"warning\",\n            onClick: handleEditMode,\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(Link, {\n            to: \"/plants\",\n            replace: true,\n            children: /*#__PURE__*/_jsxDEV(ArrowLeftIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 60\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: handleEditMode,\n            children: /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            color: \"warning\",\n            onClick: () => setFormConfirmDeleteVisible(true),\n            children: /*#__PURE__*/_jsxDEV(DeleteForeverIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 109\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 13\n  }, this);\n};\n\n_s(PlantCard, \"ddq5gVxYIB1G/e0j7+CYrZK3UWo=\", false, function () {\n  return [useParams, useSelector, useSelector, useSelector, useDispatch, useNavigate];\n});\n\n_c = PlantCard;\nexport default PlantCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlantCard\");","map":{"version":3,"sources":["/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/PlantCard.js"],"names":["React","useEffect","useState","useSelector","useDispatch","Link","useParams","useNavigate","deletePlant","editPlant","fetchPlant","SelectSinglePlant","getPlantStatus","getPlantError","FormControl","Button","Typography","Card","CardMedia","CardContent","CardActions","Box","Input","InputLabel","MenuItem","Select","EditIcon","DeleteForeverIcon","ArrowLeftIcon","plantCategories","sizes","statuses","FormConfirmDelete","PlantObjectValidator","LoadingSpinner","ErrorMessage","PlantCard","id","plant","plantStatus","plantError","plantInfo","setPlantInfo","editMode","setEditMode","formConfirmDeleteVisible","setFormConfirmDeleteVisible","formHasAllRequiredFields","setFormHasAllRequiredFields","inputOfNumberValid","setInputOfNumberValid","dispatch","navigate","content","selectedFiles","base64","name","category","size","status","price","handleInputChange","event","newObj","isNaN","parseInt","target","value","handleEditMode","handleSaveEdit","PlantValidator","result","validate","hasAllRequiredFields","inputNumberIsValid","handleDeleteItem","margin","display","color","map","indexOf"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,SAAT,EAAoBC,WAApB,QAAsC,kBAAtC,C,CACA;;AACA,SAASC,WAAT,EAAsBC,SAAtB,QAAsC,yBAAtC;AACA,SAAQC,UAAR,EAAoBC,iBAApB,EAAuCC,cAAvC,EAAuDC,aAAvD,QAA2E,wBAA3E,C,CACA;;AACA,SAAQC,WAAR,EAAqBC,MAArB,EAA6BC,UAA7B,EAAyCC,IAAzC,EAA+CC,SAA/C,EAA0DC,WAA1D,EAAuEC,WAAvE,EAAoFC,GAApF,EAAyFC,KAAzF,EAAgGC,UAAhG,EAA4GC,QAA5G,EAAsHC,MAAtH,QAAmI,eAAnI;AACA,OAAOC,QAAP,MAAqB,0BAArB;AACA,OAAOC,iBAAP,MAA8B,mCAA9B;AACA,OAAOC,aAAP,MAA0B,+BAA1B,C,CACA;;AACA,OAAOC,eAAP,MAA4B,6BAA5B;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,SAASC,oBAAT,QAAqC,2BAArC;AACA,OAAOC,cAAP,MAA2B,0BAA3B;AACA,OAAOC,YAAP,MAAyB,wBAAzB;;;;AACA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACpB,QAAM;AAAEC,IAAAA;AAAF,MAAS/B,SAAS,EAAxB;AACA,QAAMgC,KAAK,GAAGnC,WAAW,CAACQ,iBAAD,CAAzB;AACA,QAAM4B,WAAW,GAAGpC,WAAW,CAACS,cAAD,CAA/B;AACA,QAAM4B,UAAU,GAAGrC,WAAW,CAACU,aAAD,CAA9B;AACA,QAAM,CAAC4B,SAAD,EAAYC,YAAZ,IAA4BxC,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACyC,QAAD,EAAWC,WAAX,IAA0B1C,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAAC2C,wBAAD,EAA2BC,2BAA3B,IAA0D5C,QAAQ,CAAC,KAAD,CAAxE;AACA,QAAM,CAAC6C,wBAAD,EAA2BC,2BAA3B,IAA0D9C,QAAQ,CAAC,IAAD,CAAxE;AACA,QAAM,CAAC+C,kBAAD,EAAqBC,qBAArB,IAA8ChD,QAAQ,CAAC,IAAD,CAA5D;AACA,QAAMiD,QAAQ,GAAG/C,WAAW,EAA5B;AACA,QAAMgD,QAAQ,GAAG7C,WAAW,EAA5B;AAEAN,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGsC,WAAW,IAAI,MAAlB,EAAyB;AACrBY,MAAAA,QAAQ,CAACzC,UAAU,CAAC2B,EAAD,CAAX,CAAR;AACH;AAEJ,GALQ,EAKN,CAACE,WAAD,EAAcF,EAAd,EAAkBc,QAAlB,CALM,CAAT;AAMAlD,EAAAA,SAAS,CAAC,MAAI;AACVyC,IAAAA,YAAY,CAACJ,KAAD,CAAZ;AACH,GAFQ,EAEN,CAACA,KAAD,CAFM,CAAT;AAIA,MAAIe,OAAJ;;AAEA,MAAGd,WAAW,IAAI,SAAlB,EAA4B;AACxBc,IAAAA,OAAO,gBAAG,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,YAAV;AACH,GAFD,MAEO,IAAGd,WAAW,IAAI,WAAlB,EAA8B;AACjCc,IAAAA,OAAO,gBAAG,QAAC,WAAD;AAAA,8BACN,QAAC,SAAD;AAAW,QAAA,SAAS,EAAC,KAArB;AAA2B,QAAA,MAAM,EAAC,KAAlC;AAAwC,QAAA,KAAK,EAAG,GAAEf,KAAH,aAAGA,KAAH,uBAAGA,KAAK,CAAEgB,aAAP,CAAqB,CAArB,EAAwBC,MAAO;AAAjF;AAAA;AAAA;AAAA;AAAA,cADM,eAEN,QAAC,UAAD;AAAY,QAAA,OAAO,EAAC,IAApB;AAAA,kBAA0BjB,KAA1B,aAA0BA,KAA1B,uBAA0BA,KAAK,CAAEkB;AAAjC;AAAA;AAAA;AAAA;AAAA,cAFM,eAGN,QAAC,UAAD;AAAA,gCAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAZ,EAA8BlB,KAA9B,aAA8BA,KAA9B,uBAA8BA,KAAK,CAAEmB,QAArC;AAAA;AAAA;AAAA;AAAA;AAAA,cAHM,eAIN,QAAC,UAAD;AAAA,gCAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAZ,EAA0BnB,KAA1B,aAA0BA,KAA1B,uBAA0BA,KAAK,CAAEoB,IAAjC;AAAA;AAAA;AAAA;AAAA;AAAA,cAJM,eAKN,QAAC,UAAD;AAAA,gCAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAZ,EAA4BpB,KAA5B,aAA4BA,KAA5B,uBAA4BA,KAAK,CAAEqB,MAAnC;AAAA;AAAA;AAAA;AAAA;AAAA,cALM,eAMN,QAAC,UAAD;AAAA,gCAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAZ,OAA4BrB,KAA5B,aAA4BA,KAA5B,uBAA4BA,KAAK,CAAEsB,KAAnC;AAAA;AAAA;AAAA;AAAA;AAAA,cANM;AAAA;AAAA;AAAA;AAAA;AAAA,YAAV;AAQH,GATM,MASA,IAAGrB,WAAW,IAAI,QAAlB,EAA2B;AAC9Bc,IAAAA,OAAO,gBAAG,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,YAAV;AACH;;AAED,WAASQ,iBAAT,CAA2BC,KAA3B,EAAiC;AAC7B,QAAIC,MAAM,GAAG,EAAb;;AACA,QAAI,CAACC,KAAK,CAACC,QAAQ,CAACH,KAAK,CAACI,MAAN,CAAaC,KAAd,CAAT,CAAV,EAA0C;AACtCJ,MAAAA,MAAM,CAACD,KAAK,CAACI,MAAN,CAAaV,IAAd,CAAN,GAA4BS,QAAQ,CAACH,KAAK,CAACI,MAAN,CAAaC,KAAd,CAApC;AACH,KAFD,MAEO;AACHJ,MAAAA,MAAM,CAACD,KAAK,CAACI,MAAN,CAAaV,IAAd,CAAN,GAA4BM,KAAK,CAACI,MAAN,CAAaC,KAAzC;AACH;;AACDzB,IAAAA,YAAY,CAAC,EACT,GAAGD,SADM;AAET,SAAGsB;AAFM,KAAD,CAAZ;AAIH;;AACD,WAASK,cAAT,GAAyB;AACrBxB,IAAAA,WAAW,CAAC,CAACD,QAAF,CAAX;AACH;;AAAA;;AAED,WAAS0B,cAAT,GAAyB;AACrB,QAAIC,cAAc,GAAG,IAAIrC,oBAAJ,CAAyBQ,SAAzB,CAArB;AACA,QAAI8B,MAAM,GAAGD,cAAc,CAACE,QAAf,EAAb;AACAxB,IAAAA,2BAA2B,CAACsB,cAAc,CAACG,oBAAhB,CAA3B;AACAvB,IAAAA,qBAAqB,CAACoB,cAAc,CAACI,kBAAhB,CAArB;;AACA,QAAGH,MAAH,EAAU;AACNpB,MAAAA,QAAQ,CAAC1C,SAAS,CAACgC,SAAD,CAAV,CAAR;AACAW,MAAAA,QAAQ,CAAC,SAAD,CAAR;AACH;AACJ;;AAAA;;AAED,WAASuB,gBAAT,GAA2B;AACvBxB,IAAAA,QAAQ,CAAC3C,WAAW,CAAC6B,EAAD,CAAZ,CAAR;AACAe,IAAAA,QAAQ,CAAC,SAAD,CAAR;AACH;;AAAA;AAED,sBACQ,QAAC,GAAD;AAAA,eACCP,wBAAwB,iBAAI,QAAC,iBAAD;AAAmB,MAAA,gBAAgB,EAAE8B,gBAArC;AAAuD,MAAA,2BAA2B,EAAE7B;AAApF;AAAA;AAAA;AAAA;AAAA,YAD7B,eAEI,QAAC,IAAD;AAAM,MAAA,EAAE,EAAE;AAAE8B,QAAAA,MAAM,EAAE;AAAV,OAAV;AAAA,iBACKjC,QAAQ,gBACL,QAAC,WAAD;AAAA,gCACI;AAAA,kCACI;AAAO,YAAA,IAAI,EAAC,MAAZ;AAAmB,YAAA,EAAE,EAAC,MAAtB;AAA6B,YAAA,KAAK,EAAE;AAAEkC,cAAAA,OAAO,EAAE;AAAX;AAApC;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI,QAAC,SAAD;AAAW,YAAA,SAAS,EAAC,KAArB;AAA2B,YAAA,MAAM,EAAC,KAAlC;AAAwC,YAAA,KAAK,EAAG,GAAEvC,KAAH,aAAGA,KAAH,uBAAGA,KAAK,CAAEgB,aAAP,CAAqB,CAArB,EAAwBC,MAAO;AAAjF;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA,wBADJ,eAKI,QAAC,GAAD;AAAA,qBACK,CAACR,wBAAD,iBAA6B,QAAC,UAAD;AAAY,YAAA,KAAK,EAAC,OAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADlC,EAEK,CAACE,kBAAD,iBAAuB,QAAC,UAAD;AAAY,YAAA,KAAK,EAAC,OAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAF5B;AAAA;AAAA;AAAA;AAAA;AAAA,gBALJ,eASI,QAAC,GAAD;AAAA,kCACI,QAAC,WAAD;AAAa,YAAA,SAAS,MAAtB;AAAA,oCACI,QAAC,UAAD;AAAY,cAAA,EAAE,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI,QAAC,KAAD;AAAO,cAAA,IAAI,EAAC,MAAZ;AAAmB,cAAA,IAAI,EAAC,MAAxB;AAA+B,cAAA,EAAE,EAAC,MAAlC;AAAyC,cAAA,KAAK,EAAER,SAAF,aAAEA,SAAF,uBAAEA,SAAS,CAAEe,IAA3D;AAAiE,cAAA,EAAE,EAAE;AAAEqB,gBAAAA,OAAO,EAAE;AAAX,eAArE;AAA2F,cAAA,WAAW,EAAG,SAAQvC,KAAT,aAASA,KAAT,uBAASA,KAAK,CAAEkB,IAAK,EAA7H;AAAgI,cAAA,QAAQ,EAAEK;AAA1I;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAKI,QAAC,GAAD;AAAA,mCACI,QAAC,WAAD;AAAa,cAAA,SAAS,MAAtB;AAAA,sCACI,QAAC,UAAD;AAAY,gBAAA,EAAE,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEI,QAAC,MAAD;AAAQ,gBAAA,KAAK,EAAC,UAAd;AAAyB,gBAAA,IAAI,EAAC,UAA9B;AAAyC,gBAAA,EAAE,EAAC,UAA5C;AAAuD,gBAAA,KAAK,EAAEpB,SAAF,aAAEA,SAAF,uBAAEA,SAAS,CAAEgB,QAAzE;AAAmF,gBAAA,EAAE,EAAE;AAAEqB,kBAAAA,KAAK,EAAE;AAAT,iBAAvF;AAA2G,gBAAA,QAAQ,EAAEjB,iBAArH;AAAA,wCACI,QAAC,QAAD;AAAU,kBAAA,KAAK,EAAC,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,EAEKhC,eAAe,CAACkD,GAAhB,CAAoBtB,QAAQ,iBAAI,QAAC,QAAD;AAAkD,kBAAA,KAAK,EAAEA,QAAzD;AAAA,4BAAoEA;AAApE,mBAAe5B,eAAe,CAACmD,OAAhB,CAAwBvB,QAAxB,CAAf;AAAA;AAAA;AAAA;AAAA,wBAAhC,CAFL;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBALJ,eAcI,QAAC,GAAD;AAAA,mCACI,QAAC,WAAD;AAAa,cAAA,SAAS,MAAtB;AAAA,sCACI,QAAC,UAAD;AAAY,gBAAA,EAAE,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEI,QAAC,MAAD;AAAQ,gBAAA,KAAK,EAAC,MAAd;AAAqB,gBAAA,IAAI,EAAC,MAA1B;AAAiC,gBAAA,EAAE,EAAC,MAApC;AAA2C,gBAAA,KAAK,EAAEhB,SAAF,aAAEA,SAAF,uBAAEA,SAAS,CAAEiB,IAA7D;AAAmE,gBAAA,QAAQ,EAAEG,iBAA7E;AAAA,wCACI,QAAC,QAAD;AAAU,kBAAA,KAAK,EAAC,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,EAEK/B,KAAK,CAACiD,GAAN,CAAUrB,IAAI,iBAAI,QAAC,QAAD;AAAoC,kBAAA,KAAK,EAAEA,IAA3C;AAAA,4BAAkDA;AAAlD,mBAAe5B,KAAK,CAACkD,OAAN,CAActB,IAAd,CAAf;AAAA;AAAA;AAAA;AAAA,wBAAlB,CAFL;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBAdJ,eAuBI,QAAC,GAAD;AAAA,mCACI,QAAC,WAAD;AAAa,cAAA,SAAS,MAAtB;AAAA,sCACI,QAAC,UAAD;AAAY,gBAAA,EAAE,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEI,QAAC,MAAD;AAAQ,gBAAA,KAAK,EAAC,QAAd;AAAuB,gBAAA,IAAI,EAAC,QAA5B;AAAqC,gBAAA,EAAE,EAAC,QAAxC;AAAiD,gBAAA,KAAK,EAAEjB,SAAF,aAAEA,SAAF,uBAAEA,SAAS,CAAEkB,MAAnE;AAA2E,gBAAA,QAAQ,EAAEE,iBAArF;AAAA,wCACI,QAAC,QAAD;AAAU,kBAAA,KAAK,EAAC,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,EAEK9B,QAAQ,CAACgD,GAAT,CAAapB,MAAM,iBAAI,QAAC,QAAD;AAAyC,kBAAA,KAAK,EAAEA,MAAhD;AAAA,4BAAyDA;AAAzD,mBAAe5B,QAAQ,CAACiD,OAAT,CAAiBrB,MAAjB,CAAf;AAAA;AAAA;AAAA;AAAA,wBAAvB,CAFL;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBAvBJ,eAgCI,QAAC,WAAD;AAAa,YAAA,SAAS,MAAtB;AAAA,oCACI,QAAC,UAAD;AAAY,cAAA,EAAE,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI,QAAC,KAAD;AAAO,cAAA,IAAI,EAAC,OAAZ;AAAoB,cAAA,IAAI,EAAC,QAAzB;AAAkC,cAAA,EAAE,EAAC,OAArC;AAA6C,cAAA,KAAK,EAAElB,SAAF,aAAEA,SAAF,uBAAEA,SAAS,CAAEmB,KAA/D;AAAsE,cAAA,EAAE,EAAE;AAAEiB,gBAAAA,OAAO,EAAE;AAAX,eAA1E;AAAgG,cAAA,WAAW,EAAG,WAAUpC,SAAX,aAAWA,SAAX,uBAAWA,SAAS,CAAEmB,KAAM,EAAzI;AAA4I,cAAA,QAAQ,EAAEC;AAAtJ;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBAhCJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBATJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADK,GAiDLR,OAlDR,eAoDI,QAAC,WAAD;AAAA,kBACKV,QAAQ,gBACL,QAAC,GAAD;AAAA,kCACA,QAAC,MAAD;AAAQ,YAAA,OAAO,EAAE0B,cAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADA,eAEI,QAAC,MAAD;AAAQ,YAAA,KAAK,EAAC,SAAd;AAAwB,YAAA,OAAO,EAAED,cAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADK,gBAML,QAAC,GAAD;AAAA,kCACI,QAAC,IAAD;AAAM,YAAA,EAAE,EAAC,SAAT;AAAmB,YAAA,OAAO,MAA1B;AAAA,mCAA2B,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAA3B;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI,QAAC,MAAD;AAAQ,YAAA,OAAO,EAAEA,cAAjB;AAAA,mCACI,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBAFJ,eAKQ,QAAC,MAAD;AAAQ,YAAA,KAAK,EAAC,SAAd;AAAwB,YAAA,OAAO,EAAE,MAAItB,2BAA2B,CAAC,IAAD,CAAhE;AAAA,mCAAwE,QAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAxE;AAAA;AAAA;AAAA;AAAA,kBALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAPR;AAAA;AAAA;AAAA;AAAA,cApDJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADR;AA6EH,CArJD;;GAAMV,S;UACa9B,S,EACDH,W,EACMA,W,EACDA,W,EAMFC,W,EACAG,W;;;KAXf6B,S;AAuJN,eAAeA,SAAf","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { useParams, useNavigate} from 'react-router-dom';\n// Redux store functions\nimport { deletePlant, editPlant} from '../../store/plantsSlice';\nimport {fetchPlant, SelectSinglePlant, getPlantStatus, getPlantError} from '../../store/plantSlice'; \n// Meterial UI Section\nimport {FormControl, Button, Typography, Card, CardMedia, CardContent, CardActions, Box, Input, InputLabel, MenuItem, Select} from '@mui/material';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteForeverIcon from '@mui/icons-material/DeleteForever';\nimport ArrowLeftIcon from '@mui/icons-material/ArrowLeft';\n// Other Imports \nimport plantCategories from '../../lists/plantCategories';\nimport sizes from '../../constants/sizes';\nimport statuses from '../../constants/status'; \nimport FormConfirmDelete from './FormConfirmDelete';\nimport { PlantObjectValidator } from '../../services/validation';\nimport LoadingSpinner from '../Common/LoadingSpinner';\nimport ErrorMessage from '../Common/ErrorMessage';\nconst PlantCard = () => { \n    const { id } = useParams();\n    const plant = useSelector(SelectSinglePlant); \n    const plantStatus = useSelector(getPlantStatus); \n    const plantError = useSelector(getPlantError); \n    const [plantInfo, setPlantInfo] = useState({});\n    const [editMode, setEditMode] = useState(false); \n    const [formConfirmDeleteVisible, setFormConfirmDeleteVisible] = useState(false); \n    const [formHasAllRequiredFields, setFormHasAllRequiredFields] = useState(true);\n    const [inputOfNumberValid, setInputOfNumberValid] = useState(true);\n    const dispatch = useDispatch(); \n    const navigate = useNavigate(); \n\n    useEffect(() => {\n        if(plantStatus == 'idle'){\n            dispatch(fetchPlant(id))\n        }\n        \n    }, [plantStatus, id, dispatch]); \n    useEffect(()=>{\n        setPlantInfo(plant)\n    }, [plant]); \n\n    let content; \n\n    if(plantStatus == 'loading'){\n        content = <LoadingSpinner />\n    } else if(plantStatus == 'succeeded'){\n        content = <CardContent>\n            <CardMedia component=\"img\" height=\"200\" image={`${plant?.selectedFiles[0].base64}`} />\n            <Typography variant='h4'>{plant?.name}</Typography>\n            <Typography><b>Category: </b>{plant?.category}</Typography>\n            <Typography><b>Size: </b>{plant?.size}</Typography>\n            <Typography><b>Status: </b>{plant?.status}</Typography>\n            <Typography><b>Price: </b>${plant?.price}</Typography>\n        </CardContent>\n    } else if(plantStatus == 'failed'){\n        content = <ErrorMessage /> \n    }\n\n    function handleInputChange(event){\n        let newObj = {};\n        if (!isNaN(parseInt(event.target.value))) {\n            newObj[event.target.name] = parseInt(event.target.value);\n        } else {\n            newObj[event.target.name] = event.target.value;\n        }\n        setPlantInfo({\n            ...plantInfo,\n            ...newObj\n        })\n    }\n    function handleEditMode(){\n        setEditMode(!editMode);  \n    }; \n\n    function handleSaveEdit(){\n        let PlantValidator = new PlantObjectValidator(plantInfo)\n        let result = PlantValidator.validate(); \n        setFormHasAllRequiredFields(PlantValidator.hasAllRequiredFields);\n        setInputOfNumberValid(PlantValidator.inputNumberIsValid);\n        if(result){\n            dispatch(editPlant(plantInfo));\n            navigate('/plants')\n        } \n    }; \n\n    function handleDeleteItem(){\n        dispatch(deletePlant(id)); \n        navigate('/plants')\n    }; \n    \n    return (\n            <Box>\n            {formConfirmDeleteVisible && <FormConfirmDelete handleDeleteItem={handleDeleteItem} setFormConfirmDeleteVisible={setFormConfirmDeleteVisible} /> }\n                <Card sx={{ margin: \"10px\" }}>\n                    {editMode ? (\n                        <CardContent>\n                            <>\n                                <input type=\"file\" id=\"file\" style={{ display: 'none' }} />\n                                <CardMedia component=\"img\" height=\"200\" image={`${plant?.selectedFiles[0].base64}`} />\n                            </>\n                            <Box>\n                                {!formHasAllRequiredFields && <Typography color=\"error\">* All fields and images are required.</Typography>}\n                                {!inputOfNumberValid && <Typography color=\"error\">* Quantity or Price is not a valid number.</Typography>}\n                            </Box>\n                            <Box>\n                                <FormControl fullWidth>\n                                    <InputLabel id=\"name\">Name</InputLabel>\n                                    <Input name='name' type=\"text\" id=\"name\" value={plantInfo?.name} sx={{ display: 'block' }} placeholder={`Name: ${plant?.name}`} onChange={handleInputChange}></Input>\n                                </FormControl>\n                                <Box>\n                                    <FormControl fullWidth>\n                                        <InputLabel id=\"category\">Category</InputLabel>\n                                        <Select label=\"Category\" name=\"category\" id=\"category\" value={plantInfo?.category} sx={{ color: 'black' }} onChange={handleInputChange}>\n                                            <MenuItem value=\"\"> -- </MenuItem>\n                                            {plantCategories.map(category => <MenuItem key={plantCategories.indexOf(category)} value={category}>{category}</MenuItem>)}\n                                        </Select>\n                                    </FormControl>\n                                </Box>\n                                <Box>\n                                    <FormControl fullWidth>\n                                        <InputLabel id=\"size\">Size</InputLabel>\n                                        <Select label=\"Size\" name=\"size\" id=\"size\" value={plantInfo?.size} onChange={handleInputChange}>\n                                            <MenuItem value=\"\"> -- </MenuItem>\n                                            {sizes.map(size => <MenuItem key={sizes.indexOf(size)} value={size}>{size}</MenuItem>)}\n                                        </Select>\n                                    </FormControl>\n                                </Box>\n                                <Box>\n                                    <FormControl fullWidth>\n                                        <InputLabel id=\"status\">Status</InputLabel>\n                                        <Select label=\"status\" name=\"status\" id=\"status\" value={plantInfo?.status} onChange={handleInputChange}>\n                                            <MenuItem value=\"\"> -- </MenuItem>\n                                            {statuses.map(status => <MenuItem key={statuses.indexOf(status)} value={status}>{status}</MenuItem>)}\n                                        </Select>\n                                    </FormControl>\n                                </Box>\n                                <FormControl fullWidth>\n                                    <InputLabel id=\"price\">Price</InputLabel>\n                                    <Input name='price' type=\"number\" id=\"price\" value={plantInfo?.price} sx={{ display: 'block' }} placeholder={`Price: $${plantInfo?.price}`} onChange={handleInputChange}></Input>\n                                </FormControl>\n                            </Box>\n                        </CardContent>\n                    ) : (\n                        content\n                    )}\n                    <CardActions>\n                        {editMode ? (\n                            <Box>\n                            <Button onClick={handleSaveEdit}>Save</Button>\n                                <Button color=\"warning\" onClick={handleEditMode}>Cancel</Button>\n                            </Box>\n                        ) : (\n                            <Box>\n                                <Link to=\"/plants\" replace><ArrowLeftIcon /></Link>\n                                <Button onClick={handleEditMode}>\n                                    <EditIcon />\n                                </Button>\n                                    <Button color=\"warning\" onClick={()=>setFormConfirmDeleteVisible(true)}><DeleteForeverIcon /></Button>\n                            </Box>\n                        )}\n                    </CardActions>\n                </Card>\n            </Box>\n           \n        \n      \n    )\n}\n\nexport default PlantCard;"]},"metadata":{},"sourceType":"module"}