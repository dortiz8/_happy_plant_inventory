{"ast":null,"code":"var _jsxFileName = \"/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/Plants.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom'; // Import Redux store components\n\nimport { fetchAllPlants, getPlantsError, getPlantsStatus } from '../../store/plantsSlice';\nimport { Button, Box, Input } from '@mui/material';\nimport SearchIcon from '@mui/icons-material/Search';\nimport PlantListItem from './PlantListItem';\nimport LoadingSpinner from '../Common/LoadingSpinner';\nimport { SelectAllPlants } from '../../store/plantsSlice';\nimport ErrorMessage from '../Common/ErrorMessage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Plants = () => {\n  _s();\n\n  const [search, setSearch] = useState(false);\n  const plantList = useSelector(SelectAllPlants);\n  const plantsStatus = useSelector(getPlantsStatus);\n  const plantsError = useSelector(getPlantsError);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (plantsStatus == 'idle') {\n      dispatch(fetchAllPlants());\n    }\n  }, [plantsStatus, dispatch]);\n\n  function OpenFormConfirmDelete() {}\n\n  let content;\n\n  if (plantsStatus == 'loading') {\n    content = /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 19\n    }, this);\n  } else if (plantsStatus == 'succeeded') {\n    content = /*#__PURE__*/_jsxDEV(Box, {\n      children: plantList && !plantsError && plantList.map(plant => /*#__PURE__*/_jsxDEV(PlantListItem, {\n        plant: plant,\n        OpenFormConfirmDelete: OpenFormConfirmDelete\n      }, plant._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 70\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 19\n    }, this);\n  } else if (plantsStatus == 'failed') {\n    content = /*#__PURE__*/_jsxDEV(ErrorMessage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 19\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        margin: '1rem 0',\n        backgroundColor: 'whitesmoke'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        children: search ? /*#__PURE__*/_jsxDEV(Input, {\n          onMouseLeave: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 34\n        }, this) : /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setSearch(true),\n          children: /*#__PURE__*/_jsxDEV(SearchIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 103\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 65\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/add-plant\",\n            replace: true,\n            children: \"Add a Plant\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), content]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Plants, \"XHpW1fB0AW+WFPl/p1aUqXSD11Y=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c = Plants;\nexport default Plants;\n\nvar _c;\n\n$RefreshReg$(_c, \"Plants\");","map":{"version":3,"sources":["/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/Plants.js"],"names":["React","useState","useEffect","useSelector","useDispatch","Link","fetchAllPlants","getPlantsError","getPlantsStatus","Button","Box","Input","SearchIcon","PlantListItem","LoadingSpinner","SelectAllPlants","ErrorMessage","Plants","search","setSearch","plantList","plantsStatus","plantsError","dispatch","OpenFormConfirmDelete","content","map","plant","_id","margin","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect} from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\n// Import Redux store components\nimport { fetchAllPlants, getPlantsError, getPlantsStatus } from '../../store/plantsSlice'; \nimport { Button, Box, Input} from '@mui/material';\nimport SearchIcon from '@mui/icons-material/Search';\nimport PlantListItem from './PlantListItem';\nimport LoadingSpinner from '../Common/LoadingSpinner'; \nimport {SelectAllPlants} from '../../store/plantsSlice'; \nimport ErrorMessage from '../Common/ErrorMessage';\n\n\nconst Plants = () => {\n    const [search, setSearch] = useState(false);\n    const plantList = useSelector(SelectAllPlants); \n    const plantsStatus = useSelector(getPlantsStatus); \n    const plantsError = useSelector(getPlantsError); \n\n    const dispatch = useDispatch(); \n    useEffect(() => {\n        if(plantsStatus == 'idle'){\n            dispatch(fetchAllPlants())\n        }   \n    }, [plantsStatus, dispatch]); \n\n    function OpenFormConfirmDelete(){\n\n    }\n    let content; \n    \n    if(plantsStatus == 'loading'){\n        content = <LoadingSpinner />\n    } else if (plantsStatus == 'succeeded'){\n        content = <Box>\n            {(plantList && !plantsError) && plantList.map((plant) => <PlantListItem key={plant._id} plant={plant} OpenFormConfirmDelete={OpenFormConfirmDelete} />)}\n        </Box>\n    } else if (plantsStatus == 'failed'){\n        content = <ErrorMessage />\n    }\n\n    \n    return (\n        <div>\n            <Box sx={{ margin: '1rem 0', backgroundColor: 'whitesmoke' }}>\n                <Box>\n                    {\n                        search ? <Input onMouseLeave></Input> : <Button onClick={()=>setSearch(true)}><SearchIcon /></Button>\n                    }\n                    \n                </Box>\n                <Box>\n                    <Button><Link to=\"/add-plant\" replace>Add a Plant</Link></Button>\n                </Box>\n               \n            </Box>\n           {content}\n        </div>\n    )\n}\n\nexport default Plants;"]},"metadata":{},"sourceType":"module"}