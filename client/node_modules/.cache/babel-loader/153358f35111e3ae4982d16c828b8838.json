{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport * as api from '../api/index';\nconst slice = createSlice({\n  name: 'plant',\n  initialState: {\n    plant: {},\n    status: 'idle',\n    //'idel' | 'loading' | 'succeeded' | 'failed'\n    error: null\n  },\n  reducers: {\n    resetState(state) {\n      state.plant.data = {};\n      state.status = 'idle';\n    }\n\n  },\n\n  extraReducers(buildrer) {\n    buildrer.addCase(fetchPlant.pending, (state, action) => {\n      state.status = 'loading';\n    }).addCase(fetchPlant.fulfilled, (state, action) => {\n      if (action.payload != undefined) {\n        state.plant.data = action.payload;\n        state.status = 'succeeded';\n      } else {\n        state.status = 'failed';\n      }\n    }).addCase(fetchPlant.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n\n});\nexport default slice.reducer;\nexport const {\n  resetState\n} = slice.actions;\nexport const SelectSinglePlant = state => state.plant.plant.data;\n_c = SelectSinglePlant;\nexport const getPlantStatus = state => state.plant.status;\nexport const getPlantError = state => state.plant.error;\nexport const resetPlantstate = async () => {\n  resetState();\n};\nexport const fetchPlant = createAsyncThunk('plant/fetchPlant', async id => {\n  try {\n    let {\n      data\n    } = await api.fetchOnePlant(id);\n    return data;\n  } catch (error) {}\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectSinglePlant\");","map":{"version":3,"sources":["/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/store/plantSlice.js"],"names":["createAsyncThunk","createSlice","api","slice","name","initialState","plant","status","error","reducers","resetState","state","data","extraReducers","buildrer","addCase","fetchPlant","pending","action","fulfilled","payload","undefined","rejected","message","reducer","actions","SelectSinglePlant","getPlantStatus","getPlantError","resetPlantstate","id","fetchOnePlant"],"mappings":"AACA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,OAAO,KAAKC,GAAZ,MAAqB,cAArB;AAEA,MAAMC,KAAK,GAAGF,WAAW,CAAC;AACtBG,EAAAA,IAAI,EAAE,OADgB;AAEtBC,EAAAA,YAAY,EAAE;AACVC,IAAAA,KAAK,EAAE,EADG;AAEVC,IAAAA,MAAM,EAAE,MAFE;AAEM;AAChBC,IAAAA,KAAK,EAAE;AAHG,GAFQ;AAOtBC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,UAAU,CAACC,KAAD,EAAO;AACbA,MAAAA,KAAK,CAACL,KAAN,CAAYM,IAAZ,GAAmB,EAAnB;AACAD,MAAAA,KAAK,CAACJ,MAAN,GAAe,MAAf;AACH;;AAJK,GAPY;;AAatBM,EAAAA,aAAa,CAACC,QAAD,EAAU;AACnBA,IAAAA,QAAQ,CACHC,OADL,CACaC,UAAU,CAACC,OADxB,EACiC,CAACN,KAAD,EAAOO,MAAP,KAAgB;AACzCP,MAAAA,KAAK,CAACJ,MAAN,GAAe,SAAf;AACH,KAHL,EAIKQ,OAJL,CAIaC,UAAU,CAACG,SAJxB,EAImC,CAACR,KAAD,EAAQO,MAAR,KAAmB;AAC9C,UAAGA,MAAM,CAACE,OAAP,IAAkBC,SAArB,EAA+B;AAC3BV,QAAAA,KAAK,CAACL,KAAN,CAAYM,IAAZ,GAAmBM,MAAM,CAACE,OAA1B;AACAT,QAAAA,KAAK,CAACJ,MAAN,GAAe,WAAf;AACH,OAHD,MAGK;AACDI,QAAAA,KAAK,CAACJ,MAAN,GAAe,QAAf;AACH;AACJ,KAXL,EAYKQ,OAZL,CAYaC,UAAU,CAACM,QAZxB,EAYkC,CAACX,KAAD,EAAQO,MAAR,KAAmB;AAC7CP,MAAAA,KAAK,CAACJ,MAAN,GAAe,QAAf;AACAI,MAAAA,KAAK,CAACH,KAAN,GAAcU,MAAM,CAACV,KAAP,CAAae,OAA3B;AACH,KAfL;AAgBH;;AA9BqB,CAAD,CAAzB;AAgCA,eAAepB,KAAK,CAACqB,OAArB;AAEA,OAAO,MAAM;AAAEd,EAAAA;AAAF,IAAiBP,KAAK,CAACsB,OAA7B;AAEP,OAAO,MAAMC,iBAAiB,GAAIf,KAAD,IAAWA,KAAK,CAACL,KAAN,CAAYA,KAAZ,CAAkBM,IAAvD;KAAMc,iB;AACb,OAAO,MAAMC,cAAc,GAAIhB,KAAD,IAAWA,KAAK,CAACL,KAAN,CAAYC,MAA9C;AACP,OAAO,MAAMqB,aAAa,GAAIjB,KAAD,IAAWA,KAAK,CAACL,KAAN,CAAYE,KAA7C;AAEP,OAAO,MAAMqB,eAAe,GAAG,YAAU;AACrCnB,EAAAA,UAAU;AACb,CAFM;AAKP,OAAO,MAAMM,UAAU,GAAGhB,gBAAgB,CAAC,kBAAD,EAAqB,MAAO8B,EAAP,IAAc;AACzE,MAAI;AACA,QAAI;AAAElB,MAAAA;AAAF,QAAW,MAAMV,GAAG,CAAC6B,aAAJ,CAAkBD,EAAlB,CAArB;AACA,WAAOlB,IAAP;AACH,GAHD,CAGE,OAAOJ,KAAP,EAAc,CAEf;AACJ,CAPyC,CAAnC","sourcesContent":["\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport * as api from '../api/index';\n\nconst slice = createSlice({\n    name: 'plant',\n    initialState: {\n        plant: {},\n        status: 'idle', //'idel' | 'loading' | 'succeeded' | 'failed'\n        error: null\n    },\n    reducers: {\n        resetState(state){\n            state.plant.data = {}; \n            state.status = 'idle'; \n        }\n    }, \n    extraReducers(buildrer){\n        buildrer\n            .addCase(fetchPlant.pending, (state,action)=>{\n                state.status = 'loading';\n            })\n            .addCase(fetchPlant.fulfilled, (state, action) => {\n                if(action.payload != undefined){\n                    state.plant.data = action.payload\n                    state.status = 'succeeded'\n                }else{\n                    state.status = 'failed'\n                }\n            })\n            .addCase(fetchPlant.rejected, (state, action) => {\n                state.status = 'failed'\n                state.error = action.error.message\n            })\n    }\n})\nexport default slice.reducer; \n\nexport const { resetState } = slice.actions;\n\nexport const SelectSinglePlant = (state) => state.plant.plant.data; \nexport const getPlantStatus = (state) => state.plant.status; \nexport const getPlantError = (state) => state.plant.error; \n\nexport const resetPlantstate = async ()=>{\n    resetState()\n}\n\n\nexport const fetchPlant = createAsyncThunk('plant/fetchPlant', async (id) => {\n    try {\n        let { data } = await api.fetchOnePlant(id);\n        return data\n    } catch (error) {\n\n    }\n})"]},"metadata":{},"sourceType":"module"}