{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport * as api from '../api/index'; // Helper functions \n\nfunction calculateAmount(list) {\n  let amount;\n} //Slice ** Think of Slice as a feature for the application.\n\n\nconst slice = createSlice({\n  name: 'plants',\n  initialState: {\n    plants: [],\n    amount: 0,\n    status: 'idle',\n    //'idel' | 'loading' | 'succeeded' | 'failed'\n    error: null\n  },\n  reducers: {},\n\n  extraReducers(builder) {\n    builder.addCase(fetchAllPlants.pending, (state, action) => {\n      state.status = 'loading';\n      console.log('loading');\n    }).addCase(fetchAllPlants.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.plants = action.payload;\n      state.amount = 8;\n    }).addCase(fetchAllPlants.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(createNewPlant.pending, (state, action) => {\n      state.status = 'loading';\n    }).addCase(createNewPlant.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.plants.push(action.payload);\n    }).addCase(createNewPlant.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(deletePlant.pending, (state, action) => {\n      state.status = 'loading';\n    }).addCase(deletePlant.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      let newList = state.plants.filter(plant => plant._id !== action.payload);\n      state.plants = newList;\n    }).addCase(deletePlant.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(editPlant.pending, (state, action) => {\n      state.status = 'loading';\n    }).addCase(editPlant.fulfilled, (state, action) => {\n      let newList = state.plants.filter(plant => plant._id !== action.payload._id);\n      newList.push(action.payload);\n      state.plants = newList;\n      state.status = 'succeeded';\n    }).addCase(editPlant.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n\n});\nexport default slice.reducer; // Exporting State\n\nexport const SelectAllPlants = state => state.plants.plants;\n_c = SelectAllPlants;\nexport const getPlantsStatus = state => state.plants.status;\nexport const getPlantsError = state => state.plants.error; // Exporting Actions \n\nexport const createNewPlant = createAsyncThunk('plants/createNewPlant', async plantInfo => {\n  try {\n    let {\n      data\n    } = await api.createNewPlant(plantInfo);\n    return data;\n  } catch (error) {}\n});\nexport const fetchAllPlants = createAsyncThunk('plants/fetchAllPlants', async () => {\n  try {\n    let {\n      data\n    } = await api.fetchAllPlants();\n    return data;\n  } catch (error) {}\n});\nexport const deletePlant = createAsyncThunk('plants/deletePlant', async id => {\n  try {\n    api.deleteOnePlant(id);\n    return id;\n  } catch (error) {}\n});\nexport const editPlant = createAsyncThunk('plants/editPlant', async plantInfo => {\n  try {\n    api.editPlant(plantInfo);\n    return plantInfo;\n  } catch (error) {}\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectAllPlants\");","map":{"version":3,"sources":["/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/store/plantsSlice.js"],"names":["createAsyncThunk","createSlice","api","calculateAmount","list","amount","slice","name","initialState","plants","status","error","reducers","extraReducers","builder","addCase","fetchAllPlants","pending","state","action","console","log","fulfilled","payload","rejected","message","createNewPlant","push","deletePlant","newList","filter","plant","_id","editPlant","reducer","SelectAllPlants","getPlantsStatus","getPlantsError","plantInfo","data","id","deleteOnePlant"],"mappings":"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","sourcesContent":["\nimport {createAsyncThunk, createSlice} from '@reduxjs/toolkit';\nimport * as api from '../api/index'; \n\n// Helper functions \nfunction calculateAmount(list){\n    let amount \n}\n\n\n//Slice ** Think of Slice as a feature for the application.\n\nconst slice = createSlice({\n    name: 'plants', \n    initialState: {\n        plants: [],\n        amount: 0, \n        status: 'idle', //'idel' | 'loading' | 'succeeded' | 'failed'\n        error: null\n    }, \n    reducers: {\n\n    }, \n    extraReducers(builder){\n        builder\n            .addCase(fetchAllPlants.pending, (state, action)=>{\n                state.status = 'loading'; \n                console.log('loading')\n            })\n            .addCase(fetchAllPlants.fulfilled, (state, action)=>{\n                state.status = 'succeeded'\n                state.plants = action.payload\n                state.amount = 8\n            })\n            .addCase(fetchAllPlants.rejected, (state, action) => {\n                state.status = 'failed'\n                state.error = action.error.message\n            })\n            .addCase(createNewPlant.pending, (state, action) => {\n                state.status = 'loading';\n            })\n            .addCase(createNewPlant.fulfilled, (state, action) => {\n                state.status = 'succeeded'\n                state.plants.push(action.payload)\n            })\n            .addCase(createNewPlant.rejected, (state, action) => {\n                state.status = 'failed'\n                state.error = action.error.message\n            })\n            .addCase(deletePlant.pending, (state, action) => {\n                state.status = 'loading';\n            })\n            .addCase(deletePlant.fulfilled, (state, action) => {\n                state.status = 'succeeded'\n                let newList = state.plants.filter(plant => plant._id !== action.payload); \n                state.plants =  newList\n            })\n            .addCase(deletePlant.rejected, (state, action) => {\n                state.status = 'failed'\n                state.error = action.error.message\n            })\n            .addCase(editPlant.pending, (state, action) => {\n                state.status = 'loading';\n            })\n            .addCase(editPlant.fulfilled, (state, action) => {\n                let newList = state.plants.filter(plant => plant._id !== action.payload._id);\n                newList.push(action.payload); \n                state.plants = newList;\n                state.status = 'succeeded'\n            })\n            .addCase(editPlant.rejected, (state, action) => {\n                state.status = 'failed'\n                state.error = action.error.message\n            })\n            \n    }\n}); \n\n\nexport default slice.reducer; \n\n// Exporting State\nexport const SelectAllPlants = (state) => state.plants.plants;\nexport const getPlantsStatus = (state) => state.plants.status;\nexport const getPlantsError = (state) => state.plants.error;\n\n// Exporting Actions \nexport const createNewPlant = createAsyncThunk('plants/createNewPlant', async (plantInfo) =>{\n    try {\n        let {data} = await api.createNewPlant(plantInfo); \n        return data; \n    } catch (error) {\n        \n    }\n})\nexport const fetchAllPlants = createAsyncThunk('plants/fetchAllPlants', async () =>{\n    try {\n        let { data } = await api.fetchAllPlants();\n        return data\n    } catch (error) {\n\n    }\n})\nexport const deletePlant = createAsyncThunk('plants/deletePlant', async(id)=>{\n    try {\n        api.deleteOnePlant(id); \n        return id; \n    } catch (error) {\n        \n    }\n})\nexport const editPlant = createAsyncThunk('plants/editPlant', async(plantInfo) =>{\n    try {\n        api.editPlant(plantInfo); \n        return plantInfo\n    } catch (error) {\n        \n    }\n})\n"]},"metadata":{},"sourceType":"module"}