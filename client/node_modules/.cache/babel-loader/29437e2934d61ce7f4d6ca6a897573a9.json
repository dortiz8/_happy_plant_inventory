{"ast":null,"code":"var _jsxFileName = \"/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Common/Content.js\";\nimport React from 'react';\nimport { Box } from '@mui/material';\nimport PlantListItem from './PlantListItem';\nimport LoadingSpinner from '../Common/LoadingSpinner';\nimport ErrorMessage from '../Common/ErrorMessage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Content(_ref) {\n  let {\n    status,\n    plantList,\n    filteredList\n  } = _ref;\n  let content;\n\n  if (status == 'loading') {\n    content = /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 19\n    }, this);\n  } else if (status == 'succeeded') {\n    if (plantList.length > 0 && filteredList.length == 0) {\n      console.log(plantList, ' --- updated');\n      content = /*#__PURE__*/_jsxDEV(Box, {\n        children: plantList.map(plant => /*#__PURE__*/_jsxDEV(PlantListItem, {\n          plant: plant\n        }, plant._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 54\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 23\n      }, this);\n    } else {\n      content = /*#__PURE__*/_jsxDEV(Box, {\n        children: filteredList.map(plant => /*#__PURE__*/_jsxDEV(PlantListItem, {\n          plant: plant\n        }, plant._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 57\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 23\n      }, this);\n    }\n  } else if (status == 'failed') {\n    content = /*#__PURE__*/_jsxDEV(ErrorMessage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 19\n    }, this);\n  }\n\n  return content;\n}\n_c = Content;\n\nvar _c;\n\n$RefreshReg$(_c, \"Content\");","map":{"version":3,"sources":["/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Common/Content.js"],"names":["React","Box","PlantListItem","LoadingSpinner","ErrorMessage","Content","status","plantList","filteredList","content","length","console","log","map","plant","_id"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,GAAR,QAAkB,eAAlB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,cAAP,MAA2B,0BAA3B;AACA,OAAOC,YAAP,MAAyB,wBAAzB;;AAEA,eAAe,SAASC,OAAT,OAAoD;AAAA,MAAnC;AAACC,IAAAA,MAAD;AAASC,IAAAA,SAAT;AAAoBC,IAAAA;AAApB,GAAmC;AAE/D,MAAIC,OAAJ;;AAEA,MAAIH,MAAM,IAAI,SAAd,EAAyB;AACrBG,IAAAA,OAAO,gBAAG,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,YAAV;AACH,GAFD,MAEO,IAAIH,MAAM,IAAI,WAAd,EAA2B;AAE9B,QAAIC,SAAS,CAACG,MAAV,GAAmB,CAAnB,IAAwBF,YAAY,CAACE,MAAb,IAAuB,CAAnD,EAAsD;AAClDC,MAAAA,OAAO,CAACC,GAAR,CAAYL,SAAZ,EAAuB,cAAvB;AACAE,MAAAA,OAAO,gBAAG,QAAC,GAAD;AAAA,kBAAMF,SAAS,CAACM,GAAV,CAAeC,KAAD,iBAAW,QAAC,aAAD;AAA+B,UAAA,KAAK,EAAEA;AAAtC,WAAoBA,KAAK,CAACC,GAA1B;AAAA;AAAA;AAAA;AAAA,gBAAzB;AAAN;AAAA;AAAA;AAAA;AAAA,cAAV;AACH,KAHD,MAGO;AACHN,MAAAA,OAAO,gBAAG,QAAC,GAAD;AAAA,kBAAMD,YAAY,CAACK,GAAb,CAAkBC,KAAD,iBAAW,QAAC,aAAD;AAA+B,UAAA,KAAK,EAAEA;AAAtC,WAAoBA,KAAK,CAACC,GAA1B;AAAA;AAAA;AAAA;AAAA,gBAA5B;AAAN;AAAA;AAAA;AAAA;AAAA,cAAV;AACH;AACJ,GARM,MAQA,IAAIT,MAAM,IAAI,QAAd,EAAwB;AAC3BG,IAAAA,OAAO,gBAAG,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,YAAV;AACH;;AAED,SAAOA,OAAP;AACH;KAnBuBJ,O","sourcesContent":["import React from 'react';\nimport {Box} from '@mui/material';\nimport PlantListItem from './PlantListItem';\nimport LoadingSpinner from '../Common/LoadingSpinner';\nimport ErrorMessage from '../Common/ErrorMessage';\n\nexport default function Content({status, plantList, filteredList}) {\n    \n    let content;\n\n    if (status == 'loading') {\n        content = <LoadingSpinner />\n    } else if (status == 'succeeded') {\n\n        if (plantList.length > 0 && filteredList.length == 0) {\n            console.log(plantList, ' --- updated')\n            content = <Box>{plantList.map((plant) => <PlantListItem key={plant._id} plant={plant} />)}</Box>\n        } else {\n            content = <Box>{filteredList.map((plant) => <PlantListItem key={plant._id} plant={plant} />)}</Box>\n        }\n    } else if (status == 'failed') {\n        content = <ErrorMessage />\n    }\n\n    return(content)\n}"]},"metadata":{},"sourceType":"module"}