{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport * as api from '../api/index'; //Slice \n\nconst slice = createSlice({\n  name: 'plantState',\n  initialState: {\n    plants: [],\n    plant: {}\n  },\n  reducers: {\n    fetchAll: (state, action) => {\n      state.plants = action.payload;\n    },\n    fetchOne: (state, action) => {\n      state.plant = action.payload;\n    },\n    createPlant: (state, action) => {\n      state.plants = [...state.plants, action.payload];\n    },\n    deleteOne: (state, action) => {\n      console.log(action.payload._id);\n      console.log();\n      let reducedList = state.plants.filter(plant => plant._id !== action.payload._id);\n      state.plants = [...reducedList];\n    }\n  }\n});\nexport default slice.reducer; // Actions\n\nconst {\n  fetchAll,\n  fetchOne,\n  createPlant,\n  deleteOne\n} = slice.actions;\nexport const createNewPlant = plantInfo => async dispatch => {\n  try {\n    let {\n      data\n    } = await api.addNewPlant(plantInfo);\n    dispatch(createPlant({\n      data\n    }));\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const fetchAllPlants = () => async dispatch => {\n  try {\n    let {\n      data\n    } = await api.fetchAllPlants();\n    dispatch(fetchAll({\n      data\n    }));\n  } catch (error) {}\n};\nexport const fetchOnePlant = id => async dispatch => {\n  try {\n    let {\n      data\n    } = await api.fetchOnePlant(id);\n    dispatch(fetchOne({\n      data\n    }));\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deleteOnePlant = id => async dispatch => {\n  try {\n    let {\n      data\n    } = await api.deleteOnePlant(id);\n    dispatch(deleteOne({\n      data\n    }));\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/store/plants.js"],"names":["createSlice","api","slice","name","initialState","plants","plant","reducers","fetchAll","state","action","payload","fetchOne","createPlant","deleteOne","console","log","_id","reducedList","filter","reducer","actions","createNewPlant","plantInfo","dispatch","data","addNewPlant","error","fetchAllPlants","fetchOnePlant","id","deleteOnePlant"],"mappings":"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","sourcesContent":["\nimport {createSlice} from '@reduxjs/toolkit'; \nimport * as api from '../api/index'; \n//Slice \n\nconst slice = createSlice({\n    name: 'plantState', \n    initialState: {\n        plants: [],\n        plant: {}\n    }, \n    reducers: {\n        fetchAll: (state, action) =>{\n            state.plants = action.payload; \n        }, \n        fetchOne: (state, action) =>{\n            state.plant = action.payload\n        },\n        createPlant: (state, action) =>{\n            state.plants = [...state.plants, action.payload]\n        }, \n        deleteOne: (state, action) =>{\n            console.log(action.payload._id)\n            console.log()\n            let reducedList = state.plants.filter(plant => plant._id !== action.payload._id)\n            state.plants = [...reducedList]; \n        }\n    }\n}); \n\nexport default slice.reducer; \n\n// Actions\nconst {fetchAll, fetchOne, createPlant, deleteOne} = slice.actions; \n\nexport const createNewPlant = (plantInfo) => async (dispatch)=>{\n    try{\n        let {data} = await api.addNewPlant(plantInfo); \n        dispatch(createPlant({data}))\n    }catch(error){\n        console.log(error)\n    }\n}; \n\nexport const fetchAllPlants = () => async (dispatch)=>{\n    try {\n        let {data} = await api.fetchAllPlants(); \n        dispatch(fetchAll({data}))\n    } catch (error) {\n        \n    }\n}\n\nexport const fetchOnePlant = (id) => async (dispatch) =>{\n    try{\n        let {data} = await api.fetchOnePlant(id); \n        dispatch(fetchOne({data})); \n    } catch(error){\n        console.log(error)\n    }\n}\n\nexport const deleteOnePlant = (id) => async (dispatch) =>{\n    try {\n        let {data} = await api.deleteOnePlant(id); \n        dispatch(deleteOne({data}))\n    } catch (error) {\n        console.log(error)\n    }\n}"]},"metadata":{},"sourceType":"module"}