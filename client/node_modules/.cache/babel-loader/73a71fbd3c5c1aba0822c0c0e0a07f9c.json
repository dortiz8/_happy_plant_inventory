{"ast":null,"code":"var _jsxFileName = \"/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/FormAddPlant.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux'; // Redux store functions\n\nimport { createNewPlant } from '../../store/plants'; // Material UI Section \n\nimport { Button, Typography, Paper, Box, Input, InputLabel, Select, MenuItem } from '@mui/material'; // Component Imports\n\nimport FormConfirmAddPlant from './FormConfirmAddPlant'; // Other imports \n\nimport plantCategories from '../../lists/plantCategories';\nimport sizes from '../../constants/sizes';\nimport { CHARACTER_LIMIT } from '../../constants/limits';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet blankState = {\n  name: \"\",\n  category: \"\",\n  quantity: 0,\n  size: \"\",\n  description: \"\",\n  price: 0\n};\n\nconst FormAddPlant = e => {\n  _s();\n\n  // Component State section \n  let localStorageData = JSON.parse(localStorage.getItem('plantInfo')) || blankState;\n  const [plantInfo, setPlantInfo] = useState(localStorageData);\n  const [formHasAllRequiredFields, setFormHasAllRequiredFields] = useState(true);\n  const [inputOfNumberValid, setInputOfNumberValid] = useState(true);\n  const [formConfirmVisible, setFormConfirmVisible] = useState(false);\n  const dispatch = useDispatch();\n  console.log(plantInfo);\n  useEffect(() => {\n    localStorage.setItem('plantInfo', JSON.stringify(plantInfo));\n  });\n\n  function handleInputChange(event) {\n    let newObj = {};\n\n    if (!isNaN(parseInt(event.target.value))) {\n      newObj[event.target.name] = parseInt(event.target.value);\n    } else {\n      newObj[event.target.name] = event.target.value;\n    }\n\n    setPlantInfo({ ...plantInfo,\n      ...newObj\n    });\n  }\n\n  function handlePreSubmit(e) {\n    // Prevent postback \n    e.preventDefault();\n\n    if (submitValidation()) {\n      setFormConfirmVisible(true);\n    }\n  }\n\n  function handleSubmit(e) {\n    dispatch(createNewPlant(plantInfo));\n    setFormConfirmVisible(false);\n  }\n\n  function handleClearForm() {\n    setPlantInfo(blankState);\n  }\n\n  function submitValidation() {\n    let result = true;\n\n    if (!(plantInfo.name.trim() !== \"\" && plantInfo.category.trim() !== \"\" && plantInfo.quantity !== 0 && plantInfo.size.trim() !== \"\" && plantInfo.description.trim() !== \"\" && plantInfo.price !== 0)) {\n      result = false;\n      setFormHasAllRequiredFields(false);\n    } else if (isNaN(parseInt(plantInfo.quantity)) || parseInt(plantInfo.quantity) < 0) {\n      result = false;\n      setInputOfNumberValid(false);\n      setFormHasAllRequiredFields(true);\n    } else if (parseInt(plantInfo.price) < 0) {\n      result = false;\n      setInputOfNumberValid(false);\n      setFormHasAllRequiredFields(true);\n    } else {\n      setFormHasAllRequiredFields(true);\n      setInputOfNumberValid(true);\n      return result;\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    children: formConfirmVisible ? /*#__PURE__*/_jsxDEV(FormConfirmAddPlant, {\n      plantInfo: plantInfo,\n      setFormConfirmVisible: setFormConfirmVisible,\n      handleSubmit: handleSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 35\n    }, this) : /*#__PURE__*/_jsxDEV(\"form\", {\n      autoComplete: \"off\",\n      noValidate: true,\n      onSubmit: e => handlePreSubmit(e),\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          children: \"Describe the new member!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        children: [!formHasAllRequiredFields && /*#__PURE__*/_jsxDEV(Typography, {\n          color: \"error\",\n          children: \"* All fields are required.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 51\n        }, this), !inputOfNumberValid && /*#__PURE__*/_jsxDEV(Typography, {\n          color: \"error\",\n          children: \"* Quantity or Price is not a valid number.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 45\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            name: \"name\",\n            type: \"text\",\n            value: plantInfo.name,\n            onChange: handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            children: \"Category\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            label: \"Category\",\n            name: \"category\",\n            value: plantInfo.category,\n            onChange: handleInputChange,\n            children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n              value: \"\",\n              children: \" -- \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 29\n            }, this), plantCategories.map(category => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: category,\n              children: category\n            }, plantCategories.indexOf(category), false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 65\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            children: \"Quantity\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            name: \"quantity\",\n            type: \"number\",\n            value: plantInfo.quantity,\n            onChange: handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            children: \"Size\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            label: \"Size\",\n            name: \"size\",\n            value: plantInfo.size,\n            onChange: handleInputChange,\n            children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n              value: \"\",\n              children: \" -- \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 29\n            }, this), sizes.map(size => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: size,\n              children: size\n            }, sizes.indexOf(size), false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 51\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            children: \"Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            name: \"description\",\n            type: \"text\",\n            multiline: true,\n            maxRows: 4,\n            fullWidth: true,\n            inputProps: {\n              maxLength: CHARACTER_LIMIT\n            },\n            value: plantInfo.description,\n            onChange: handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            children: \"Price\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 25\n          }, this), \"$\", /*#__PURE__*/_jsxDEV(Input, {\n            name: \"price\",\n            type: \"number\",\n            value: plantInfo.price,\n            onChange: handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 26\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            children: \"Image(s)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            style: {\n              display: \"none\"\n            },\n            name: \"selectedFiles\",\n            id: \"contained-button-file\",\n            type: \"file\",\n            multiple: true,\n            on: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"contained-button-file\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              component: \"span\",\n              children: \"Upload\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        margin: '2rem 0',\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          size: \"large\",\n          type: \"submit\",\n          children: \"Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"error\",\n          size: \"large\",\n          onClick: handleClearForm,\n          children: \"Clear\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n};\n\n_s(FormAddPlant, \"uFfwnJelt+wAw3u2/obVYDBh8r4=\", false, function () {\n  return [useDispatch];\n});\n\n_c = FormAddPlant;\nexport default FormAddPlant;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormAddPlant\");","map":{"version":3,"sources":["/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/FormAddPlant.js"],"names":["React","useState","useEffect","useDispatch","useSelector","createNewPlant","Button","Typography","Paper","Box","Input","InputLabel","Select","MenuItem","FormConfirmAddPlant","plantCategories","sizes","CHARACTER_LIMIT","blankState","name","category","quantity","size","description","price","FormAddPlant","e","localStorageData","JSON","parse","localStorage","getItem","plantInfo","setPlantInfo","formHasAllRequiredFields","setFormHasAllRequiredFields","inputOfNumberValid","setInputOfNumberValid","formConfirmVisible","setFormConfirmVisible","dispatch","console","log","setItem","stringify","handleInputChange","event","newObj","isNaN","parseInt","target","value","handlePreSubmit","preventDefault","submitValidation","handleSubmit","handleClearForm","result","trim","map","indexOf","maxLength","display"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {useState, useEffect} from 'react'; \nimport { useDispatch, useSelector } from 'react-redux'; \n// Redux store functions\nimport { createNewPlant} from '../../store/plants';\n// Material UI Section \nimport { Button, Typography, Paper, Box, Input, InputLabel, Select, MenuItem} from '@mui/material';\n// Component Imports\nimport FormConfirmAddPlant from './FormConfirmAddPlant'\n// Other imports \nimport plantCategories from '../../lists/plantCategories';\nimport sizes from '../../constants/sizes'; \nimport {CHARACTER_LIMIT} from '../../constants/limits'\nlet blankState = {name: \"\", category: \"\", quantity: 0, size: \"\", description: \"\", price: 0}\nconst FormAddPlant = (e) => {\n    // Component State section \n    let localStorageData = JSON.parse(localStorage.getItem('plantInfo')) || blankState; \n    const [plantInfo, setPlantInfo] = useState(localStorageData);\n    const [formHasAllRequiredFields, setFormHasAllRequiredFields] = useState(true); \n    const [inputOfNumberValid, setInputOfNumberValid] = useState(true); \n    const [formConfirmVisible, setFormConfirmVisible] = useState(false); \n    const dispatch = useDispatch()\n    console.log(plantInfo)\n\n    useEffect(()=>{\n        localStorage.setItem('plantInfo', JSON.stringify(plantInfo))\n    })\n    function handleInputChange(event){\n        let newObj = {}; \n        if (!isNaN(parseInt(event.target.value))){\n            newObj[event.target.name] = parseInt(event.target.value);\n        }else{\n            newObj[event.target.name] = event.target.value;\n        }       \n        setPlantInfo({\n            ...plantInfo, \n            ...newObj\n        })\n    }\n\n    function handlePreSubmit(e){\n        // Prevent postback \n        e.preventDefault(); \n        if(submitValidation()){\n            setFormConfirmVisible(true); \n        }\n    }\n    function handleSubmit(e){\n        dispatch(createNewPlant(plantInfo));\n        setFormConfirmVisible(false); \n\n    }\n\n    function handleClearForm(){\n        setPlantInfo(blankState)\n    }\n\n    function submitValidation(){\n        let result = true; \n        if(!(plantInfo.name.trim() !== \"\" && plantInfo.category.trim() !== \"\" && plantInfo.quantity !== 0 && plantInfo.size.trim() !== \"\" && plantInfo.description.trim()  !== \"\" && plantInfo.price !== 0)){\n            result = false; \n            setFormHasAllRequiredFields(false);\n        } else if (isNaN(parseInt(plantInfo.quantity)) || parseInt(plantInfo.quantity) < 0){\n            result = false; \n            setInputOfNumberValid(false);\n            setFormHasAllRequiredFields(true);\n        } else if (parseInt(plantInfo.price) < 0){\n            result = false; \n            setInputOfNumberValid(false);\n            setFormHasAllRequiredFields(true);\n        } else {\n            setFormHasAllRequiredFields(true);\n            setInputOfNumberValid(true);\n            return result; \n        }\n    }\n    \n    return (\n        <Paper>\n            {formConfirmVisible ? <FormConfirmAddPlant plantInfo={plantInfo} setFormConfirmVisible={setFormConfirmVisible} handleSubmit={handleSubmit}/> :\n            <form autoComplete=\"off\" noValidate onSubmit={(e) => handlePreSubmit(e)}>\n                <Box>\n                    <Typography>Describe the new member!</Typography>\n                </Box>\n                <Box>\n                    {!formHasAllRequiredFields && <Typography color=\"error\">* All fields are required.</Typography>}\n                    {!inputOfNumberValid && <Typography color=\"error\">* Quantity or Price is not a valid number.</Typography>}\n                </Box>\n                <Box>\n                    <Box>\n                        <InputLabel>Name</InputLabel>\n                        <Input name=\"name\" type=\"text\" value={plantInfo.name} onChange={handleInputChange}></Input>\n                    </Box>\n                    <Box>\n                        <InputLabel>Category</InputLabel>\n                        <Select label=\"Category\" name=\"category\" value={plantInfo.category} onChange={handleInputChange}>\n                            <MenuItem value=\"\"> -- </MenuItem>\n                            {\n                                plantCategories.map(category => <MenuItem key={plantCategories.indexOf(category)} value={category}>{category}</MenuItem>)\n                            }\n                        </Select>\n                    </Box>\n                    <Box>\n                        <InputLabel>Quantity</InputLabel>\n                        <Input name=\"quantity\" type=\"number\" value={plantInfo.quantity} onChange={handleInputChange}></Input>\n                    </Box>\n                    <Box>\n                        <InputLabel>Size</InputLabel>\n                        <Select label=\"Size\" name=\"size\" value={plantInfo.size} onChange={handleInputChange}>\n                            <MenuItem value=\"\"> -- </MenuItem>\n                            {\n                                sizes.map(size => <MenuItem key={sizes.indexOf(size)} value={size}>{size}</MenuItem>)\n                            }\n                        </Select>\n                    </Box>\n                    <Box>\n                        <InputLabel>Description</InputLabel>\n                        <Input name=\"description\" \n                               type=\"text\" \n                               multiline\n                               maxRows={4} \n                               fullWidth \n                               inputProps={{ maxLength: CHARACTER_LIMIT}}\n                               value={plantInfo.description}\n                               onChange={handleInputChange}></Input>\n                    </Box>\n                    <Box>\n                        <InputLabel>Price</InputLabel>\n                        $<Input name=\"price\" type=\"number\" value={plantInfo.price} onChange={handleInputChange}></Input>\n                    </Box>\n                    <Box> \n                        <InputLabel>Image(s)</InputLabel>\n                            <input\n                                style={{ display: \"none\" }}\n                                name=\"selectedFiles\"\n                                id=\"contained-button-file\"\n                                type=\"file\"\n                                multiple \n                                on\n                                />\n                            <label htmlFor=\"contained-button-file\">\n                                <Button variant=\"contained\" component=\"span\">\n                                    Upload\n                                </Button>\n                            </label>\n                    </Box>\n                </Box>\n                <Box margin={'2rem 0'}>\n                    <Button variant=\"contained\" size=\"large\" type=\"submit\">Add</Button>\n                    <Button variant=\"contained\" color=\"error\" size=\"large\" onClick={handleClearForm}>Clear</Button>\n                </Box>\n            </form>}\n        </Paper>\n    )\n}\n\nexport default FormAddPlant;"]},"metadata":{},"sourceType":"module"}