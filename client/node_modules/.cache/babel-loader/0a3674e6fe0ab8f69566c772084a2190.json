{"ast":null,"code":"var _jsxFileName = \"/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/PlantsContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Typography, ListItem, Badge, Box, Paper, Avatar } from '@mui/material';\nimport PreviewIcon from '@mui/icons-material/Preview';\nimport PlantListItem from '../Plants/PlantListItem';\nimport { SelectAllPlants, getGenusSections } from '../../store/plantsSlice';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getPlantsStatus } from '../../store/plantsSlice';\nimport LoadingSpinner from '../Common/LoadingSpinner';\nimport ErrorMessage from '../Common/ErrorMessage';\nimport PlantSection from './PlantSection';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst PlantsContainer = _ref => {\n  _s();\n\n  let {\n    searchedString\n  } = _ref;\n  const plantsStatus = useSelector(getPlantsStatus);\n  const genusSections = useSelector(getGenusSections);\n  const plantList = useSelector(SelectAllPlants);\n  const [filteredList, setFilteredList] = useState([]);\n  useEffect(() => {\n    let list = plantList.filter(item => item.name.toUpperCase().includes(searchedString.toUpperCase()));\n    setFilteredList(list);\n  }, [searchedString]);\n\n  if (plantsStatus == 'loading') {\n    return /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 16\n    }, this);\n  }\n\n  if (plantsStatus == 'failed') {\n    return /*#__PURE__*/_jsxDEV(ErrorMessage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 16\n    }, this);\n  }\n\n  if (searchedString.length == 0) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: genusSections.map(section => /*#__PURE__*/_jsxDEV(Box, {\n        sx: {},\n        children: [/*#__PURE__*/_jsxDEV(Avatar, {\n          sx: {\n            bgcolor: '#262626',\n            color: 'white',\n            fontSize: '.7rem'\n          },\n          children: section\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 21\n        }, this), plantList.map(plant => {\n          if (plant.genus == section) return /*#__PURE__*/_jsxDEV(PlantSection, {\n            plantSection: plant\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 60\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 47\n      }, this))\n    }, void 0, false);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: filteredList.map(plant => /*#__PURE__*/_jsxDEV(PlantSection, {\n        plantSection: plant\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 44\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this);\n  }\n};\n\n_s(PlantsContainer, \"1U3PYFYsS4rSX40N3ydgJhIQ0mw=\", false, function () {\n  return [useSelector, useSelector, useSelector];\n});\n\n_c = PlantsContainer;\nexport default PlantsContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlantsContainer\");","map":{"version":3,"sources":["/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/PlantsContainer.js"],"names":["React","useEffect","useState","Link","Button","Typography","ListItem","Badge","Box","Paper","Avatar","PreviewIcon","PlantListItem","SelectAllPlants","getGenusSections","useSelector","useDispatch","getPlantsStatus","LoadingSpinner","ErrorMessage","PlantSection","PlantsContainer","searchedString","plantsStatus","genusSections","plantList","filteredList","setFilteredList","list","filter","item","name","toUpperCase","includes","length","map","section","bgcolor","color","fontSize","plant","genus"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,MAAT,EAAiBC,UAAjB,EAA6BC,QAA7B,EAAuCC,KAAvC,EAA8CC,GAA9C,EAAmDC,KAAnD,EAA0DC,MAA1D,QAAwE,eAAxE;AACA,OAAOC,WAAP,MAAwB,6BAAxB;AACA,OAAOC,aAAP,MAA0B,yBAA1B;AACA,SAASC,eAAT,EAA0BC,gBAA1B,QAAkD,yBAAlD;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAAQC,eAAR,QAA+B,yBAA/B;AACA,OAAOC,cAAP,MAA2B,0BAA3B;AACA,OAAOC,YAAP,MAAyB,wBAAzB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;;;AAEA,MAAMC,eAAe,GAAG,QAAsB;AAAA;;AAAA,MAArB;AAACC,IAAAA;AAAD,GAAqB;AAC1C,QAAMC,YAAY,GAAGR,WAAW,CAACE,eAAD,CAAhC;AACA,QAAMO,aAAa,GAAGT,WAAW,CAACD,gBAAD,CAAjC;AACA,QAAMW,SAAS,GAAGV,WAAW,CAACF,eAAD,CAA7B;AACA,QAAM,CAACa,YAAD,EAAeC,eAAf,IAAkCzB,QAAQ,CAAC,EAAD,CAAhD;AACAD,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI2B,IAAI,GAAGH,SAAS,CAACI,MAAV,CAAiBC,IAAI,IAAIA,IAAI,CAACC,IAAL,CAAUC,WAAV,GAAwBC,QAAxB,CAAiCX,cAAc,CAACU,WAAf,EAAjC,CAAzB,CAAX;AACAL,IAAAA,eAAe,CAACC,IAAD,CAAf;AACH,GAHQ,EAGN,CAACN,cAAD,CAHM,CAAT;;AAIA,MAAGC,YAAY,IAAI,SAAnB,EAA6B;AACzB,wBAAO,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AACD,MAAGA,YAAY,IAAI,QAAnB,EAA4B;AACxB,wBAAO,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AACD,MAAID,cAAc,CAACY,MAAf,IAAyB,CAA7B,EAAgC;AAC5B,wBACI;AAAA,gBACKV,aAAa,CAACW,GAAd,CAAkBC,OAAO,iBAAI,QAAC,GAAD;AAAK,QAAA,EAAE,EAAE,EAAT;AAAA,gCAC1B,QAAC,MAAD;AAAQ,UAAA,EAAE,EAAE;AAAEC,YAAAA,OAAO,EAAE,SAAX;AAAsBC,YAAAA,KAAK,EAAE,OAA7B;AAAsCC,YAAAA,QAAQ,EAAE;AAAhD,WAAZ;AAAA,oBAAuEH;AAAvE;AAAA;AAAA;AAAA;AAAA,gBAD0B,EAGzBX,SAAS,CAACU,GAAV,CAAcK,KAAK,IAAI;AACpB,cAAIA,KAAK,CAACC,KAAN,IAAeL,OAAnB,EAA4B,oBAAO,QAAC,YAAD;AAAc,YAAA,YAAY,EAAEI;AAA5B;AAAA;AAAA;AAAA;AAAA,kBAAP;AAC/B,SAFA,CAHyB;AAAA;AAAA;AAAA;AAAA;AAAA,cAA7B;AADL,qBADJ;AAWH,GAZD,MAYK;AACD,wBACI;AAAA,gBAEKd,YAAY,CAACS,GAAb,CAAiBK,KAAK,iBAAI,QAAC,YAAD;AAAc,QAAA,YAAY,EAAEA;AAA5B;AAAA;AAAA;AAAA;AAAA,cAA1B;AAFL;AAAA;AAAA;AAAA;AAAA,YADJ;AAMH;AAEJ,CApCD;;GAAMnB,e;UACmBN,W,EACCA,W,EACJA,W;;;KAHhBM,e;AAsCN,eAAeA,eAAf","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Typography, ListItem, Badge, Box, Paper, Avatar } from '@mui/material';\nimport PreviewIcon from '@mui/icons-material/Preview';\nimport PlantListItem from '../Plants/PlantListItem';\nimport { SelectAllPlants, getGenusSections } from '../../store/plantsSlice';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {getPlantsStatus } from '../../store/plantsSlice';\nimport LoadingSpinner from '../Common/LoadingSpinner';\nimport ErrorMessage from '../Common/ErrorMessage';\nimport PlantSection from './PlantSection';\n\nconst PlantsContainer = ({searchedString}) => {\n    const plantsStatus = useSelector(getPlantsStatus);\n    const genusSections = useSelector(getGenusSections); \n    const plantList = useSelector(SelectAllPlants);\n    const [filteredList, setFilteredList] = useState([])\n    useEffect(() => {\n        let list = plantList.filter(item => item.name.toUpperCase().includes(searchedString.toUpperCase()))\n        setFilteredList(list)\n    }, [searchedString])\n    if(plantsStatus == 'loading'){\n        return(<LoadingSpinner/>)\n    }\n    if(plantsStatus == 'failed'){\n        return(<ErrorMessage />)\n    }\n    if (searchedString.length == 0) {\n        return (\n            <>\n                {genusSections.map(section => <Box sx={{ }}>\n                    <Avatar sx={{ bgcolor: '#262626', color: 'white', fontSize: '.7rem'}}>{section}</Avatar>\n                   \n                    {plantList.map(plant => {\n                        if (plant.genus == section) return <PlantSection plantSection={plant} />\n                    })}\n                </Box>)}\n            </>\n        )\n    }else{\n        return(\n            <div>\n               \n                {filteredList.map(plant => <PlantSection plantSection={plant} />)}\n            </div>\n        )\n    }\n   \n}\n\nexport default PlantsContainer;"]},"metadata":{},"sourceType":"module"}