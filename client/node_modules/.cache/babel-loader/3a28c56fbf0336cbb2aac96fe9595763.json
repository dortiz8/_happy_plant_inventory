{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport * as api from '../api/index'; //Slice \n\nconst slice = createSlice({\n  name: 'plants',\n  initialState: {\n    plants: [],\n    status: 'idle',\n    //'idel' | 'loading' | 'succeeded' | 'failed'\n    error: null\n  },\n  reducers: {\n    fetchAll: (state, action) => {\n      state.plants = action.payload;\n    },\n    createPlant: (state, action) => {\n      const newPlantList = state.plants.push(action.payload);\n      state.plants = newPlantList;\n    },\n    deleteOne: (state, action) => {\n      state.plants = state.plants.filter(plant => plant._id !== action.payload._id);\n    }\n  },\n\n  extraReducers(builder) {\n    builder.addCase(fetchAllPlants.pending, (state, action) => {\n      state.status = 'loading';\n    }).addCase(fetchAllPlants.fullfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.plants = state.plants.concat(action.payload);\n    }).addCase(fetchAllPlants.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n\n});\nexport default slice.reducer; // Actions\n\nconst {\n  fetchAll,\n  createPlant,\n  deleteOne\n} = slice.actions;\nexport const SelectAllPlants = state => state.plants.plants.data;\n_c = SelectAllPlants;\nexport const createNewPlant = plantInfo => async dispatch => {\n  try {\n    let {\n      data\n    } = await api.addNewPlant(plantInfo);\n    dispatch(createPlant({\n      data\n    }));\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const fetchAllPlants = createAsyncThunk('plants/fetchAllPlants', async () => {\n  try {\n    let {\n      data\n    } = await api.fetchAllPlants();\n    return [...data];\n  } catch (error) {}\n}); // export const fetchAllPlants = () => async (dispatch)=>{\n//     try {\n//         let {data} = await api.fetchAllPlants(); \n//         dispatch(fetchAll({data}))\n//     } catch (error) {\n//     }\n// }\n\nexport const deleteOnePlant = id => async dispatch => {\n  try {\n    let {\n      data\n    } = await api.deleteOnePlant(id);\n    dispatch(deleteOne({\n      data\n    }));\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectAllPlants\");","map":{"version":3,"sources":["/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/store/plantsSlice.js"],"names":["createAsyncThunk","createSlice","api","slice","name","initialState","plants","status","error","reducers","fetchAll","state","action","payload","createPlant","newPlantList","push","deleteOne","filter","plant","_id","extraReducers","builder","addCase","fetchAllPlants","pending","fullfilled","concat","rejected","message","reducer","actions","SelectAllPlants","data","createNewPlant","plantInfo","dispatch","addNewPlant","console","log","deleteOnePlant","id"],"mappings":"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","sourcesContent":["\nimport {createAsyncThunk, createSlice} from '@reduxjs/toolkit';\nimport * as api from '../api/index'; \n\n//Slice \n\nconst slice = createSlice({\n    name: 'plants', \n    initialState: {\n        plants: [],\n        status: 'idle', //'idel' | 'loading' | 'succeeded' | 'failed'\n        error: null\n    }, \n    reducers: {\n        fetchAll: (state, action) =>{\n            state.plants = action.payload; \n        }, \n        createPlant: (state, action) =>{\n            const newPlantList = state.plants.push(action.payload)\n            state.plants = newPlantList\n        }, \n        deleteOne: (state, action) =>{\n            state.plants  = state.plants.filter(plant => plant._id !== action.payload._id)\n           \n        }\n    }, \n    extraReducers(builder){\n        builder\n            .addCase(fetchAllPlants.pending, (state, action)=>{\n                state.status = 'loading'; \n            })\n            .addCase(fetchAllPlants.fullfilled, (state, action)=>{\n                state.status = 'succeeded'\n                state.plants = state.plants.concat(action.payload); \n            })\n            .addCase(fetchAllPlants.rejected, (state, action) => {\n                state.status = 'failed'\n                state.error = action.error.message\n            })\n    }\n}); \n\n\nexport default slice.reducer; \n\n// Actions\nconst {fetchAll, createPlant, deleteOne} = slice.actions;\n\nexport const SelectAllPlants = (state) => state.plants.plants.data\n\nexport const createNewPlant = (plantInfo) => async (dispatch)=>{\n    try{\n        let {data} = await api.addNewPlant(plantInfo); \n        dispatch(createPlant({data}))\n    }catch(error){\n        console.log(error)\n    }\n}; \n\nexport const fetchAllPlants = createAsyncThunk('plants/fetchAllPlants', async () =>{\n    try {\n        let { data } = await api.fetchAllPlants();\n        return [...data]\n    } catch (error) {\n\n    }\n})\n\n// export const fetchAllPlants = () => async (dispatch)=>{\n//     try {\n//         let {data} = await api.fetchAllPlants(); \n//         dispatch(fetchAll({data}))\n//     } catch (error) {\n        \n//     }\n// }\n\n\nexport const deleteOnePlant = (id) => async (dispatch) =>{\n    try {\n        let {data} = await api.deleteOnePlant(id);\n        dispatch(deleteOne({data}))\n    } catch (error) {\n        console.log(error)\n    }\n}"]},"metadata":{},"sourceType":"module"}