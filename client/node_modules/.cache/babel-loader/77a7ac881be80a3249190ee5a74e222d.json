{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport * as api from '../api/index'; //Slice \n\nconst slice = createSlice({\n  name: 'plants',\n  initialState: {\n    plants: [],\n    status: 'idle',\n    //'idel' | 'loading' | 'succeeded' | 'failed'\n    error: null\n  },\n  reducers: {},\n\n  extraReducers(builder) {\n    builder.addCase(fetchAllPlants.pending, (state, action) => {\n      state.status = 'loading';\n      console.log('loading');\n    }).addCase(fetchAllPlants.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      let sortedPlants = action.payload.sort((a, b) => a.category - a.category);\n      state.plants = sortedPlants;\n    }).addCase(fetchAllPlants.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(createNewPlant.pending, (state, action) => {\n      state.status = 'loading';\n    }).addCase(createNewPlant.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.plants.push(action.payload);\n    }).addCase(createNewPlant.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(deletePlant.pending, (state, action) => {\n      state.status = 'loading';\n    }).addCase(deletePlant.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      console.log(action.payload);\n      let newList = state.plants.filter(plant => plant._id !== action.payload);\n      state.plants = newList;\n    }).addCase(deletePlant.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(editPlant.pending, (state, action) => {\n      state.status = 'loading';\n    }).addCase(editPlant.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      let newList = state.plants.filter(plant => plant._id !== action.payload._id);\n      newList.push(action.payload);\n      console.log(newList);\n      state.plants = newList;\n    }).addCase(editPlant.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n\n});\nexport default slice.reducer; // Actions\n\nconst {\n  fetchAll,\n  createPlant,\n  deleteOne\n} = slice.actions;\nexport const SelectAllPlants = state => state.plants.plants;\n_c = SelectAllPlants;\nexport const getPlantsStatus = state => state.plants.status;\nexport const getPlantsError = state => state.plants.error;\nexport const createNewPlant = createAsyncThunk('plants/createNewPlant', async plantInfo => {\n  try {\n    let {\n      data\n    } = await api.createNewPlant(plantInfo);\n    return data;\n  } catch (error) {}\n});\nexport const fetchAllPlants = createAsyncThunk('plants/fetchAllPlants', async () => {\n  try {\n    let {\n      data\n    } = await api.fetchAllPlants();\n    return data;\n  } catch (error) {}\n});\nexport const deletePlant = createAsyncThunk('plants/deletePlant', async id => {\n  try {\n    api.deleteOnePlant(id);\n    return id;\n  } catch (error) {}\n});\nexport const editPlant = createAsyncThunk('plants/editPlant', async plantInfo => {\n  try {\n    api.editPlant(plantInfo);\n    return plantInfo;\n  } catch (error) {}\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectAllPlants\");","map":{"version":3,"sources":["/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/store/plantsSlice.js"],"names":["createAsyncThunk","createSlice","api","slice","name","initialState","plants","status","error","reducers","extraReducers","builder","addCase","fetchAllPlants","pending","state","action","console","log","fulfilled","sortedPlants","payload","sort","a","b","category","rejected","message","createNewPlant","push","deletePlant","newList","filter","plant","_id","editPlant","reducer","fetchAll","createPlant","deleteOne","actions","SelectAllPlants","getPlantsStatus","getPlantsError","plantInfo","data","id","deleteOnePlant"],"mappings":"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","sourcesContent":["\nimport {createAsyncThunk, createSlice} from '@reduxjs/toolkit';\nimport * as api from '../api/index'; \n\n//Slice \n\nconst slice = createSlice({\n    name: 'plants', \n    initialState: {\n        plants: [],\n        status: 'idle', //'idel' | 'loading' | 'succeeded' | 'failed'\n        error: null\n    }, \n    reducers: {\n\n    }, \n    extraReducers(builder){\n        builder\n            .addCase(fetchAllPlants.pending, (state, action)=>{\n                state.status = 'loading'; \n                console.log('loading')\n            })\n            .addCase(fetchAllPlants.fulfilled, (state, action)=>{\n                state.status = 'succeeded'\n                let sortedPlants = action.payload.sort((a,b)=> a.category - a.category)\n                state.plants = sortedPlants\n            })\n            .addCase(fetchAllPlants.rejected, (state, action) => {\n                state.status = 'failed'\n                state.error = action.error.message\n            })\n            .addCase(createNewPlant.pending, (state, action) => {\n                state.status = 'loading';\n            })\n            .addCase(createNewPlant.fulfilled, (state, action) => {\n                state.status = 'succeeded'\n                state.plants.push(action.payload)\n            })\n            .addCase(createNewPlant.rejected, (state, action) => {\n                state.status = 'failed'\n                state.error = action.error.message\n            })\n            .addCase(deletePlant.pending, (state, action) => {\n                state.status = 'loading';\n            })\n            .addCase(deletePlant.fulfilled, (state, action) => {\n                state.status = 'succeeded'\n                console.log(action.payload)\n                let newList = state.plants.filter(plant => plant._id !== action.payload); \n                state.plants =  newList\n            })\n            .addCase(deletePlant.rejected, (state, action) => {\n                state.status = 'failed'\n                state.error = action.error.message\n            })\n            .addCase(editPlant.pending, (state, action) => {\n                state.status = 'loading';\n            })\n            .addCase(editPlant.fulfilled, (state, action) => {\n                state.status = 'succeeded'\n                let newList = state.plants.filter(plant => plant._id !== action.payload._id);\n                newList.push(action.payload); \n                console.log(newList)\n                state.plants = newList; \n            })\n            .addCase(editPlant.rejected, (state, action) => {\n                state.status = 'failed'\n                state.error = action.error.message\n            })\n            \n    }\n}); \n\n\nexport default slice.reducer; \n\n// Actions\nconst {fetchAll, createPlant, deleteOne} = slice.actions;\n\nexport const SelectAllPlants = (state) => state.plants.plants;\nexport const getPlantsStatus = (state) => state.plants.status;\nexport const getPlantsError = (state) => state.plants.error;\n\nexport const createNewPlant = createAsyncThunk('plants/createNewPlant', async (plantInfo) =>{\n    try {\n        let {data} = await api.createNewPlant(plantInfo); \n        return data; \n    } catch (error) {\n        \n    }\n})\nexport const fetchAllPlants = createAsyncThunk('plants/fetchAllPlants', async () =>{\n    try {\n        let { data } = await api.fetchAllPlants();\n        return data\n    } catch (error) {\n\n    }\n})\nexport const deletePlant = createAsyncThunk('plants/deletePlant', async(id)=>{\n    try {\n        api.deleteOnePlant(id); \n        return id; \n    } catch (error) {\n        \n    }\n})\nexport const editPlant = createAsyncThunk('plants/editPlant', async(plantInfo) =>{\n    try {\n        api.editPlant(plantInfo); \n        return plantInfo\n    } catch (error) {\n        \n    }\n})\n"]},"metadata":{},"sourceType":"module"}