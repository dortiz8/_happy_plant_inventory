{"ast":null,"code":"const toBase64 = file => new Promise((resolve, reject) => {\n  const reader = new FileReader();\n  reader.readAsDataURL(file);\n\n  reader.onload = () => resolve(reader.result);\n\n  reader.onerror = error => reject(error);\n});\n\nexport async function handleFileSelection(event, object) {\n  let files = event.target.files;\n  let tempArray = [];\n\n  if (files) {\n    for (let i = 0; i < files.length; i++) {\n      let selectedFileObj = new selectedFile(files[i].name, files[i].type, files[i].size, await toBase64(files[i]));\n      tempArray.push(selectedFileObj);\n    }\n\n    ;\n  }\n\n  setPlantDetails({ ...object,\n    selectedFiles: tempArray\n  });\n}","map":{"version":3,"sources":["/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/services/fileSelection.js"],"names":["toBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","handleFileSelection","event","object","files","target","tempArray","i","length","selectedFileObj","selectedFile","name","type","size","push","setPlantDetails","selectedFiles"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,IAAI,IAAI,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtD,QAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;AACAD,EAAAA,MAAM,CAACE,aAAP,CAAqBN,IAArB;;AACAI,EAAAA,MAAM,CAACG,MAAP,GAAgB,MAAML,OAAO,CAACE,MAAM,CAACI,MAAR,CAA7B;;AACAJ,EAAAA,MAAM,CAACK,OAAP,GAAiBC,KAAK,IAAIP,MAAM,CAACO,KAAD,CAAhC;AACH,CALwB,CAAzB;;AAOA,OAAO,eAAeC,mBAAf,CAAmCC,KAAnC,EAA0CC,MAA1C,EAAkD;AACrD,MAAIC,KAAK,GAAGF,KAAK,CAACG,MAAN,CAAaD,KAAzB;AACA,MAAIE,SAAS,GAAG,EAAhB;;AAEA,MAAIF,KAAJ,EAAW;AACP,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAAK,CAACI,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnC,UAAIE,eAAe,GAAG,IAAIC,YAAJ,CAAiBN,KAAK,CAACG,CAAD,CAAL,CAASI,IAA1B,EAAgCP,KAAK,CAACG,CAAD,CAAL,CAASK,IAAzC,EAA+CR,KAAK,CAACG,CAAD,CAAL,CAASM,IAAxD,EAA8D,MAAMxB,QAAQ,CAACe,KAAK,CAACG,CAAD,CAAN,CAA5E,CAAtB;AACAD,MAAAA,SAAS,CAACQ,IAAV,CAAeL,eAAf;AACH;;AAAA;AACJ;;AACDM,EAAAA,eAAe,CAAC,EAAE,GAAGZ,MAAL;AAAaa,IAAAA,aAAa,EAAEV;AAA5B,GAAD,CAAf;AACH","sourcesContent":["const toBase64 = file => new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = error => reject(error);\n});\n\nexport async function handleFileSelection(event, object) {\n    let files = event.target.files;\n    let tempArray = [];\n\n    if (files) {\n        for (let i = 0; i < files.length; i++) {\n            let selectedFileObj = new selectedFile(files[i].name, files[i].type, files[i].size, await toBase64(files[i]));\n            tempArray.push(selectedFileObj);\n        };\n    }\n    setPlantDetails({ ...object, selectedFiles: tempArray })\n}"]},"metadata":{},"sourceType":"module"}