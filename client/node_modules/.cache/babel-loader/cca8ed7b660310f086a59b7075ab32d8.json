{"ast":null,"code":"export class PlantObjectValidator {\n  constructor(plantInfo) {\n    this.plantInfo = plantInfo;\n    this.hasAllRequiredFields = true;\n    this.inputNumberIsValid = true;\n  }\n\n  validate() {\n    if (!(this.plantInfo.name.trim() !== \"\" && this.plantInfo.category.trim() !== \"\" && this.plantInfo.quantity !== 0 && this.plantInfo.size.trim() !== \"\" && this.plantInfo.description.trim() !== \"\" && this.plantInfo.price !== 0 && this.plantInfo.selectedFiles.length !== 0)) {\n      this.hasAllRequiredFields = false;\n    } else if (isNaN(parseInt(this.plantInfo.quantity)) || parseInt(this.plantInfo.quantity) < 0) {\n      this.inputNumberIsValid = false;\n    } else if (isNaN(parseInt(this.plantInfo.price)) || parseInt(this.plantInfo.price) < 0) {\n      this.inputNumberIsValid = false;\n    } else {\n      return true;\n    }\n\n    return this.hasAllRequiredFields && this.inputNumberIsValid;\n    ;\n  }\n\n  validatePlantDetailsObject() {\n    let result = true;\n\n    if (plantDetails.description == \"\" || plantDetails.price == 0 || plantDetails.type == \"\" || plantDetails.selectedFiles.length == 0) {\n      // Fill out entire form\n      console.log('form not complete');\n      setFormCompleted(false);\n      result = false;\n    } else if (isNaN(plantDetails.price) || parseInt(plantDetails.price) < 0) {\n      // price cannot be non-numeric or negative\n      setIsNumericOrPositive(false);\n      result = false;\n    } else {\n      setFormCompleted(true);\n      setIsNumericOrPositive(true);\n    }\n\n    return result;\n  }\n\n}","map":{"version":3,"sources":["/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/services/validation.js"],"names":["PlantObjectValidator","constructor","plantInfo","hasAllRequiredFields","inputNumberIsValid","validate","name","trim","category","quantity","size","description","price","selectedFiles","length","isNaN","parseInt","validatePlantDetailsObject","result","plantDetails","type","console","log","setFormCompleted","setIsNumericOrPositive"],"mappings":"AAAA,OAAO,MAAMA,oBAAN,CAA0B;AAC7BC,EAAAA,WAAW,CAACC,SAAD,EAAW;AAClB,SAAKA,SAAL,GAAiBA,SAAjB;AACA,SAAKC,oBAAL,GAA4B,IAA5B;AACA,SAAKC,kBAAL,GAA0B,IAA1B;AACH;;AAEDC,EAAAA,QAAQ,GAAE;AACN,QAAI,EAAE,KAAKH,SAAL,CAAeI,IAAf,CAAoBC,IAApB,OAA+B,EAA/B,IAAqC,KAAKL,SAAL,CAAeM,QAAf,CAAwBD,IAAxB,OAAmC,EAAxE,IAA8E,KAAKL,SAAL,CAAeO,QAAf,KAA4B,CAA1G,IAA+G,KAAKP,SAAL,CAAeQ,IAAf,CAAoBH,IAApB,OAA+B,EAA9I,IAAoJ,KAAKL,SAAL,CAAeS,WAAf,CAA2BJ,IAA3B,OAAsC,EAA1L,IAAgM,KAAKL,SAAL,CAAeU,KAAf,KAAyB,CAAzN,IAA8N,KAAKV,SAAL,CAAeW,aAAf,CAA6BC,MAA7B,KAAwC,CAAxQ,CAAJ,EAAgR;AAC5Q,WAAKX,oBAAL,GAA4B,KAA5B;AACH,KAFD,MAEO,IAAIY,KAAK,CAACC,QAAQ,CAAC,KAAKd,SAAL,CAAeO,QAAhB,CAAT,CAAL,IAA4CO,QAAQ,CAAC,KAAKd,SAAL,CAAeO,QAAhB,CAAR,GAAoC,CAApF,EAAuF;AAC1F,WAAKL,kBAAL,GAA0B,KAA1B;AACH,KAFM,MAEA,IAAIW,KAAK,CAACC,QAAQ,CAAC,KAAKd,SAAL,CAAeU,KAAhB,CAAT,CAAL,IAAyCI,QAAQ,CAAC,KAAKd,SAAL,CAAeU,KAAhB,CAAR,GAAiC,CAA9E,EAAiF;AACpF,WAAKR,kBAAL,GAA0B,KAA1B;AACH,KAFM,MAEA;AACH,aAAO,IAAP;AACH;;AACD,WAAO,KAAKD,oBAAL,IAA6B,KAAKC,kBAAzC;AAA6D;AAChE;;AACDa,EAAAA,0BAA0B,GAAG;AACzB,QAAIC,MAAM,GAAG,IAAb;;AACA,QAAIC,YAAY,CAACR,WAAb,IAA4B,EAA5B,IAAkCQ,YAAY,CAACP,KAAb,IAAsB,CAAxD,IAA6DO,YAAY,CAACC,IAAb,IAAqB,EAAlF,IAAwFD,YAAY,CAACN,aAAb,CAA2BC,MAA3B,IAAqC,CAAjI,EAAoI;AAChI;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAC,MAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACAL,MAAAA,MAAM,GAAG,KAAT;AACH,KALD,MAKO,IAAIH,KAAK,CAACI,YAAY,CAACP,KAAd,CAAL,IAA6BI,QAAQ,CAACG,YAAY,CAACP,KAAd,CAAR,GAA+B,CAAhE,EAAmE;AACtE;AACAY,MAAAA,sBAAsB,CAAC,KAAD,CAAtB;AACAN,MAAAA,MAAM,GAAG,KAAT;AACH,KAJM,MAIA;AACHK,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACAC,MAAAA,sBAAsB,CAAC,IAAD,CAAtB;AACH;;AACD,WAAON,MAAP;AACH;;AAnC4B","sourcesContent":["export class PlantObjectValidator{\n    constructor(plantInfo){\n        this.plantInfo = plantInfo; \n        this.hasAllRequiredFields = true; \n        this.inputNumberIsValid = true; \n    }\n    \n    validate(){ \n        if (!(this.plantInfo.name.trim() !== \"\" && this.plantInfo.category.trim() !== \"\" && this.plantInfo.quantity !== 0 && this.plantInfo.size.trim() !== \"\" && this.plantInfo.description.trim() !== \"\" && this.plantInfo.price !== 0 && this.plantInfo.selectedFiles.length !== 0)) {\n            this.hasAllRequiredFields = false; \n        } else if (isNaN(parseInt(this.plantInfo.quantity)) || parseInt(this.plantInfo.quantity) < 0) {\n            this.inputNumberIsValid = false;     \n        } else if (isNaN(parseInt(this.plantInfo.price)) || parseInt(this.plantInfo.price) < 0) {\n            this.inputNumberIsValid = false;\n        } else {\n            return true;\n        }\n        return this.hasAllRequiredFields && this.inputNumberIsValid; ;\n    } \n    validatePlantDetailsObject() {\n        let result = true;\n        if (plantDetails.description == \"\" || plantDetails.price == 0 || plantDetails.type == \"\" || plantDetails.selectedFiles.length == 0) {\n            // Fill out entire form\n            console.log('form not complete')\n            setFormCompleted(false);\n            result = false\n        } else if (isNaN(plantDetails.price) || parseInt(plantDetails.price) < 0) {\n            // price cannot be non-numeric or negative\n            setIsNumericOrPositive(false);\n            result = false\n        } else {\n            setFormCompleted(true);\n            setIsNumericOrPositive(true);\n        }\n        return result;\n    }\n}"]},"metadata":{},"sourceType":"module"}