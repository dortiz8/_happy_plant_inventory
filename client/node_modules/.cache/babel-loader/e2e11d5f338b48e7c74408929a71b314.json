{"ast":null,"code":"var _jsxFileName = \"/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/FormAddPlant.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux'; // Redux store functions\n\nimport { createNewPlant } from '../../store/plants'; // Material UI Section \n\nimport { Button, Typography, Paper, Box, Input, InputLabel, Select, MenuItem, List, ListItem } from '@mui/material';\nimport CloseRounded from '@mui/icons-material/CloseRounded'; // Component Imports\n\nimport FormConfirmAddPlant from './FormConfirmAddPlant';\nimport FormConfirmClear from './FormConfirmClear'; // Other imports \n\nimport plantCategories from '../../lists/plantCategories';\nimport sizes from '../../constants/sizes';\nimport { CHARACTER_LIMIT } from '../../constants/limits';\nimport selectedFile from '../../models/fileClass';\nimport { useNavigate } from 'react-router';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet blankState = {\n  name: \"\",\n  category: \"\",\n  quantity: 0,\n  size: \"\",\n  description: \"\",\n  price: 0,\n  selectedFiles: []\n};\n\nconst FormAddPlant = e => {\n  _s();\n\n  // Component State section \n  let localStorageData = JSON.parse(localStorage.getItem('plantInfo')) || blankState;\n  const [plantInfo, setPlantInfo] = useState(localStorageData);\n  const [formHasAllRequiredFields, setFormHasAllRequiredFields] = useState(true);\n  const [inputOfNumberValid, setInputOfNumberValid] = useState(true);\n  const [formConfirmVisible, setFormConfirmVisible] = useState(false);\n  const [formConfirmClearVisible, setFormConfirmClearVisible] = useState(false);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  useEffect(() => {\n    localStorage.setItem('plantInfo', JSON.stringify(plantInfo));\n  });\n\n  function handleInputChange(event) {\n    let newObj = {};\n\n    if (!isNaN(parseInt(event.target.value))) {\n      newObj[event.target.name] = parseInt(event.target.value);\n    } else {\n      newObj[event.target.name] = event.target.value;\n    }\n\n    setPlantInfo({ ...plantInfo,\n      ...newObj\n    });\n  }\n\n  ;\n\n  const toBase64 = file => new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n\n    reader.onload = () => resolve(reader.result);\n\n    reader.onerror = error => reject(error);\n  });\n\n  async function handleFileSelection(event) {\n    let files = event.target.files;\n    let tempArray = [];\n\n    if (files) {\n      for (let i = 0; i < files.length; i++) {\n        let selectedFileObj = new selectedFile(files[i].name, files[i].type, files[i].size, await toBase64(files[i]));\n        tempArray.push(selectedFileObj);\n      }\n\n      ;\n      setPlantInfo({ ...plantInfo,\n        selectedFiles: tempArray\n      });\n    }\n  }\n\n  function DeleteFileFromList(event) {\n    let filteredList = plantInfo.selectedFiles.filter(file => file.name !== event.currentTarget.value);\n    setPlantInfo({ ...plantInfo,\n      selectedFiles: [...filteredList]\n    });\n  }\n\n  function handlePreSubmit(e) {\n    // Prevent postback \n    e.preventDefault();\n\n    if (submitValidation()) {\n      setFormConfirmVisible(true);\n    }\n  }\n\n  function handleSubmit(e) {\n    dispatch(createNewPlant(plantInfo));\n    setFormConfirmVisible(false);\n    setPlantInfo();\n    navigate('/plants');\n  }\n\n  function handleClearForm() {\n    setPlantInfo(blankState);\n  }\n\n  function submitValidation() {\n    let result = true;\n\n    if (!(plantInfo.name.trim() !== \"\" && plantInfo.category.trim() !== \"\" && plantInfo.quantity !== 0 && plantInfo.size.trim() !== \"\" && plantInfo.description.trim() !== \"\" && plantInfo.price !== 0 && plantInfo.selectedFiles.length !== 0)) {\n      result = false;\n      setFormHasAllRequiredFields(false);\n    } else if (isNaN(parseInt(plantInfo.quantity)) || parseInt(plantInfo.quantity) < 0) {\n      result = false;\n      setInputOfNumberValid(false);\n      setFormHasAllRequiredFields(true);\n    } else if (parseInt(plantInfo.price) < 0) {\n      result = false;\n      setInputOfNumberValid(false);\n      setFormHasAllRequiredFields(true);\n    } else {\n      setFormHasAllRequiredFields(true);\n      setInputOfNumberValid(true);\n      return result;\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    children: [formConfirmVisible && /*#__PURE__*/_jsxDEV(FormConfirmAddPlant, {\n      plantInfo: plantInfo,\n      setFormConfirmVisible: setFormConfirmVisible,\n      handleSubmit: handleSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 36\n    }, this), formConfirmClearVisible && /*#__PURE__*/_jsxDEV(FormConfirmClear, {\n      handleClearForm: handleClearForm,\n      setFormConfirmClearVisible: setFormConfirmClearVisible\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 41\n    }, this), formConfirmVisible || formConfirmClearVisible ? /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false) : /*#__PURE__*/_jsxDEV(\"form\", {\n      autoComplete: \"off\",\n      noValidate: true,\n      onSubmit: e => handlePreSubmit(e),\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          children: \"Describe the new member!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        children: [!formHasAllRequiredFields && /*#__PURE__*/_jsxDEV(Typography, {\n          color: \"error\",\n          children: \"* All fields and images are required.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 55\n        }, this), !inputOfNumberValid && /*#__PURE__*/_jsxDEV(Typography, {\n          color: \"error\",\n          children: \"* Quantity or Price is not a valid number.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 49\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            name: \"name\",\n            type: \"text\",\n            value: plantInfo.name,\n            onChange: handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            children: \"Category\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            label: \"Category\",\n            name: \"category\",\n            value: plantInfo.category,\n            onChange: handleInputChange,\n            children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n              value: \"\",\n              children: \" -- \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 33\n            }, this), plantCategories.map(category => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: category,\n              children: category\n            }, plantCategories.indexOf(category), false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 69\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            children: \"Quantity\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            name: \"quantity\",\n            type: \"number\",\n            value: plantInfo.quantity,\n            onChange: handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            children: \"Size\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            label: \"Size\",\n            name: \"size\",\n            value: plantInfo.size,\n            onChange: handleInputChange,\n            children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n              value: \"\",\n              children: \" -- \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 33\n            }, this), sizes.map(size => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: size,\n              children: size\n            }, sizes.indexOf(size), false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 55\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            children: \"Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            name: \"description\",\n            type: \"text\",\n            multiline: true,\n            maxRows: 4,\n            fullWidth: true,\n            inputProps: {\n              maxLength: CHARACTER_LIMIT\n            },\n            value: plantInfo.description,\n            onChange: handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            children: \"Price\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 29\n          }, this), \"$\", /*#__PURE__*/_jsxDEV(Input, {\n            name: \"price\",\n            type: \"number\",\n            value: plantInfo.price,\n            onChange: handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 30\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            children: \"Image(s)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            style: {\n              display: \"none\"\n            },\n            name: \"selectedFiles\",\n            id: \"contained-button-file\",\n            type: \"file\",\n            multiple: true,\n            onChange: handleFileSelection\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"contained-button-file\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              component: \"span\",\n              children: \"Upload\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            children: /*#__PURE__*/_jsxDEV(List, {\n              children: plantInfo.selectedFiles.map(file => /*#__PURE__*/_jsxDEV(ListItem, {\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"subtitle2\",\n                  children: `${file.name.slice(0, 10)}...${file.name.slice(file.name.length - 4, file.name.length)}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 179,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  value: file.name,\n                  onClick: DeleteFileFromList,\n                  children: /*#__PURE__*/_jsxDEV(CloseRounded, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 184,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 180,\n                  columnNumber: 41\n                }, this)]\n              }, plantInfo.selectedFiles.indexOf(file), true, {\n                fileName: _jsxFileName,\n                lineNumber: 178,\n                columnNumber: 74\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        margin: '2rem 0',\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          size: \"large\",\n          type: \"submit\",\n          children: \"Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"error\",\n          size: \"large\",\n          onClick: () => setFormConfirmClearVisible(true),\n          children: \"Clear\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 9\n  }, this);\n};\n\n_s(FormAddPlant, \"bAb7ABz/3L81GhQdk8zjozAe798=\", false, function () {\n  return [useDispatch, useNavigate];\n});\n\n_c = FormAddPlant;\nexport default FormAddPlant;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormAddPlant\");","map":{"version":3,"sources":["/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/FormAddPlant.js"],"names":["React","useState","useEffect","useDispatch","useSelector","createNewPlant","Button","Typography","Paper","Box","Input","InputLabel","Select","MenuItem","List","ListItem","CloseRounded","FormConfirmAddPlant","FormConfirmClear","plantCategories","sizes","CHARACTER_LIMIT","selectedFile","useNavigate","blankState","name","category","quantity","size","description","price","selectedFiles","FormAddPlant","e","localStorageData","JSON","parse","localStorage","getItem","plantInfo","setPlantInfo","formHasAllRequiredFields","setFormHasAllRequiredFields","inputOfNumberValid","setInputOfNumberValid","formConfirmVisible","setFormConfirmVisible","formConfirmClearVisible","setFormConfirmClearVisible","dispatch","navigate","setItem","stringify","handleInputChange","event","newObj","isNaN","parseInt","target","value","toBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","handleFileSelection","files","tempArray","i","length","selectedFileObj","type","push","DeleteFileFromList","filteredList","filter","currentTarget","handlePreSubmit","preventDefault","submitValidation","handleSubmit","handleClearForm","trim","map","indexOf","maxLength","display","slice"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {useState, useEffect} from 'react'; \nimport { useDispatch, useSelector } from 'react-redux'; \n// Redux store functions\nimport { createNewPlant} from '../../store/plants';\n// Material UI Section \nimport { Button, Typography, Paper, Box, Input, InputLabel, Select, MenuItem, List, ListItem} from '@mui/material';\nimport CloseRounded from '@mui/icons-material/CloseRounded'; \n// Component Imports\nimport FormConfirmAddPlant from './FormConfirmAddPlant'; \nimport FormConfirmClear from './FormConfirmClear';\n// Other imports \nimport plantCategories from '../../lists/plantCategories';\nimport sizes from '../../constants/sizes'; \nimport {CHARACTER_LIMIT} from '../../constants/limits'; \nimport selectedFile from '../../models/fileClass'; \nimport { useNavigate } from 'react-router';\nlet blankState = {name: \"\", category: \"\", quantity: 0, size: \"\", description: \"\", price: 0, selectedFiles: []}\nconst FormAddPlant = (e) => {\n    // Component State section \n    let localStorageData = JSON.parse(localStorage.getItem('plantInfo')) || blankState; \n    const [plantInfo, setPlantInfo] = useState(localStorageData);\n    const [formHasAllRequiredFields, setFormHasAllRequiredFields] = useState(true); \n    const [inputOfNumberValid, setInputOfNumberValid] = useState(true); \n    const [formConfirmVisible, setFormConfirmVisible] = useState(false); \n    const [formConfirmClearVisible, setFormConfirmClearVisible] = useState(false); \n    const dispatch = useDispatch()\n    const navigate = useNavigate()\n\n    useEffect(()=>{\n        localStorage.setItem('plantInfo', JSON.stringify(plantInfo))\n    })\n    function handleInputChange(event){\n        let newObj = {}; \n        if (!isNaN(parseInt(event.target.value))){\n            newObj[event.target.name] = parseInt(event.target.value);\n        }else{\n            newObj[event.target.name] = event.target.value;\n        }       \n        setPlantInfo({\n            ...plantInfo, \n            ...newObj\n        })\n    }; \n    const toBase64 = file => new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = error => reject(error);\n    });\n    async function handleFileSelection(event){\n        let files = event.target.files; \n        let tempArray = []; \n\n        if(files){\n            for (let i = 0; i < files.length; i++) {\n                let selectedFileObj = new selectedFile(files[i].name, files[i].type, files[i].size, await toBase64(files[i]));\n                tempArray.push(selectedFileObj);\n            }; \n            setPlantInfo({...plantInfo, selectedFiles: tempArray})\n        }\n    }\n    function DeleteFileFromList(event){\n        let filteredList = plantInfo.selectedFiles.filter(file => file.name !== event.currentTarget.value); \n        setPlantInfo({...plantInfo, selectedFiles: [...filteredList]}); \n    }\n\n    function handlePreSubmit(e){\n        // Prevent postback \n        e.preventDefault(); \n        if(submitValidation()){\n            setFormConfirmVisible(true); \n        }\n    }\n    function handleSubmit(e){\n        dispatch(createNewPlant(plantInfo));\n        setFormConfirmVisible(false); \n        setPlantInfo()\n        navigate('/plants')\n    }\n\n    function handleClearForm(){\n        setPlantInfo(blankState)\n    }\n\n    function submitValidation(){\n        let result = true; \n        if(!(plantInfo.name.trim() !== \"\" && plantInfo.category.trim() !== \"\" && plantInfo.quantity !== 0 && plantInfo.size.trim() !== \"\" && plantInfo.description.trim()  !== \"\" && plantInfo.price !== 0 && plantInfo.selectedFiles.length !== 0)){\n            result = false; \n            setFormHasAllRequiredFields(false);\n        } else if (isNaN(parseInt(plantInfo.quantity)) || parseInt(plantInfo.quantity) < 0){\n            result = false; \n            setInputOfNumberValid(false);\n            setFormHasAllRequiredFields(true);\n        } else if (parseInt(plantInfo.price) < 0){\n            result = false; \n            setInputOfNumberValid(false);\n            setFormHasAllRequiredFields(true);\n        } else {\n            setFormHasAllRequiredFields(true);\n            setInputOfNumberValid(true);\n            return result; \n        }\n    }\n    \n    return (\n        <Paper>\n            {formConfirmVisible && <FormConfirmAddPlant plantInfo={plantInfo} setFormConfirmVisible={setFormConfirmVisible} handleSubmit={handleSubmit}/>}\n            {formConfirmClearVisible && <FormConfirmClear handleClearForm={handleClearForm} setFormConfirmClearVisible={setFormConfirmClearVisible}/>}\n            {formConfirmVisible || formConfirmClearVisible ? <></> : \n                <form autoComplete=\"off\" noValidate onSubmit={(e) => handlePreSubmit(e)}>\n                    <Box>\n                        <Typography>Describe the new member!</Typography>\n                    </Box>\n                    <Box>\n                        {!formHasAllRequiredFields && <Typography color=\"error\">* All fields and images are required.</Typography>}\n                        {!inputOfNumberValid && <Typography color=\"error\">* Quantity or Price is not a valid number.</Typography>}\n                    </Box>\n                    <Box>\n                        <Box>\n                            <InputLabel>Name</InputLabel>\n                            <Input name=\"name\" type=\"text\" value={plantInfo.name} onChange={handleInputChange}></Input>\n                        </Box>\n                        <Box>\n                            <InputLabel>Category</InputLabel>\n                            <Select label=\"Category\" name=\"category\" value={plantInfo.category} onChange={handleInputChange}>\n                                <MenuItem value=\"\"> -- </MenuItem>\n                                {\n                                    plantCategories.map(category => <MenuItem key={plantCategories.indexOf(category)} value={category}>{category}</MenuItem>)\n                                }\n                            </Select>\n                        </Box>\n                        <Box>\n                            <InputLabel>Quantity</InputLabel>\n                            <Input name=\"quantity\" type=\"number\" value={plantInfo.quantity} onChange={handleInputChange}></Input>\n                        </Box>\n                        <Box>\n                            <InputLabel>Size</InputLabel>\n                            <Select label=\"Size\" name=\"size\" value={plantInfo.size} onChange={handleInputChange}>\n                                <MenuItem value=\"\"> -- </MenuItem>\n                                {\n                                    sizes.map(size => <MenuItem key={sizes.indexOf(size)} value={size}>{size}</MenuItem>)\n                                }\n                            </Select>\n                        </Box>\n                        <Box>\n                            <InputLabel>Description</InputLabel>\n                            <Input name=\"description\"\n                                type=\"text\"\n                                multiline\n                                maxRows={4}\n                                fullWidth\n                                inputProps={{ maxLength: CHARACTER_LIMIT }}\n                                value={plantInfo.description}\n                                onChange={handleInputChange}></Input>\n                        </Box>\n                        <Box>\n                            <InputLabel>Price</InputLabel>\n                            $<Input name=\"price\" type=\"number\" value={plantInfo.price} onChange={handleInputChange}></Input>\n                        </Box>\n                        <Box>\n                            <InputLabel>Image(s)</InputLabel>\n                            <input\n                                style={{ display: \"none\" }}\n                                name=\"selectedFiles\"\n                                id=\"contained-button-file\"\n                                type=\"file\"\n                                multiple\n                                onChange={handleFileSelection}\n                            />\n                            <label htmlFor=\"contained-button-file\">\n                                <Button variant=\"contained\" component=\"span\">\n                                    Upload\n                                </Button>\n                            </label>\n                            <Box>\n                                <List>\n                                    {plantInfo.selectedFiles.map(file => <ListItem key={plantInfo.selectedFiles.indexOf(file)}>\n                                        <Typography variant=\"subtitle2\">{`${file.name.slice(0, 10)}...${file.name.slice(file.name.length - 4, file.name.length)}`}</Typography>\n                                        <Button\n                                            value={file.name}\n                                            onClick={DeleteFileFromList}\n                                        >\n                                            <CloseRounded />\n                                        </Button>\n                                    </ListItem>)}\n                                </List>\n                            </Box>\n                        </Box>\n                    </Box>\n                    <Box margin={'2rem 0'}>\n                        <Button variant=\"contained\" size=\"large\" type=\"submit\">Add</Button>\n                        <Button variant=\"contained\" color=\"error\" size=\"large\" onClick={() => setFormConfirmClearVisible(true)}>Clear</Button>\n                    </Box>\n                </form>\n            }\n        </Paper>\n    )\n}\n\nexport default FormAddPlant;"]},"metadata":{},"sourceType":"module"}