{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport * as api from '../api/index'; //Slice \n\nconst slice = createSlice({\n  name: 'plants',\n  initialState: {\n    plants: []\n  },\n  reducers: {\n    fetchAll: (state, action) => {\n      state.plants = action.payload;\n    },\n    createPlant: (state, action) => {\n      const newPlantList = state.plants.push(action.payload);\n      state.plants = newPlantList;\n    },\n    deleteOne: (state, action) => {\n      state.plants = state.plants.filter(plant => plant._id !== action.payload._id);\n    }\n  }\n});\nexport default slice.reducer; // Actions\n\nconst {\n  fetchAll,\n  createPlant,\n  deleteOne\n} = slice.actions;\nexport const SelectAllPlants = state => state.plants.plants;\n_c = SelectAllPlants;\nexport const createNewPlant = plantInfo => async dispatch => {\n  try {\n    let {\n      data\n    } = await api.addNewPlant(plantInfo);\n    dispatch(createPlant({\n      data\n    }));\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const fetchAllPlants = () => async dispatch => {\n  try {\n    let {\n      data\n    } = await api.fetchAllPlants();\n    dispatch(fetchAll({\n      data\n    }));\n  } catch (error) {}\n};\nexport const deleteOnePlant = id => async dispatch => {\n  try {\n    let {\n      data\n    } = await api.deleteOnePlant(id);\n    dispatch(deleteOne({\n      data\n    }));\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectAllPlants\");","map":{"version":3,"sources":["/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/store/plantsSlice.js"],"names":["createSlice","api","slice","name","initialState","plants","reducers","fetchAll","state","action","payload","createPlant","newPlantList","push","deleteOne","filter","plant","_id","reducer","actions","SelectAllPlants","createNewPlant","plantInfo","dispatch","data","addNewPlant","error","console","log","fetchAllPlants","deleteOnePlant","id"],"mappings":"AACA,SAAQA,WAAR,QAA0B,kBAA1B;AACA,OAAO,KAAKC,GAAZ,MAAqB,cAArB,C,CACA;;AAEA,MAAMC,KAAK,GAAGF,WAAW,CAAC;AACtBG,EAAAA,IAAI,EAAE,QADgB;AAEtBC,EAAAA,YAAY,EAAE;AACVC,IAAAA,MAAM,EAAE;AADE,GAFQ;AAKtBC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,QAAQ,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAkB;AACxBD,MAAAA,KAAK,CAACH,MAAN,GAAeI,MAAM,CAACC,OAAtB;AACH,KAHK;AAINC,IAAAA,WAAW,EAAE,CAACH,KAAD,EAAQC,MAAR,KAAkB;AAC3B,YAAMG,YAAY,GAAGJ,KAAK,CAACH,MAAN,CAAaQ,IAAb,CAAkBJ,MAAM,CAACC,OAAzB,CAArB;AACAF,MAAAA,KAAK,CAACH,MAAN,GAAeO,YAAf;AACH,KAPK;AAQNE,IAAAA,SAAS,EAAE,CAACN,KAAD,EAAQC,MAAR,KAAkB;AACzBD,MAAAA,KAAK,CAACH,MAAN,GAAgBG,KAAK,CAACH,MAAN,CAAaU,MAAb,CAAoBC,KAAK,IAAIA,KAAK,CAACC,GAAN,KAAcR,MAAM,CAACC,OAAP,CAAeO,GAA1D,CAAhB;AAEH;AAXK;AALY,CAAD,CAAzB;AAqBA,eAAef,KAAK,CAACgB,OAArB,C,CAEA;;AACA,MAAM;AAACX,EAAAA,QAAD;AAAWI,EAAAA,WAAX;AAAwBG,EAAAA;AAAxB,IAAqCZ,KAAK,CAACiB,OAAjD;AAEA,OAAO,MAAMC,eAAe,GAAIZ,KAAD,IAAWA,KAAK,CAACH,MAAN,CAAaA,MAAhD;KAAMe,e;AAEb,OAAO,MAAMC,cAAc,GAAIC,SAAD,IAAe,MAAOC,QAAP,IAAkB;AAC3D,MAAG;AACC,QAAI;AAACC,MAAAA;AAAD,QAAS,MAAMvB,GAAG,CAACwB,WAAJ,CAAgBH,SAAhB,CAAnB;AACAC,IAAAA,QAAQ,CAACZ,WAAW,CAAC;AAACa,MAAAA;AAAD,KAAD,CAAZ,CAAR;AACH,GAHD,CAGC,OAAME,KAAN,EAAY;AACTC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ,CAPM;AASP,OAAO,MAAMG,cAAc,GAAG,MAAM,MAAON,QAAP,IAAkB;AAClD,MAAI;AACA,QAAI;AAACC,MAAAA;AAAD,QAAS,MAAMvB,GAAG,CAAC4B,cAAJ,EAAnB;AACAN,IAAAA,QAAQ,CAAChB,QAAQ,CAAC;AAACiB,MAAAA;AAAD,KAAD,CAAT,CAAR;AACH,GAHD,CAGE,OAAOE,KAAP,EAAc,CAEf;AACJ,CAPM;AAUP,OAAO,MAAMI,cAAc,GAAIC,EAAD,IAAQ,MAAOR,QAAP,IAAmB;AACrD,MAAI;AACA,QAAI;AAACC,MAAAA;AAAD,QAAS,MAAMvB,GAAG,CAAC6B,cAAJ,CAAmBC,EAAnB,CAAnB;AACAR,IAAAA,QAAQ,CAACT,SAAS,CAAC;AAACU,MAAAA;AAAD,KAAD,CAAV,CAAR;AACH,GAHD,CAGE,OAAOE,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ,CAPM","sourcesContent":["\nimport {createSlice} from '@reduxjs/toolkit'; \nimport * as api from '../api/index'; \n//Slice \n\nconst slice = createSlice({\n    name: 'plants', \n    initialState: {\n        plants: [],\n    }, \n    reducers: {\n        fetchAll: (state, action) =>{\n            state.plants = action.payload; \n        }, \n        createPlant: (state, action) =>{\n            const newPlantList = state.plants.push(action.payload)\n            state.plants = newPlantList\n        }, \n        deleteOne: (state, action) =>{\n            state.plants  = state.plants.filter(plant => plant._id !== action.payload._id)\n           \n        }\n    }\n}); \n\n\nexport default slice.reducer; \n\n// Actions\nconst {fetchAll, createPlant, deleteOne} = slice.actions;\n\nexport const SelectAllPlants = (state) => state.plants.plants\n\nexport const createNewPlant = (plantInfo) => async (dispatch)=>{\n    try{\n        let {data} = await api.addNewPlant(plantInfo); \n        dispatch(createPlant({data}))\n    }catch(error){\n        console.log(error)\n    }\n}; \n\nexport const fetchAllPlants = () => async (dispatch)=>{\n    try {\n        let {data} = await api.fetchAllPlants(); \n        dispatch(fetchAll({data}))\n    } catch (error) {\n        \n    }\n}\n\n\nexport const deleteOnePlant = (id) => async (dispatch) =>{\n    try {\n        let {data} = await api.deleteOnePlant(id);\n        dispatch(deleteOne({data}))\n    } catch (error) {\n        console.log(error)\n    }\n}"]},"metadata":{},"sourceType":"module"}