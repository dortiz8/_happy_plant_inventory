{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport * as api from '../api/index'; // Helper functions \n\nfunction calculateAmount(list) {\n  let amount = 0;\n  list.forEach(item => amount += item.multiple.length);\n  return amount;\n} //Slice ** Think of Slice as a feature for the application.\n\n\nconst slice = createSlice({\n  name: 'plants',\n  initialState: {\n    plants: [],\n    genusSections: [],\n    amount: 0,\n    status: 'idle',\n    //'idel' | 'loading' | 'succeeded' | 'failed'\n    error: null\n  },\n  reducers: {},\n\n  extraReducers(builder) {\n    builder.addCase(fetchAllPlants.pending, (state, action) => {\n      state.status = 'loading';\n      console.log('loading');\n    }).addCase(fetchAllPlants.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.plants = action.payload;\n      state.amount = calculateAmount(action.payload);\n    }).addCase(fetchAllPlants.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(createNewPlant.pending, (state, action) => {\n      state.status = 'loading';\n    }).addCase(createNewPlant.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.plants.push(action.payload);\n      state.amount += action.payload.quantity;\n    }).addCase(createNewPlant.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(deletePlant.pending, (state, action) => {\n      state.status = 'loading';\n    }).addCase(deletePlant.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      let newList = state.plants.filter(plant => plant._id !== action.payload);\n      state.plants = newList;\n      state.amount -= action.payload.quantity;\n    }).addCase(deletePlant.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(editPlant.pending, (state, action) => {\n      state.status = 'loading';\n    }).addCase(editPlant.fulfilled, (state, action) => {\n      let newList = state.plants.filter(plant => plant._id !== action.payload._id);\n      newList.push(action.payload);\n      state.plants = newList;\n      state.amount = calculateAmount(newList);\n      state.status = 'succeeded';\n    }).addCase(editPlant.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n\n});\nexport default slice.reducer; // Exporting State\n\nexport const SelectAllPlants = state => state.plants.plants;\n_c = SelectAllPlants;\nexport const getPlantsStatus = state => state.plants.status;\nexport const getPlantsError = state => state.plants.error;\nexport const getPlantsAmount = state => state.plants.amount; // Exporting Actions \n\nexport const createNewPlant = createAsyncThunk('plants/createNewPlant', async plantInfo => {\n  try {\n    let {\n      data\n    } = await api.createNewPlant(plantInfo);\n    return data;\n  } catch (error) {}\n}); // Mock object \n// let data = {\n//     category: 'Sample Category', \n//     name: 'Sample Name', \n//     _id: '62ec7fe5797561104ce8d327',\n//     multiple: [\n//         { description: 'Node sample', idx: 0, price: 10, saved: true, selectedFiles: [{ base64: '../images/cactus_sample.jpeg', name: 'monsterra-node_sample.jpeg', size: 1272869, type: 'image/jpeg', _id: '62ec7fe5797561104ce8d329' }] },\n//         { description: 'Node sample', idx: 0, price: 10, saved: true, selectedFiles: [{ base64: '../images/choco_red1_sample.jpeg', name: 'monsterra-node_sample.jpeg', size: 1272869, type: 'image/jpeg', _id: '62ec7fe5797561104ce8d329' }] },\n//     ]\n// }\n// If you are passing multiple parameters to these async functions pass them within an object \n// the async callback function accepts two parameters and the second one is fixed as a ThunkAPI\n\nexport const fetchAllPlants = createAsyncThunk('plants/fetchAllPlants', async () => {\n  try {\n    let {\n      data\n    } = await api.fetchAllPlants();\n    return data;\n  } catch (error) {}\n});\nexport const deletePlant = createAsyncThunk('plants/deletePlant', async idInfoObject => {\n  try {\n    api.deleteOnePlant(idInfoObject.sectionId, idInfoObject.id); //return id; \n  } catch (error) {}\n});\nexport const editPlant = createAsyncThunk('plants/editPlant', async plantInfo => {\n  try {\n    api.editPlant(plantInfo);\n    return plantInfo;\n  } catch (error) {}\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectAllPlants\");","map":{"version":3,"sources":["/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/store/plantsSlice.js"],"names":["createAsyncThunk","createSlice","api","calculateAmount","list","amount","forEach","item","multiple","length","slice","name","initialState","plants","genusSections","status","error","reducers","extraReducers","builder","addCase","fetchAllPlants","pending","state","action","console","log","fulfilled","payload","rejected","message","createNewPlant","push","quantity","deletePlant","newList","filter","plant","_id","editPlant","reducer","SelectAllPlants","getPlantsStatus","getPlantsError","getPlantsAmount","plantInfo","data","idInfoObject","deleteOnePlant","sectionId","id"],"mappings":"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","sourcesContent":["\nimport {createAsyncThunk, createSlice} from '@reduxjs/toolkit';\nimport * as api from '../api/index'; \n\n// Helper functions \nfunction calculateAmount(list){\n    let amount = 0; \n    list.forEach(item => amount += item.multiple.length); \n    return amount; \n}\n\n\n//Slice ** Think of Slice as a feature for the application.\n\nconst slice = createSlice({\n    name: 'plants', \n    initialState: {\n        plants: [],\n        genusSections: [],\n        amount: 0, \n        status: 'idle', //'idel' | 'loading' | 'succeeded' | 'failed'\n        error: null\n    }, \n    reducers: {\n\n    }, \n    extraReducers(builder){\n        builder\n            .addCase(fetchAllPlants.pending, (state, action)=>{\n                state.status = 'loading'; \n                console.log('loading')\n            })\n            .addCase(fetchAllPlants.fulfilled, (state, action)=>{\n                state.status = 'succeeded'\n                state.plants = action.payload\n                state.amount = calculateAmount(action.payload)\n            })\n            .addCase(fetchAllPlants.rejected, (state, action) => {\n                state.status = 'failed'\n                state.error = action.error.message\n            })\n            .addCase(createNewPlant.pending, (state, action) => {\n                state.status = 'loading';\n            })\n            .addCase(createNewPlant.fulfilled, (state, action) => {\n                state.status = 'succeeded'\n                state.plants.push(action.payload)\n                state.amount += action.payload.quantity\n            })\n            .addCase(createNewPlant.rejected, (state, action) => {\n                state.status = 'failed'\n                state.error = action.error.message\n            })\n            .addCase(deletePlant.pending, (state, action) => {\n                state.status = 'loading';\n            })\n            .addCase(deletePlant.fulfilled, (state, action) => {\n                state.status = 'succeeded'\n                let newList = state.plants.filter(plant => plant._id !== action.payload); \n                state.plants =  newList\n                state.amount -= action.payload.quantity\n            })\n            .addCase(deletePlant.rejected, (state, action) => {\n                state.status = 'failed'\n                state.error = action.error.message\n            })\n            .addCase(editPlant.pending, (state, action) => {\n                state.status = 'loading';\n            })\n            .addCase(editPlant.fulfilled, (state, action) => {\n                let newList = state.plants.filter(plant => plant._id !== action.payload._id);\n                newList.push(action.payload); \n                state.plants = newList;\n                state.amount = calculateAmount(newList); \n                state.status = 'succeeded'\n            })\n            .addCase(editPlant.rejected, (state, action) => {\n                state.status = 'failed'\n                state.error = action.error.message\n            })\n            \n    }\n}); \n\n\nexport default slice.reducer; \n\n// Exporting State\nexport const SelectAllPlants = (state) => state.plants.plants;\nexport const getPlantsStatus = (state) => state.plants.status;\nexport const getPlantsError = (state) => state.plants.error;\nexport const getPlantsAmount = (state) => state.plants.amount; \n\n// Exporting Actions \nexport const createNewPlant = createAsyncThunk('plants/createNewPlant', async (plantInfo) =>{\n    try {\n        let {data} = await api.createNewPlant(plantInfo); \n        return data; \n    } catch (error) {\n        \n    }\n})\n\n// Mock object \n// let data = {\n//     category: 'Sample Category', \n//     name: 'Sample Name', \n//     _id: '62ec7fe5797561104ce8d327',\n//     multiple: [\n//         { description: 'Node sample', idx: 0, price: 10, saved: true, selectedFiles: [{ base64: '../images/cactus_sample.jpeg', name: 'monsterra-node_sample.jpeg', size: 1272869, type: 'image/jpeg', _id: '62ec7fe5797561104ce8d329' }] },\n//         { description: 'Node sample', idx: 0, price: 10, saved: true, selectedFiles: [{ base64: '../images/choco_red1_sample.jpeg', name: 'monsterra-node_sample.jpeg', size: 1272869, type: 'image/jpeg', _id: '62ec7fe5797561104ce8d329' }] },\n//     ]\n    \n// }\n\n\n// If you are passing multiple parameters to these async functions pass them within an object \n// the async callback function accepts two parameters and the second one is fixed as a ThunkAPI\n\nexport const fetchAllPlants = createAsyncThunk('plants/fetchAllPlants', async () =>{\n    try {\n        let { data } = await api.fetchAllPlants();\n        \n        return data\n    } catch (error) {\n\n    }\n})\nexport const deletePlant = createAsyncThunk('plants/deletePlant', async(idInfoObject)=>{\n    try {\n        api.deleteOnePlant(idInfoObject.sectionId, idInfoObject.id);\n        //return id; \n    } catch (error) {\n        \n    }\n})\nexport const editPlant = createAsyncThunk('plants/editPlant', async(plantInfo) =>{\n    try {\n        api.editPlant(plantInfo); \n        return plantInfo\n    } catch (error) {\n        \n    }\n})\n"]},"metadata":{},"sourceType":"module"}