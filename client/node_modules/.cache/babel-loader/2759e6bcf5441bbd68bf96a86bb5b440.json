{"ast":null,"code":"var _jsxFileName = \"/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/PlantCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useParams, useNavigate } from 'react-router-dom'; // Redux store functions\n\nimport { deletePlant, editPlant } from '../../store/plantsSlice';\nimport { fetchPlant, SelectSinglePlant, getPlantStatus, getPlantError, resetState } from '../../store/plantSlice'; // Meterial UI Section\n\nimport { Card, Box } from '@mui/material'; // Other Imports \n\nimport FormConfirmDelete from './FormConfirmDelete';\nimport { PlantObjectValidator } from '../../services/validation';\nimport LoadingSpinner from '../Common/LoadingSpinner';\nimport ErrorMessage from '../Common/ErrorMessage';\nimport EditContent from './PlantCard/EditContent';\nimport PresentationContent from './PlantCard/PresentationContent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PlantCard = () => {\n  _s();\n\n  const {\n    sectionId,\n    id\n  } = useParams();\n  const plant = useSelector(SelectSinglePlant);\n  const plantStatus = useSelector(getPlantStatus);\n  const plantError = useSelector(getPlantError);\n  const [plantInfo, setPlantInfo] = useState({});\n  const [editMode, setEditMode] = useState(false);\n  const [formConfirmDeleteVisible, setFormConfirmDeleteVisible] = useState(false);\n  const [formHasAllRequiredFields, setFormHasAllRequiredFields] = useState(true);\n  const [inputOfNumberValid, setInputOfNumberValid] = useState(true);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (plantStatus == 'idle') {\n      dispatch(fetchPlant(id));\n    }\n  }, [plantStatus, id, dispatch]);\n  useEffect(() => {\n    setPlantInfo(plant);\n  }, [plant]);\n  useEffect(() => {\n    return () => {\n      dispatch(resetState());\n    };\n  }, []);\n  let content;\n\n  if (plantStatus == 'loading') {\n    content = /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 19\n    }, this);\n  } else if (plantStatus == 'succeeded') {\n    content = /*#__PURE__*/_jsxDEV(PresentationContent, {\n      plant: plant,\n      handleEditMode: handleEditMode,\n      setFormConfirmDeleteVisible: setFormConfirmDeleteVisible\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 19\n    }, this);\n  } else if (plantStatus == 'failed') {\n    content = /*#__PURE__*/_jsxDEV(ErrorMessage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 19\n    }, this);\n  }\n\n  function handleInputChange(event) {\n    let newObj = {};\n\n    if (!isNaN(parseInt(event.target.value))) {\n      newObj[event.target.name] = parseInt(event.target.value);\n    } else {\n      newObj[event.target.name] = event.target.value;\n    }\n\n    setPlantInfo({ ...plantInfo,\n      ...newObj\n    });\n  }\n\n  function handleEditMode() {\n    setEditMode(!editMode);\n  }\n\n  ;\n\n  function handleSaveEdit() {\n    let PlantValidator = new PlantObjectValidator(plantInfo);\n    let result = PlantValidator.validate();\n    setFormHasAllRequiredFields(PlantValidator.hasAllRequiredFields);\n    setInputOfNumberValid(PlantValidator.inputNumberIsValid);\n\n    if (result) {\n      dispatch(editPlant(plantInfo));\n      navigate('/plants', {\n        replace: true\n      });\n    }\n  }\n\n  ;\n\n  function handleDeleteItem() {\n    //console.log(sectionId, ' parent---->', id, ' childid --> ')\n    let idInfoObject = {\n      sectionId: sectionId,\n      id: id\n    };\n    dispatch(deletePlant(sectionId, id)); //navigate('/plants', {replace: true}); \n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [formConfirmDeleteVisible && /*#__PURE__*/_jsxDEV(FormConfirmDelete, {\n      handleDeleteItem: handleDeleteItem,\n      setFormConfirmDeleteVisible: setFormConfirmDeleteVisible\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 42\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        margin: \"10px\"\n      },\n      children: editMode ? /*#__PURE__*/_jsxDEV(EditContent, {\n        plant: plant,\n        plantInfo: plantInfo,\n        formHasAllRequiredFields: formHasAllRequiredFields,\n        inputOfNumberValid: inputOfNumberValid,\n        handleSaveEdit: handleSaveEdit,\n        handleEditMode: handleEditMode,\n        handleInputChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }, this) : content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 13\n  }, this);\n};\n\n_s(PlantCard, \"NWs7AnWfCNbGzp5fUEo9f0T7KF8=\", false, function () {\n  return [useParams, useSelector, useSelector, useSelector, useDispatch, useNavigate];\n});\n\n_c = PlantCard;\nexport default PlantCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlantCard\");","map":{"version":3,"sources":["/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/PlantCard.js"],"names":["React","useEffect","useState","useSelector","useDispatch","useParams","useNavigate","deletePlant","editPlant","fetchPlant","SelectSinglePlant","getPlantStatus","getPlantError","resetState","Card","Box","FormConfirmDelete","PlantObjectValidator","LoadingSpinner","ErrorMessage","EditContent","PresentationContent","PlantCard","sectionId","id","plant","plantStatus","plantError","plantInfo","setPlantInfo","editMode","setEditMode","formConfirmDeleteVisible","setFormConfirmDeleteVisible","formHasAllRequiredFields","setFormHasAllRequiredFields","inputOfNumberValid","setInputOfNumberValid","dispatch","navigate","content","handleEditMode","handleInputChange","event","newObj","isNaN","parseInt","target","value","name","handleSaveEdit","PlantValidator","result","validate","hasAllRequiredFields","inputNumberIsValid","replace","handleDeleteItem","idInfoObject","margin"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { useParams, useNavigate} from 'react-router-dom';\n// Redux store functions\nimport { deletePlant, editPlant} from '../../store/plantsSlice';\nimport {fetchPlant, SelectSinglePlant, getPlantStatus, getPlantError, resetState} from '../../store/plantSlice'; \n// Meterial UI Section\nimport { Card, Box} from '@mui/material';\n\n// Other Imports \nimport FormConfirmDelete from './FormConfirmDelete';\nimport { PlantObjectValidator } from '../../services/validation';\nimport LoadingSpinner from '../Common/LoadingSpinner';\nimport ErrorMessage from '../Common/ErrorMessage';\nimport EditContent from './PlantCard/EditContent';\nimport PresentationContent from './PlantCard/PresentationContent';\nconst PlantCard = () => { \n    const { sectionId, id } = useParams();\n    const plant = useSelector(SelectSinglePlant); \n    const plantStatus = useSelector(getPlantStatus); \n    const plantError = useSelector(getPlantError); \n    const [plantInfo, setPlantInfo] = useState({});\n    const [editMode, setEditMode] = useState(false); \n    const [formConfirmDeleteVisible, setFormConfirmDeleteVisible] = useState(false); \n    const [formHasAllRequiredFields, setFormHasAllRequiredFields] = useState(true);\n    const [inputOfNumberValid, setInputOfNumberValid] = useState(true);\n    const dispatch = useDispatch(); \n    const navigate = useNavigate(); \n    \n    useEffect(() => {\n        if(plantStatus == 'idle'){\n            dispatch(fetchPlant(id))\n        }\n        \n    }, [plantStatus, id, dispatch]); \n    useEffect(()=>{\n        setPlantInfo(plant)\n    }, [plant]); \n\n    useEffect(()=>{\n        return () =>{\n            dispatch(resetState()); \n        }\n    }, [])\n    let content; \n\n    if(plantStatus == 'loading'){\n        content = <LoadingSpinner />\n    } else if(plantStatus == 'succeeded'){\n        content = <PresentationContent plant={plant} handleEditMode={handleEditMode} setFormConfirmDeleteVisible={setFormConfirmDeleteVisible}/>\n    } else if(plantStatus == 'failed'){\n        content = <ErrorMessage /> \n    }\n\n    function handleInputChange(event){\n        let newObj = {};\n        if (!isNaN(parseInt(event.target.value))) {\n            newObj[event.target.name] = parseInt(event.target.value);\n        } else {\n            newObj[event.target.name] = event.target.value;\n        }\n        setPlantInfo({\n            ...plantInfo,\n            ...newObj\n        })\n    }\n    function handleEditMode(){\n        setEditMode(!editMode);  \n    }; \n\n    function handleSaveEdit(){\n        let PlantValidator = new PlantObjectValidator(plantInfo)\n        let result = PlantValidator.validate(); \n        setFormHasAllRequiredFields(PlantValidator.hasAllRequiredFields);\n        setInputOfNumberValid(PlantValidator.inputNumberIsValid);\n        if(result){\n            dispatch(editPlant(plantInfo));\n            navigate('/plants', {replace: true}); \n        } \n    }; \n\n    function handleDeleteItem(){\n        //console.log(sectionId, ' parent---->', id, ' childid --> ')\n        let idInfoObject = {sectionId: sectionId, id: id}\n        dispatch(deletePlant(sectionId, id)); \n        //navigate('/plants', {replace: true}); \n    }; \n    \n    return (\n            <Box>\n            {formConfirmDeleteVisible && <FormConfirmDelete handleDeleteItem={handleDeleteItem} setFormConfirmDeleteVisible={setFormConfirmDeleteVisible} /> }\n                <Card sx={{ margin: \"10px\" }}>\n                    {editMode ? (\n                    <EditContent plant={plant} plantInfo={plantInfo}\n                              formHasAllRequiredFields={formHasAllRequiredFields}\n                              inputOfNumberValid={inputOfNumberValid} \n                              handleSaveEdit={handleSaveEdit}\n                              handleEditMode={handleEditMode}\n                              handleInputChange={handleInputChange}\n                              />\n                    ) : (\n                        content\n                    )}\n                </Card>\n            </Box>\n           \n        \n      \n    )\n}\n\nexport default PlantCard;"]},"metadata":{},"sourceType":"module"}