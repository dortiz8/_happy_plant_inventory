{"ast":null,"code":"var _jsxFileName = \"/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/FormAddPlant.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux'; // Redux store functions\n\nimport { createNewPlant } from '../../store/plantsSlice'; // Material UI Section \n\nimport { Button, Typography, Paper, Box, Input, InputLabel, Select, MenuItem, List, ListItem, Radio, FormControl, FormLabel, RadioGroup, FormControlLabel } from '@mui/material';\nimport CloseRounded from '@mui/icons-material/CloseRounded';\nimport AddIcon from '@mui/icons-material/Add'; // Component Imports\n\nimport FormConfirmAddPlant from './FormConfirmAddPlant';\nimport FormConfirmClear from './FormConfirmClear'; // Other imports \n\nimport plantCategories from '../../lists/plantCategories';\nimport { useNavigate } from 'react-router';\nimport { PlantObjectValidator } from '../../services/validation';\nimport GeneralPlantInfo from '../../models/generalPlantInfo';\nimport PlantDetails from './PlantSpecifics/PlantDetails';\nimport PlantSpecifics from '../../models/plantSpecifics';\nimport { nanoid } from 'nanoid';\nimport plantSpecifics from '../../models/plantSpecifics';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst FormAddPlant = e => {\n  _s();\n\n  // Initialize the object \n  let generalPlantObject = new GeneralPlantInfo(\"\", \"\"); // Component State section \n\n  let localStorageData = JSON.parse(localStorage.getItem('plantInfo')) || generalPlantObject;\n  let localStorageQuantityArray = JSON.parse(localStorage.getItem('quantityArray')) || [];\n  const [plantInfo, setPlantInfo] = useState(localStorageData);\n  const [quantityArray, setQuantityArray] = useState(localStorageQuantityArray);\n  const [multiple, setMultiple] = useState(quantityArray.length > 1);\n  const [formHasAllRequiredFields, setFormHasAllRequiredFields] = useState(true);\n  const [inputOfNumberValid, setInputOfNumberValid] = useState(true);\n  const [formConfirmVisible, setFormConfirmVisible] = useState(false);\n  const [formConfirmClearVisible, setFormConfirmClearVisible] = useState(false);\n  const dispatch = useDispatch();\n  const navigate = useNavigate(); // console.log(plantInfo)\n\n  useEffect(() => {\n    if (!quantityArray.length) {\n      let arr = [].push(new PlantSpecifics(\"\", 0, \"\", []));\n      setQuantityArray(arr);\n    }\n  }, []); // Setting plantInfo into local storage\n\n  useEffect(() => {\n    localStorage.setItem('plantInfo', JSON.stringify(plantInfo));\n    localStorage.setItem('quantityArray', JSON.stringify(quantityArray));\n  });\n\n  function handleInputChange(event) {\n    let newObj = {};\n\n    if (!isNaN(parseInt(event.target.value))) {\n      newObj[event.target.name] = parseInt(event.target.value);\n    } else {\n      newObj[event.target.name] = event.target.value;\n    }\n\n    setPlantInfo({ ...plantInfo,\n      ...newObj\n    });\n  }\n\n  ;\n\n  function handleMultiple(e) {\n    let val = e.target.value;\n\n    if (val.toLocaleUpperCase() == \"Single\".toLocaleUpperCase()) {\n      setMultiple(false);\n    } else {\n      setMultiple(true);\n    }\n  }\n\n  function handleDeletePlantFromList() {}\n\n  function handleAddPlantToList() {\n    let tempArr = [...quantityArray, new PlantSpecifics(\"\", 0, \"\", [])];\n    setQuantityArray(tempArr);\n  }\n\n  function handlePreSubmit(e) {\n    // Prevent postback \n    e.preventDefault();\n\n    if (submitValidation()) {\n      setFormConfirmVisible(true);\n    }\n  }\n\n  function handleSubmit(e) {\n    dispatch(createNewPlant(plantInfo));\n    setFormConfirmVisible(false);\n    setPlantInfo({ ...generalPlantObject\n    });\n    localStorage.removeItem('plantInfo');\n    navigate('/plants', {\n      replace: true\n    });\n  }\n\n  function handleClearForm() {\n    setPlantInfo(generalPlantObject);\n  }\n\n  function submitValidation() {\n    let PlantValidator = new PlantObjectValidator(plantInfo);\n    let result = PlantValidator.validate();\n    setFormHasAllRequiredFields(PlantValidator.hasAllRequiredFields);\n    setInputOfNumberValid(PlantValidator.inputNumberIsValid);\n    return result;\n  }\n\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    children: [formConfirmVisible && /*#__PURE__*/_jsxDEV(FormConfirmAddPlant, {\n      plantInfo: plantInfo,\n      setFormConfirmVisible: setFormConfirmVisible,\n      handleSubmit: handleSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 36\n    }, this), formConfirmClearVisible && /*#__PURE__*/_jsxDEV(FormConfirmClear, {\n      handleClearForm: handleClearForm,\n      setFormConfirmClearVisible: setFormConfirmClearVisible\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 41\n    }, this), formConfirmVisible || formConfirmClearVisible ? /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false) : /*#__PURE__*/_jsxDEV(\"form\", {\n      autoComplete: \"off\",\n      noValidate: true,\n      onSubmit: e => handlePreSubmit(e),\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          children: \"Describe the new member!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        children: [!formHasAllRequiredFields && /*#__PURE__*/_jsxDEV(Typography, {\n          color: \"error\",\n          children: \"* All fields and images are required.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 55\n        }, this), !inputOfNumberValid && /*#__PURE__*/_jsxDEV(Typography, {\n          color: \"error\",\n          children: \"* Quantity or Price is not a valid number.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 49\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          backgroundColor: '#FAFAFA',\n          margin: '1rem 0'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            name: \"name\",\n            type: \"text\",\n            value: plantInfo.name,\n            onChange: handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            children: \"Category\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            label: \"Category\",\n            name: \"category\",\n            value: plantInfo.category ? plantInfo.category : '',\n            onChange: handleInputChange,\n            children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n              value: \"\",\n              children: \" -- \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 33\n            }, this), plantCategories.map(category => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: category,\n              children: category\n            }, plantCategories.indexOf(category), false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 69\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(FormControl, {\n            children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n              children: \"How Many?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(RadioGroup, {\n              onChange: handleMultiple,\n              children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n                value: \"Single\",\n                label: \"Single\",\n                control: /*#__PURE__*/_jsxDEV(Radio, {\n                  checked: !multiple\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 148,\n                  columnNumber: 94\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                value: \"Multiple\",\n                label: \"Multiple\",\n                control: /*#__PURE__*/_jsxDEV(Radio, {\n                  checked: multiple\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 149,\n                  columnNumber: 98\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 149,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 29\n          }, this), multiple && /*#__PURE__*/_jsxDEV(Box, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"success\",\n              onClick: handleAddPlantToList,\n              children: [\"Add\", /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 152,\n                columnNumber: 125\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 47\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 42\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          children: quantityArray.map(i => /*#__PURE__*/_jsxDEV(PlantDetails, {\n            plantNumber: i,\n            handleDeletePlantFromList: handleDeletePlantFromList\n          }, nanoid(), false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 37\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        margin: '2rem 0',\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          size: \"large\",\n          type: \"submit\",\n          children: \"Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"error\",\n          size: \"large\",\n          onClick: () => setFormConfirmClearVisible(true),\n          children: \"Clear\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 9\n  }, this);\n};\n\n_s(FormAddPlant, \"j9B7F8jnhCw7a/qhAIBRyrEWf6c=\", false, function () {\n  return [useDispatch, useNavigate];\n});\n\n_c = FormAddPlant;\nexport default FormAddPlant;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormAddPlant\");","map":{"version":3,"sources":["/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/FormAddPlant.js"],"names":["React","useState","useEffect","useDispatch","useSelector","createNewPlant","Button","Typography","Paper","Box","Input","InputLabel","Select","MenuItem","List","ListItem","Radio","FormControl","FormLabel","RadioGroup","FormControlLabel","CloseRounded","AddIcon","FormConfirmAddPlant","FormConfirmClear","plantCategories","useNavigate","PlantObjectValidator","GeneralPlantInfo","PlantDetails","PlantSpecifics","nanoid","plantSpecifics","FormAddPlant","e","generalPlantObject","localStorageData","JSON","parse","localStorage","getItem","localStorageQuantityArray","plantInfo","setPlantInfo","quantityArray","setQuantityArray","multiple","setMultiple","length","formHasAllRequiredFields","setFormHasAllRequiredFields","inputOfNumberValid","setInputOfNumberValid","formConfirmVisible","setFormConfirmVisible","formConfirmClearVisible","setFormConfirmClearVisible","dispatch","navigate","arr","push","setItem","stringify","handleInputChange","event","newObj","isNaN","parseInt","target","value","name","handleMultiple","val","toLocaleUpperCase","handleDeletePlantFromList","handleAddPlantToList","tempArr","handlePreSubmit","preventDefault","submitValidation","handleSubmit","removeItem","replace","handleClearForm","PlantValidator","result","validate","hasAllRequiredFields","inputNumberIsValid","backgroundColor","margin","category","map","indexOf","i"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {useState, useEffect} from 'react'; \nimport { useDispatch, useSelector } from 'react-redux'; \n// Redux store functions\nimport { createNewPlant} from '../../store/plantsSlice';\n// Material UI Section \nimport { Button, Typography, Paper, Box, Input, InputLabel, Select, MenuItem, List, ListItem, Radio, FormControl, FormLabel, RadioGroup, FormControlLabel} from '@mui/material';\nimport CloseRounded from '@mui/icons-material/CloseRounded';\n\nimport AddIcon from '@mui/icons-material/Add';\n// Component Imports\nimport FormConfirmAddPlant from './FormConfirmAddPlant'; \nimport FormConfirmClear from './FormConfirmClear';\n// Other imports \nimport plantCategories from '../../lists/plantCategories';\n\nimport { useNavigate } from 'react-router';\nimport { PlantObjectValidator } from '../../services/validation';\nimport GeneralPlantInfo from '../../models/generalPlantInfo';\n\nimport PlantDetails from './PlantSpecifics/PlantDetails';\nimport PlantSpecifics from '../../models/plantSpecifics';\nimport {nanoid} from 'nanoid'; \nimport plantSpecifics from '../../models/plantSpecifics';\n\nconst FormAddPlant = (e) => {\n    // Initialize the object \n    let generalPlantObject = new GeneralPlantInfo(\"\", \"\");\n\n\n    // Component State section \n    let localStorageData = JSON.parse(localStorage.getItem('plantInfo')) || generalPlantObject; \n    let localStorageQuantityArray = JSON.parse(localStorage.getItem('quantityArray')) || []; \n    const [plantInfo, setPlantInfo] = useState(localStorageData);\n    const [quantityArray, setQuantityArray] = useState(localStorageQuantityArray); \n    const [multiple, setMultiple] = useState(quantityArray.length > 1); \n    const [formHasAllRequiredFields, setFormHasAllRequiredFields] = useState(true); \n    const [inputOfNumberValid, setInputOfNumberValid] = useState(true); \n    const [formConfirmVisible, setFormConfirmVisible] = useState(false); \n    const [formConfirmClearVisible, setFormConfirmClearVisible] = useState(false); \n    const dispatch = useDispatch()\n    const navigate = useNavigate()\n    // console.log(plantInfo)\n    useEffect(()=>{\n        if(!quantityArray.length){\n            let arr = [].push(new PlantSpecifics(\"\", 0, \"\", []))\n            setQuantityArray(arr)\n        }\n    },[])\n    // Setting plantInfo into local storage\n    useEffect(()=>{\n        localStorage.setItem('plantInfo', JSON.stringify(plantInfo))\n        localStorage.setItem('quantityArray', JSON.stringify(quantityArray));\n    })\n\n\n    function handleInputChange(event){\n        let newObj = {}; \n        if (!isNaN(parseInt(event.target.value))){\n            newObj[event.target.name] = parseInt(event.target.value);\n        }else{\n            newObj[event.target.name] = event.target.value;\n        }       \n        setPlantInfo({\n            ...plantInfo, \n            ...newObj\n        })\n    }; \n    function handleMultiple(e){\n        let val = e.target.value; \n        if(val.toLocaleUpperCase() == \"Single\".toLocaleUpperCase()){\n            setMultiple(false);\n        }else{\n            setMultiple(true); \n        } \n    }\n    function handleDeletePlantFromList(){\n       \n    }\n\n    function handleAddPlantToList(){\n        let tempArr = [...quantityArray, new PlantSpecifics(\"\", 0, \"\", []) ];\n        setQuantityArray(tempArr); \n        \n    }\n\n\n\n    function handlePreSubmit(e){\n        // Prevent postback \n        e.preventDefault(); \n        if(submitValidation()){\n            setFormConfirmVisible(true); \n        }\n    }\n    function handleSubmit(e){\n        dispatch(createNewPlant(plantInfo));\n        setFormConfirmVisible(false); \n        setPlantInfo({...generalPlantObject})\n        localStorage.removeItem('plantInfo'); \n        navigate('/plants', {replace: true})\n    }\n\n    function handleClearForm(){\n        setPlantInfo(generalPlantObject)\n    }\n\n    function submitValidation(){\n        let PlantValidator = new PlantObjectValidator(plantInfo); \n        let result  = PlantValidator.validate(); \n        setFormHasAllRequiredFields(PlantValidator.hasAllRequiredFields); \n        setInputOfNumberValid(PlantValidator.inputNumberIsValid); \n        return result; \n    }\n    \n    return (\n        <Paper>\n            {formConfirmVisible && <FormConfirmAddPlant plantInfo={plantInfo} setFormConfirmVisible={setFormConfirmVisible} handleSubmit={handleSubmit}/>}\n            {formConfirmClearVisible && <FormConfirmClear handleClearForm={handleClearForm} setFormConfirmClearVisible={setFormConfirmClearVisible}/>}\n            {formConfirmVisible || formConfirmClearVisible ? <></> : \n                <form autoComplete=\"off\" noValidate onSubmit={(e) => handlePreSubmit(e)}>\n                \n                    <Box>\n                        <Typography>Describe the new member!</Typography>\n                    </Box>\n                    <Box>\n                        {!formHasAllRequiredFields && <Typography color=\"error\">* All fields and images are required.</Typography>}\n                        {!inputOfNumberValid && <Typography color=\"error\">* Quantity or Price is not a valid number.</Typography>}\n                    </Box>\n                    <Box sx={{backgroundColor: '#FAFAFA', margin: '1rem 0'}}>\n                        <Box>\n                            <InputLabel>Name</InputLabel>\n                            <Input name=\"name\" type=\"text\" value={plantInfo.name} onChange={handleInputChange}></Input>\n                        </Box>\n                        <Box>\n                            <InputLabel>Category</InputLabel>\n                            <Select label=\"Category\" name=\"category\" value={plantInfo.category ? plantInfo.category : ''} onChange={handleInputChange}>\n                                <MenuItem value=\"\"> -- </MenuItem>\n                                {\n                                    plantCategories.map(category => <MenuItem key={plantCategories.indexOf(category)} value={category}>{category}</MenuItem>)\n                                }\n                            </Select>\n                        </Box>\n                        <Box>\n                            <FormControl>\n                                <FormLabel>How Many?</FormLabel>\n                                <RadioGroup onChange={handleMultiple}>\n                                    <FormControlLabel value=\"Single\" label=\"Single\" control={<Radio checked={!multiple} />} />\n                                    <FormControlLabel value=\"Multiple\" label=\"Multiple\" control={<Radio checked={multiple} />} />\n                                </RadioGroup>\n                            </FormControl>\n                            {multiple && <Box><Button variant=\"contained\" color=\"success\" onClick={handleAddPlantToList}>Add<AddIcon /></Button></Box>}\n                        </Box>\n                    </Box>\n                    <Box>\n                        <Box>\n                            {\n                                quantityArray.map(i => (\n                                    <PlantDetails plantNumber={i}\n                                        handleDeletePlantFromList={handleDeletePlantFromList}\n                                        key={nanoid()}\n                                    />))\n                            }\n                        </Box>\n                        \n                    </Box>\n                    <Box margin={'2rem 0'}>\n                        <Button variant=\"contained\" size=\"large\" type=\"submit\">Add</Button>\n                        <Button variant=\"contained\" color=\"error\" size=\"large\" onClick={() => setFormConfirmClearVisible(true)}>Clear</Button>\n                    </Box>\n                </form>\n            }\n        </Paper>\n    )\n}\n\nexport default FormAddPlant;"]},"metadata":{},"sourceType":"module"}