{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport * as api from '../api/index'; //Slice \n\nconst slice = createSlice({\n  name: 'plants',\n  initialState: {\n    plants: [],\n    status: 'idle',\n    //'idel' | 'loading' | 'succeeded' | 'failed'\n    error: null\n  },\n  reducers: {\n    // fetchAll: (state, action) =>{\n    //     state.plants = action.payload; \n    // }, \n    createPlant: (state, action) => {\n      const newPlantList = state.plants.push(action.payload);\n      state.plants = newPlantList;\n    },\n    deleteOne: (state, action) => {\n      state.plants = state.plants.filter(plant => plant._id !== action.payload._id);\n    }\n  },\n\n  extraReducers(builder) {\n    builder.addCase(fetchAllPlants.pending, (state, action) => {\n      state.status = 'loading';\n      console.log('loading');\n    }).addCase(fetchAllPlants.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      console.log(action.payload);\n      state.plants = action.payload;\n    }).addCase(fetchAllPlants.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n\n});\nexport default slice.reducer; // Actions\n\nconst {\n  fetchAll,\n  createPlant,\n  deleteOne\n} = slice.actions;\nexport const SelectAllPlants = state => state.plants.plants;\n_c = SelectAllPlants;\nexport const getPlantsStatus = state => state.plants.status;\nexport const getPlantsError = state => state.plants.error;\nexport const createNewPlant = plantInfo => async dispatch => {\n  try {\n    let {\n      data\n    } = await api.addNewPlant(plantInfo);\n    dispatch(createPlant({\n      data\n    }));\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const fetchAllPlants = createAsyncThunk('plants/fetchAllPlants', async () => {\n  try {\n    let {\n      data\n    } = await api.fetchAllPlants();\n    return data;\n  } catch (error) {}\n}); // export const fetchAllPlants = () => async (dispatch)=>{\n//     try {\n//         let {data} = await api.fetchAllPlants(); \n//         dispatch(fetchAll({data}))\n//     } catch (error) {\n//     }\n// }\n\nexport const deleteOnePlant = id => async dispatch => {\n  try {\n    let {\n      data\n    } = await api.deleteOnePlant(id);\n    dispatch(deleteOne({\n      data\n    }));\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectAllPlants\");","map":{"version":3,"sources":["/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/store/plantsSlice.js"],"names":["createAsyncThunk","createSlice","api","slice","name","initialState","plants","status","error","reducers","createPlant","state","action","newPlantList","push","payload","deleteOne","filter","plant","_id","extraReducers","builder","addCase","fetchAllPlants","pending","console","log","fulfilled","rejected","message","reducer","fetchAll","actions","SelectAllPlants","getPlantsStatus","getPlantsError","createNewPlant","plantInfo","dispatch","data","addNewPlant","deleteOnePlant","id"],"mappings":"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","sourcesContent":["\nimport {createAsyncThunk, createSlice} from '@reduxjs/toolkit';\nimport * as api from '../api/index'; \n\n//Slice \n\nconst slice = createSlice({\n    name: 'plants', \n    initialState: {\n        plants: [],\n        status: 'idle', //'idel' | 'loading' | 'succeeded' | 'failed'\n        error: null\n    }, \n    reducers: {\n        // fetchAll: (state, action) =>{\n        //     state.plants = action.payload; \n        // }, \n        createPlant: (state, action) =>{\n            const newPlantList = state.plants.push(action.payload)\n            state.plants = newPlantList\n        }, \n        deleteOne: (state, action) =>{\n            state.plants  = state.plants.filter(plant => plant._id !== action.payload._id)\n           \n        }\n    }, \n    extraReducers(builder){\n        builder\n            .addCase(fetchAllPlants.pending, (state, action)=>{\n                state.status = 'loading'; \n                console.log('loading')\n            })\n            .addCase(fetchAllPlants.fulfilled, (state, action)=>{\n                state.status = 'succeeded'\n                console.log(action.payload)\n                state.plants = action.payload\n            })\n            .addCase(fetchAllPlants.rejected, (state, action) => {\n                state.status = 'failed'\n                state.error = action.error.message\n            })\n    }\n}); \n\n\nexport default slice.reducer; \n\n// Actions\nconst {fetchAll, createPlant, deleteOne} = slice.actions;\n\nexport const SelectAllPlants = (state) => state.plants.plants;\nexport const getPlantsStatus = (state) => state.plants.status;\nexport const getPlantsError = (state) => state.plants.error;\n\nexport const createNewPlant = (plantInfo) => async (dispatch)=>{\n    try{\n        let {data} = await api.addNewPlant(plantInfo); \n        dispatch(createPlant({data}))\n    }catch(error){\n        console.log(error)\n    }\n}; \n\n\nexport const fetchAllPlants = createAsyncThunk('plants/fetchAllPlants', async () =>{\n    try {\n        let { data } = await api.fetchAllPlants();\n        return data\n    } catch (error) {\n\n    }\n})\n\n// export const fetchAllPlants = () => async (dispatch)=>{\n//     try {\n//         let {data} = await api.fetchAllPlants(); \n//         dispatch(fetchAll({data}))\n//     } catch (error) {\n        \n//     }\n// }\n\n\nexport const deleteOnePlant = (id) => async (dispatch) =>{\n    try {\n        let {data} = await api.deleteOnePlant(id);\n        dispatch(deleteOne({data}))\n    } catch (error) {\n        console.log(error)\n    }\n}"]},"metadata":{},"sourceType":"module"}