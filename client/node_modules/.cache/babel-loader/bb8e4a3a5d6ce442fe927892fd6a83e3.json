{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport * as api from '../api/index'; //Slice \n\nconst slice = createSlice({\n  name: 'plants',\n  initialState: {\n    plants: []\n  },\n  reducers: {\n    fetchAll: (state, action) => {\n      state.plants = action.payload;\n    },\n    createPlant: (state, action) => {\n      console.log(action.payload, ' from reducer ', ' state ', state.plants);\n      state.plants = [...state.plants, action.payload];\n    }\n  }\n});\nexport default slice.reducer; // Actions\n\nconst {\n  fetchAll,\n  createPlant\n} = slice.actions;\nexport const createNewPlant = plantInfo => async dispatch => {\n  try {\n    console.log(plantInfo);\n    let {\n      data\n    } = await api.addNewPlant(plantInfo);\n    dispatch(createPlant({\n      data\n    }));\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const fetchAllPlants = () => async dispatch => {\n  try {\n    let {\n      data\n    } = await api.fetchAllPlants();\n    dispatch();\n  } catch (error) {}\n};","map":{"version":3,"sources":["/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/store/plants.js"],"names":["createSlice","api","slice","name","initialState","plants","reducers","fetchAll","state","action","payload","createPlant","console","log","reducer","actions","createNewPlant","plantInfo","dispatch","data","addNewPlant","error","fetchAllPlants"],"mappings":"AACA,SAAQA,WAAR,QAA0B,kBAA1B;AACA,OAAO,KAAKC,GAAZ,MAAqB,cAArB,C,CACA;;AAEA,MAAMC,KAAK,GAAGF,WAAW,CAAC;AACtBG,EAAAA,IAAI,EAAE,QADgB;AAEtBC,EAAAA,YAAY,EAAE;AACVC,IAAAA,MAAM,EAAE;AADE,GAFQ;AAKtBC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,QAAQ,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAkB;AACxBD,MAAAA,KAAK,CAACH,MAAN,GAAeI,MAAM,CAACC,OAAtB;AACH,KAHK;AAINC,IAAAA,WAAW,EAAE,CAACH,KAAD,EAAQC,MAAR,KAAkB;AAC3BG,MAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAM,CAACC,OAAnB,EAA4B,gBAA5B,EAA8C,SAA9C,EAAyDF,KAAK,CAACH,MAA/D;AACAG,MAAAA,KAAK,CAACH,MAAN,GAAe,CAAC,GAAGG,KAAK,CAACH,MAAV,EAAkBI,MAAM,CAACC,OAAzB,CAAf;AACH;AAPK;AALY,CAAD,CAAzB;AAgBA,eAAeR,KAAK,CAACY,OAArB,C,CAEA;;AACA,MAAM;AAACP,EAAAA,QAAD;AAAWI,EAAAA;AAAX,IAA0BT,KAAK,CAACa,OAAtC;AAEA,OAAO,MAAMC,cAAc,GAAIC,SAAD,IAAe,MAAOC,QAAP,IAAkB;AAC3D,MAAG;AACCN,IAAAA,OAAO,CAACC,GAAR,CAAYI,SAAZ;AACA,QAAI;AAACE,MAAAA;AAAD,QAAS,MAAMlB,GAAG,CAACmB,WAAJ,CAAgBH,SAAhB,CAAnB;AACAC,IAAAA,QAAQ,CAACP,WAAW,CAAC;AAACQ,MAAAA;AAAD,KAAD,CAAZ,CAAR;AACH,GAJD,CAIC,OAAME,KAAN,EAAY;AACTT,IAAAA,OAAO,CAACC,GAAR,CAAYQ,KAAZ;AACH;AACJ,CARM;AAUP,OAAO,MAAMC,cAAc,GAAG,MAAM,MAAOJ,QAAP,IAAkB;AAClD,MAAI;AACA,QAAI;AAACC,MAAAA;AAAD,QAAS,MAAMlB,GAAG,CAACqB,cAAJ,EAAnB;AACAJ,IAAAA,QAAQ;AACX,GAHD,CAGE,OAAOG,KAAP,EAAc,CAEf;AACJ,CAPM","sourcesContent":["\nimport {createSlice} from '@reduxjs/toolkit'; \nimport * as api from '../api/index'; \n//Slice \n\nconst slice = createSlice({\n    name: 'plants', \n    initialState: {\n        plants: [],\n    }, \n    reducers: {\n        fetchAll: (state, action) =>{\n            state.plants = action.payload; \n        }, \n        createPlant: (state, action) =>{\n            console.log(action.payload, ' from reducer ', ' state ', state.plants)\n            state.plants = [...state.plants, action.payload]\n        }\n    }\n}); \n\nexport default slice.reducer; \n\n// Actions\nconst {fetchAll, createPlant} = slice.actions; \n\nexport const createNewPlant = (plantInfo) => async (dispatch)=>{\n    try{\n        console.log(plantInfo)\n        let {data} = await api.addNewPlant(plantInfo); \n        dispatch(createPlant({data}))\n    }catch(error){\n        console.log(error)\n    }\n}; \n\nexport const fetchAllPlants = () => async (dispatch)=>{\n    try {\n        let {data} = await api.fetchAllPlants(); \n        dispatch()\n    } catch (error) {\n        \n    }\n}"]},"metadata":{},"sourceType":"module"}