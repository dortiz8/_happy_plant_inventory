{"ast":null,"code":"var _jsxFileName = \"/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/PlantSpecifics/PlantDetails.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Button, Typography, Box, List, ListItem, TextField, IconButton, Card, CardHeader, CardContent, CardActions, Select, MenuItem } from '@mui/material';\nimport CloseRounded from '@mui/icons-material/CloseRounded';\nimport { CHARACTER_LIMIT } from '../../../constants/limits';\nimport selectedFile from '../../../models/fileClass';\nimport PlantSpecifics from '../../../models/plantSpecifics';\nimport { plantType } from '../../../constants/plantType';\nimport { nanoid } from 'nanoid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst PlantDetails = _ref => {\n  _s();\n\n  let {\n    plantInfo,\n    handleSavePlant,\n    handleDeletePlantFromList\n  } = _ref;\n  let plantSpecificsObject = new PlantSpecifics(\"\", 0, \"\", []);\n  let localStoragePlantDetails = JSON.parse(localStorage.getItem(`plantDetails${idx}`)) || plantInfo;\n  const [plantDetails, setPlantDetails] = useState(localStoragePlantDetails);\n  const [uniqueID, setUniqueID] = useState(nanoid());\n  useEffect(() => {\n    localStorage.setItem(`plantDetails:${idx}`, JSON.stringify(plantDetails));\n  });\n\n  function handleInputChange(event) {\n    let newObj = {};\n\n    if (!isNaN(parseInt(event.target.value))) {\n      newObj[event.target.name] = parseInt(event.target.value);\n    } else {\n      newObj[event.target.name] = event.target.value;\n    }\n\n    setPlantDetails({ ...plantDetails,\n      ...newObj\n    });\n  }\n\n  ;\n\n  const toBase64 = file => new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n\n    reader.onload = () => resolve(reader.result);\n\n    reader.onerror = error => reject(error);\n  });\n\n  async function handleFileSelection(event) {\n    let files = event.target.files;\n    let tempArray = [];\n\n    if (files) {\n      for (let i = 0; i < files.length; i++) {\n        let selectedFileObj = new selectedFile(files[i].name, files[i].type, files[i].size, await toBase64(files[i]));\n        tempArray.push(selectedFileObj);\n      }\n\n      ;\n    }\n\n    setPlantDetails({ ...plantDetails,\n      selectedFiles: tempArray\n    });\n  }\n\n  function DeleteFileFromList(event) {\n    let filteredList = plantDetails.selectedFiles.filter(file => file.name !== event.currentTarget.value);\n    setPlantDetails({ ...plantDetails,\n      selectedFiles: [...filteredList]\n    });\n  }\n\n  function DeletePlantCard() {\n    localStorage.removeItem(`plantDetails:${plantInfo.idx}`);\n    handleDeletePlantFromList(plantInfo.idx);\n  }\n\n  function handleClearForm() {\n    setPlantDetails(plantSpecificsObject);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        maxWidth: 345,\n        backgroundColor: '#cfd1d0',\n        margin: '1rem .5rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(CardActions, {\n        disableSpacing: true,\n        children: /*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: DeletePlantCard,\n          children: /*#__PURE__*/_jsxDEV(CloseRounded, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CardHeader, {\n        title: `Plant #${idx + 1}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            value: plantDetails.type,\n            label: \"Type\",\n            name: \"type\",\n            onChange: handleInputChange,\n            children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n              value: \"\",\n              children: \"--\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 29\n            }, this), plantType.map(type => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: type,\n              children: type\n            }, plantType.indexOf(type), false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 52\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            label: \"Price\",\n            name: \"price\",\n            fullWidth: true,\n            inputProps: {\n              inputMode: 'numeric',\n              pattern: '[0-9]*'\n            },\n            value: plantDetails.price,\n            variant: \"outlined\",\n            onChange: handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            label: \"Description\",\n            name: \"description\",\n            fullWidth: true,\n            multiline: true,\n            maxRows: 4,\n            inputProps: {\n              maxLength: CHARACTER_LIMIT\n            },\n            value: plantDetails.description,\n            variant: \"outlined\",\n            onChange: handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            style: {\n              display: \"none\"\n            },\n            name: \"selectedFiles\",\n            id: uniqueID,\n            type: \"file\",\n            multiple: true,\n            onChange: handleFileSelection\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: uniqueID,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              component: \"span\",\n              children: \"Upload Image(s)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            children: /*#__PURE__*/_jsxDEV(List, {\n              children: plantDetails.selectedFiles.map(file => /*#__PURE__*/_jsxDEV(ListItem, {\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"subtitle2\",\n                  children: `${file.name.slice(0, 10)}...${file.name.slice(file.name.length - 4, file.name.length)}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 131,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  value: file.name,\n                  onClick: DeleteFileFromList,\n                  children: /*#__PURE__*/_jsxDEV(CloseRounded, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 136,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 132,\n                  columnNumber: 37\n                }, this)]\n              }, plantDetails.selectedFiles.indexOf(file), true, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 73\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleSavePlant,\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleClearForm,\n          children: \"Clear\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(PlantDetails, \"FAB/CarEnhHnIuaT2Wz3hT3kOcc=\");\n\n_c = PlantDetails;\nexport default PlantDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlantDetails\");","map":{"version":3,"sources":["/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/PlantSpecifics/PlantDetails.js"],"names":["React","useEffect","useState","Button","Typography","Box","List","ListItem","TextField","IconButton","Card","CardHeader","CardContent","CardActions","Select","MenuItem","CloseRounded","CHARACTER_LIMIT","selectedFile","PlantSpecifics","plantType","nanoid","PlantDetails","plantInfo","handleSavePlant","handleDeletePlantFromList","plantSpecificsObject","localStoragePlantDetails","JSON","parse","localStorage","getItem","idx","plantDetails","setPlantDetails","uniqueID","setUniqueID","setItem","stringify","handleInputChange","event","newObj","isNaN","parseInt","target","value","name","toBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","handleFileSelection","files","tempArray","i","length","selectedFileObj","type","size","push","selectedFiles","DeleteFileFromList","filteredList","filter","currentTarget","DeletePlantCard","removeItem","handleClearForm","maxWidth","backgroundColor","margin","map","indexOf","inputMode","pattern","price","maxLength","description","display","slice"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Button, Typography, Box, List, ListItem, TextField, IconButton, Card, CardHeader, CardContent, CardActions, Select, MenuItem} from '@mui/material';\nimport CloseRounded from '@mui/icons-material/CloseRounded';\nimport {CHARACTER_LIMIT} from '../../../constants/limits'; \n\nimport selectedFile from '../../../models/fileClass';\nimport PlantSpecifics from '../../../models/plantSpecifics';\nimport {plantType} from '../../../constants/plantType'; \nimport { nanoid } from 'nanoid';\n\nconst PlantDetails = ({plantInfo, handleSavePlant, handleDeletePlantFromList}) => {\n    let plantSpecificsObject = new PlantSpecifics(\"\", 0, \"\", []);\n    let localStoragePlantDetails  = JSON.parse(localStorage.getItem(`plantDetails${idx}`)) || plantInfo\n    const [plantDetails, setPlantDetails] = useState(localStoragePlantDetails);\n    const [uniqueID, setUniqueID] = useState(nanoid())\n   \n    useEffect(()=>{\n            localStorage.setItem(`plantDetails:${idx}`, JSON.stringify(plantDetails))\n    });\n\n    function handleInputChange(event) {\n        let newObj = {};\n        if (!isNaN(parseInt(event.target.value))) {\n            newObj[event.target.name] = parseInt(event.target.value);\n        } else {\n            newObj[event.target.name] = event.target.value;\n        }\n        \n        setPlantDetails({\n            ...plantDetails,\n            ...newObj\n        })\n    };\n\n    const toBase64 = file => new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = error => reject(error);\n    });\n\n    async function handleFileSelection(event) {\n        let files = event.target.files;\n        let tempArray = [];\n\n        if (files) {\n            for (let i = 0; i < files.length; i++) {\n                let selectedFileObj = new selectedFile(files[i].name, files[i].type, files[i].size, await toBase64(files[i]));\n                tempArray.push(selectedFileObj);\n            };\n        }\n        setPlantDetails({ ...plantDetails, selectedFiles: tempArray })\n    }\n\n    function DeleteFileFromList(event) {\n        let filteredList = plantDetails.selectedFiles.filter(file => file.name !== event.currentTarget.value);\n        setPlantDetails({ ...plantDetails, selectedFiles: [...filteredList] });\n    }\n    function DeletePlantCard(){\n        localStorage.removeItem(`plantDetails:${plantInfo.idx}`)\n        handleDeletePlantFromList(plantInfo.idx)\n    }\n\n    function handleClearForm() {\n        setPlantDetails(plantSpecificsObject)\n    }\n\n    return(\n        <>\n            <Card sx={{ maxWidth: 345, backgroundColor: '#cfd1d0', margin: '1rem .5rem'}}>\n                <CardActions disableSpacing>\n                    <IconButton onClick={DeletePlantCard}>\n                        <CloseRounded />\n                    </IconButton>\n                </CardActions>\n                <CardHeader \n                    title={`Plant #${idx + 1}`}\n                />\n                <CardContent>\n                    <Box>\n                        <Select \n                            value={plantDetails.type}\n                            label=\"Type\"\n                            name=\"type\"\n                            onChange={handleInputChange}>\n                            <MenuItem value=\"\">--</MenuItem>\n                            {plantType.map(type => <MenuItem value={type} key={plantType.indexOf(type)}>{type}</MenuItem>)}\n                        </Select>\n                    </Box>\n                    <Box>\n                        <TextField\n                            label=\"Price\"\n                            name=\"price\"\n                            fullWidth\n                            inputProps={{ inputMode: 'numeric', pattern: '[0-9]*'}}\n                            value={plantDetails.price}\n                            variant=\"outlined\"\n                            onChange={handleInputChange}\n                        />\n                    </Box>\n                    <Box>\n                        <TextField\n                            label=\"Description\"\n                            name=\"description\"\n                            fullWidth\n                            multiline\n                            maxRows={4}\n                            inputProps={{ maxLength: CHARACTER_LIMIT }}\n                            value={plantDetails.description}\n                            variant=\"outlined\"\n                            onChange={handleInputChange}\n                        />\n                    </Box>\n                    <Box>\n                        <input\n                            style={{ display: \"none\" }}\n                            name=\"selectedFiles\"\n                            id={uniqueID}\n                            type=\"file\"\n                            multiple\n                            onChange={handleFileSelection}\n                        />\n                        <label htmlFor={uniqueID}>\n                            <Button variant=\"contained\" component=\"span\">\n                                Upload Image(s)\n                                </Button>\n                        </label>\n                        <Box>\n                            <List>\n                                {plantDetails.selectedFiles.map(file => <ListItem key={plantDetails.selectedFiles.indexOf(file)}>\n                                    <Typography variant=\"subtitle2\">{`${file.name.slice(0, 10)}...${file.name.slice(file.name.length - 4, file.name.length)}`}</Typography>\n                                    <Button\n                                        value={file.name}\n                                        onClick={DeleteFileFromList}\n                                    >\n                                        <CloseRounded />\n                                    </Button>\n                                </ListItem>)}\n                            </List>\n                        </Box>\n                    </Box>\n                </CardContent>\n                <CardActions>\n                    <Button onClick={handleSavePlant}>Save</Button>\n                    <Button onClick={handleClearForm}>Clear</Button>\n                </CardActions>\n            </Card>                       \n                        </>\n    )\n}\n\nexport default PlantDetails;"]},"metadata":{},"sourceType":"module"}