{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport * as api from '../api/index'; //Slice ** Think of Slice as a feature for the application.\n\nconst slice = createSlice({\n  name: 'plants',\n  initialState: {\n    plants: [],\n    amount: 0,\n    status: 'idle',\n    //'idel' | 'loading' | 'succeeded' | 'failed'\n    error: null\n  },\n  reducers: {},\n\n  extraReducers(builder) {\n    builder.addCase(fetchAllPlants.pending, (state, action) => {\n      state.status = 'loading';\n      console.log('loading');\n    }).addCase(fetchAllPlants.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.plants = action.payload;\n      state.amount = 8;\n    }).addCase(fetchAllPlants.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(createNewPlant.pending, (state, action) => {\n      state.status = 'loading';\n    }).addCase(createNewPlant.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.plants.push(action.payload);\n    }).addCase(createNewPlant.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(deletePlant.pending, (state, action) => {\n      state.status = 'loading';\n    }).addCase(deletePlant.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      let newList = state.plants.filter(plant => plant._id !== action.payload);\n      state.plants = newList;\n    }).addCase(deletePlant.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(editPlant.pending, (state, action) => {\n      state.status = 'loading';\n    }).addCase(editPlant.fulfilled, (state, action) => {\n      let newList = state.plants.filter(plant => plant._id !== action.payload._id);\n      newList.push(action.payload);\n      state.plants = newList;\n      state.status = 'succeeded';\n    }).addCase(editPlant.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n\n});\nexport default slice.reducer; // Exporting State\n\nexport const SelectAllPlants = state => state.plants.plants;\n_c = SelectAllPlants;\nexport const getPlantsStatus = state => state.plants.status;\nexport const getPlantsError = state => state.plants.error; // Exporting Actions \n\nexport const createNewPlant = createAsyncThunk('plants/createNewPlant', async plantInfo => {\n  try {\n    let {\n      data\n    } = await api.createNewPlant(plantInfo);\n    return data;\n  } catch (error) {}\n});\nexport const fetchAllPlants = createAsyncThunk('plants/fetchAllPlants', async () => {\n  try {\n    let {\n      data\n    } = await api.fetchAllPlants();\n    return data;\n  } catch (error) {}\n});\nexport const deletePlant = createAsyncThunk('plants/deletePlant', async id => {\n  try {\n    api.deleteOnePlant(id);\n    return id;\n  } catch (error) {}\n});\nexport const editPlant = createAsyncThunk('plants/editPlant', async plantInfo => {\n  try {\n    api.editPlant(plantInfo);\n    return plantInfo;\n  } catch (error) {}\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectAllPlants\");","map":{"version":3,"sources":["/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/store/plantsSlice.js"],"names":["createAsyncThunk","createSlice","api","slice","name","initialState","plants","amount","status","error","reducers","extraReducers","builder","addCase","fetchAllPlants","pending","state","action","console","log","fulfilled","payload","rejected","message","createNewPlant","push","deletePlant","newList","filter","plant","_id","editPlant","reducer","SelectAllPlants","getPlantsStatus","getPlantsError","plantInfo","data","id","deleteOnePlant"],"mappings":"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","sourcesContent":["\nimport {createAsyncThunk, createSlice} from '@reduxjs/toolkit';\nimport * as api from '../api/index'; \n\n//Slice ** Think of Slice as a feature for the application.\n\nconst slice = createSlice({\n    name: 'plants', \n    initialState: {\n        plants: [],\n        amount: 0, \n        status: 'idle', //'idel' | 'loading' | 'succeeded' | 'failed'\n        error: null\n    }, \n    reducers: {\n\n    }, \n    extraReducers(builder){\n        builder\n            .addCase(fetchAllPlants.pending, (state, action)=>{\n                state.status = 'loading'; \n                console.log('loading')\n            })\n            .addCase(fetchAllPlants.fulfilled, (state, action)=>{\n                state.status = 'succeeded'\n                state.plants = action.payload\n                \n                state.amount = 8\n            })\n            .addCase(fetchAllPlants.rejected, (state, action) => {\n                state.status = 'failed'\n                state.error = action.error.message\n            })\n            .addCase(createNewPlant.pending, (state, action) => {\n                state.status = 'loading';\n            })\n            .addCase(createNewPlant.fulfilled, (state, action) => {\n                state.status = 'succeeded'\n                state.plants.push(action.payload)\n            })\n            .addCase(createNewPlant.rejected, (state, action) => {\n                state.status = 'failed'\n                state.error = action.error.message\n            })\n            .addCase(deletePlant.pending, (state, action) => {\n                state.status = 'loading';\n            })\n            .addCase(deletePlant.fulfilled, (state, action) => {\n                state.status = 'succeeded'\n                let newList = state.plants.filter(plant => plant._id !== action.payload); \n                state.plants =  newList\n            })\n            .addCase(deletePlant.rejected, (state, action) => {\n                state.status = 'failed'\n                state.error = action.error.message\n            })\n            .addCase(editPlant.pending, (state, action) => {\n                state.status = 'loading';\n            })\n            .addCase(editPlant.fulfilled, (state, action) => {\n                let newList = state.plants.filter(plant => plant._id !== action.payload._id);\n                newList.push(action.payload); \n                state.plants = newList;\n                state.status = 'succeeded'\n            })\n            .addCase(editPlant.rejected, (state, action) => {\n                state.status = 'failed'\n                state.error = action.error.message\n            })\n            \n    }\n}); \n\n\nexport default slice.reducer; \n\n// Exporting State\nexport const SelectAllPlants = (state) => state.plants.plants;\nexport const getPlantsStatus = (state) => state.plants.status;\nexport const getPlantsError = (state) => state.plants.error;\n\n// Exporting Actions \nexport const createNewPlant = createAsyncThunk('plants/createNewPlant', async (plantInfo) =>{\n    try {\n        let {data} = await api.createNewPlant(plantInfo); \n        return data; \n    } catch (error) {\n        \n    }\n})\nexport const fetchAllPlants = createAsyncThunk('plants/fetchAllPlants', async () =>{\n    try {\n        let { data } = await api.fetchAllPlants();\n        return data\n    } catch (error) {\n\n    }\n})\nexport const deletePlant = createAsyncThunk('plants/deletePlant', async(id)=>{\n    try {\n        api.deleteOnePlant(id); \n        return id; \n    } catch (error) {\n        \n    }\n})\nexport const editPlant = createAsyncThunk('plants/editPlant', async(plantInfo) =>{\n    try {\n        api.editPlant(plantInfo); \n        return plantInfo\n    } catch (error) {\n        \n    }\n})\n"]},"metadata":{},"sourceType":"module"}