[{"/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/index.js":"1","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/App.js":"2","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/reportWebVitals.js":"3","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Errors/NotFound.js":"4","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Navbar/Navbar.js":"5","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/constants/pageConstants.js":"6","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Home/Home.js":"7","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/Plants.js":"8","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Pots/Pots.js":"9","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Other/Other.js":"10","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/FormAddPlant.js":"11","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/constants/sizes.js":"12","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/FormConfirmAddPlant.js":"13","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/constants/limits.js":"14","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/store/store.js":"15","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/constants/actionTypes.js":"16","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/api/index.js":"17","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/models/fileClass.js":"18","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/FormConfirmClear.js":"19","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/PlantCard.js":"20","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/PlantListItem.js":"21","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/constants/status.js":"22","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/FormConfirmDelete.js":"23","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/store/plantSlice.js":"24","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/store/plantsSlice.js":"25","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Common/ErrorMessage.js":"26","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Common/LoadingSpinner.js":"27","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/services/validation.js":"28","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/PlantCard/EditContent.js":"29","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/PlantCard/PresentationContent.js":"30","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/PlantsContainer.js":"31","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/models/generalPlantInfo.js":"32","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/models/plantSpecifics.js":"33","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/PlantSpecifics/PlantDetails.js":"34","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/constants/plantType.js":"35","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Common/WarningMessage.js":"36","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/PlantSection.js":"37","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/lists/genusList.js":"38","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/lists/plantTypeList.js":"39","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/services/fileSelection.js":"40"},{"size":794,"mtime":1651953008035,"results":"41","hashOfConfig":"42"},{"size":1422,"mtime":1661546488243,"results":"43","hashOfConfig":"42"},{"size":362,"mtime":1650803484546,"results":"44","hashOfConfig":"42"},{"size":244,"mtime":1650328323193,"results":"45","hashOfConfig":"42"},{"size":1085,"mtime":1651412783263,"results":"46","hashOfConfig":"42"},{"size":58,"mtime":1650805157626,"results":"47","hashOfConfig":"42"},{"size":301,"mtime":1650327315579,"results":"48","hashOfConfig":"42"},{"size":2298,"mtime":1658063909876,"results":"49","hashOfConfig":"42"},{"size":262,"mtime":1650328775013,"results":"50","hashOfConfig":"42"},{"size":278,"mtime":1650328903614,"results":"51","hashOfConfig":"42"},{"size":10393,"mtime":1663190948855,"results":"52","hashOfConfig":"42"},{"size":43,"mtime":1651415495226,"results":"53","hashOfConfig":"42"},{"size":2339,"mtime":1662914708190,"results":"54","hashOfConfig":"42"},{"size":34,"mtime":1651943637162,"results":"55","hashOfConfig":"42"},{"size":451,"mtime":1654798056381,"results":"56","hashOfConfig":"42"},{"size":134,"mtime":1651953853445,"results":"57","hashOfConfig":"42"},{"size":517,"mtime":1661546593579,"results":"58","hashOfConfig":"42"},{"size":197,"mtime":1652032820677,"results":"59","hashOfConfig":"42"},{"size":880,"mtime":1653677862454,"results":"60","hashOfConfig":"42"},{"size":4694,"mtime":1662153872812,"results":"61","hashOfConfig":"42"},{"size":1285,"mtime":1661546470036,"results":"62","hashOfConfig":"42"},{"size":48,"mtime":1653672576176,"results":"63","hashOfConfig":"42"},{"size":853,"mtime":1653680939022,"results":"64","hashOfConfig":"42"},{"size":1844,"mtime":1661619523340,"results":"65","hashOfConfig":"42"},{"size":5856,"mtime":1662149093899,"results":"66","hashOfConfig":"42"},{"size":213,"mtime":1655326473456,"results":"67","hashOfConfig":"42"},{"size":177,"mtime":1655325339712,"results":"68","hashOfConfig":"42"},{"size":934,"mtime":1662914191403,"results":"69","hashOfConfig":"42"},{"size":3041,"mtime":1662154020713,"results":"70","hashOfConfig":"42"},{"size":1363,"mtime":1661617990384,"results":"71","hashOfConfig":"42"},{"size":1921,"mtime":1662151452539,"results":"72","hashOfConfig":"42"},{"size":234,"mtime":1661550023653,"results":"73","hashOfConfig":"42"},{"size":304,"mtime":1662760083265,"results":"74","hashOfConfig":"42"},{"size":8450,"mtime":1663190151276,"results":"75","hashOfConfig":"42"},{"size":58,"mtime":1658674268547,"results":"76","hashOfConfig":"42"},{"size":402,"mtime":1659664225235,"results":"77","hashOfConfig":"42"},{"size":925,"mtime":1662151470519,"results":"78","hashOfConfig":"42"},{"size":119,"mtime":1661617540613,"results":"79","hashOfConfig":"42"},{"size":48,"mtime":1661620497883,"results":"80","hashOfConfig":"42"},{"size":714,"mtime":1662153589997,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},"1h9ntso",{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"85"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"85"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"85"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"85"},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120"},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"85"},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"146","messages":"147","suppressedMessages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"85"},{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"85"},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"85"},{"filePath":"158","messages":"159","suppressedMessages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"161","messages":"162","suppressedMessages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"85"},{"filePath":"165","messages":"166","suppressedMessages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"168","messages":"169","suppressedMessages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"171","messages":"172","suppressedMessages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"174","messages":"175","suppressedMessages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"85"},{"filePath":"178","messages":"179","suppressedMessages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"85"},{"filePath":"182","messages":"183","suppressedMessages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"185","messages":"186","suppressedMessages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"85"},{"filePath":"189","messages":"190","suppressedMessages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"192","messages":"193","suppressedMessages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"195","messages":"196","suppressedMessages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"85"},{"filePath":"199","messages":"200","suppressedMessages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"202","messages":"203","suppressedMessages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"205","messages":"206","suppressedMessages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"85"},{"filePath":"209","messages":"210","suppressedMessages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"85"},{"filePath":"213","messages":"214","suppressedMessages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"85"},{"filePath":"217","messages":"218","suppressedMessages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},"/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/index.js",[],[],[],"/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/App.js",["220","221"],[],"import React, {useEffect} from 'react'; \n// Import Router components\nimport { Route, Routes, Navigate } from 'react-router-dom';\n// Import Redux components\nimport { useDispatch } from 'react-redux'; \n\n// Import Components \nimport Navbar from './components/Navbar/Navbar.js';\nimport Home from './components/Home/Home.js'; \nimport Plants from './components/Plants/Plants.js';\nimport FormAddPlant from './components/Plants/FormAddPlant.js'; \nimport PlantCard from './components/Plants/PlantCard.js';\nimport Pots from './components/Pots/Pots.js';\nimport Other from './components/Other/Other.js';\nimport NotFound from './components/Errors/NotFound'\n// Import material UI\n\nconst App = () => {\n\n    return(\n        <div>\n            <Navbar />\n            <div>\n                <Routes>\n                    <Route path='home' element={<Home />}/>\n                    <Route path='plants' element={<Plants />} />\n                    <Route path='add-plant' element={<FormAddPlant />} />\n                    <Route path='plant-details/:sectionId/:id' element={<PlantCard />} />\n                    <Route path='pots' element={<Pots />} />\n                    <Route path='other' element={<Other />} />\n                    <Route path='/' element={<Navigate to='home'/>} />\n                    <Route path='*' element={<NotFound />} />\n                </Routes>\n            </div>\n        </div>\n      \n    )\n}\n\nexport default App; ","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/reportWebVitals.js",[],[],"/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Errors/NotFound.js",["222"],[],"import React from 'react';\nimport { Button, Typography } from '@mui/material';\nconst NotFound = () => {\n    return (\n        <div>\n            <Typography variant=\"h1\">Page Not Found</Typography>\n        </div>\n    )\n}\n\nexport default NotFound;","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Navbar/Navbar.js",["223","224","225","226","227","228"],[],"import React from 'react';\n// Page Route Components\nimport { Link, useHistory, useLocation } from 'react-router-dom';\n// import material ui components\nimport { Typography, AppBar, Toolbar, Container, Box, Button, Menu, MenuItem } from '@mui/material';\n// import constants\nimport {pages} from '../../constants/pageConstants.js'; \nconst Navbar = () => {\n    function handleCloseNavMenu(){\n\n    }; \n    return (\n        <AppBar position=\"static\">\n            <Container maxWidth=\"xl\">\n                <Toolbar disableGutters>\n                    <Box sx={{ flexGrow: 1, display: { xs: 'flex'} }}>\n                        {pages.map((page) => (\n                            <Button key={pages.indexOf(page)}>\n                                <Link \n                                    to={`/${page}`} \n                                    replace\n                                    >{page}</Link>\n                            </Button>\n                        ))}\n                    </Box>\n                </Toolbar>\n            </Container>\n        </AppBar>\n    )\n}\n\nexport default Navbar;","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/constants/pageConstants.js",[],[],"/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Home/Home.js",[],[],"/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/Plants.js",["229","230"],[],"import React, { useState, useEffect, useRef} from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\n// Import Redux store components\nimport { fetchAllPlants, getPlantsAmount, getPlantsStatus } from '../../store/plantsSlice'; \nimport { Button, Box, Input, Typography} from '@mui/material';\nimport SearchIcon from '@mui/icons-material/Search'; \nimport AddIcon from '@mui/icons-material/Add';\nimport {SelectAllPlants} from '../../store/plantsSlice'; \nimport PlantsContainer from './PlantsContainer';\n\nconst Plants = () => {\n    const plantsStatus = useSelector(getPlantsStatus); \n    const plantList = useSelector(SelectAllPlants); \n    const plantsAmount = useSelector(getPlantsAmount); \n    const [searchedString, setSearchedString] = useState(\"\");\n\n    const searchBarRef = useRef();  \n    const currentRef = useRef(1);\n    \n    const dispatch = useDispatch(); \n    // UseEffects only\n    useEffect(()=>{\n        // used to count current renders\n        currentRef.current = currentRef.current + 1; \n    })\n    useEffect(() => {\n        if(plantsStatus == 'idle'){\n            dispatch(fetchAllPlants())\n        }   \n    }, [plantsStatus,dispatch]); \n \n    // Work functions \n\n    function handleSearchedStringChange(e){\n        setSearchedString(e.target.value)\n    }\n    function focus(){\n        searchBarRef.current.firstChild.focus()\n    }\n    \n    return (\n        <div>\n            <Typography>Collection Total: {plantsAmount}</Typography>\n            <Box sx={{ margin: '1rem 0', backgroundColor: 'whitesmoke'}}>\n                <Box>\n                        <Input \n                            onChange={handleSearchedStringChange}\n                            sx={{ width: '60%'}}\n                            ref={searchBarRef}></Input>\n                        <Button onClick={focus}>\n                            <SearchIcon />\n                        </Button>\n                        <Typography>{searchedString}</Typography>\n                </Box>\n                <Box>\n                    <Button><Link to=\"/add-plant\" replace><AddIcon />Plant</Link></Button>\n                </Box>\n               \n            </Box>\n            <PlantsContainer searchedString={searchedString} />\n        </div>\n    )\n}\n\nexport default Plants;","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Pots/Pots.js",[],[],"/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Other/Other.js",[],[],"/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/FormAddPlant.js",["231","232","233","234"],[],"import React from 'react';\nimport {useState, useEffect} from 'react'; \nimport { useDispatch, useSelector } from 'react-redux'; \n// Redux store functions\nimport { createNewPlant} from '../../store/plantsSlice';\n// Material UI Section \nimport { Button, Typography, Paper, Box, Input, InputLabel, Select, MenuItem,Radio, FormControl, FormLabel, RadioGroup, FormControlLabel} from '@mui/material';\n\nimport AddIcon from '@mui/icons-material/Add';\n// Component Imports\nimport FormConfirmAddPlant from './FormConfirmAddPlant'; \nimport FormConfirmClear from './FormConfirmClear';\n// Other imports \nimport genusList from '../../lists/genusList';\n\nimport { useNavigate } from 'react-router';\nimport { PlantObjectValidator } from '../../services/validation';\nimport GeneralPlantInfo from '../../models/generalPlantInfo';\n\nimport PlantDetails from './PlantSpecifics/PlantDetails';\nimport PlantSpecifics from '../../models/plantSpecifics';\nimport {nanoid} from 'nanoid'; \nimport WarningMessage from '../Common/WarningMessage';\n\nconst FormAddPlant = (e) => {\n    // Local Storage variables\n    let localStorageData = JSON.parse(localStorage.getItem('plantInfo')) || new GeneralPlantInfo(\"\", \"\");\n    let localStorageQuantityArray = JSON.parse(localStorage.getItem('quantityArray')) || []; \n    let localStoragePlantIndex = JSON.parse(localStorage.getItem('plantIndex')) || 1; \n\n    // Component State\n    const [plantInfo, setPlantInfo] = useState(localStorageData);\n    const [quantityArray, setQuantityArray] = useState(localStorageQuantityArray); \n    const [multiple, setMultiple] = useState(quantityArray.length > 1); \n    const [plantIndex, setPlantIndex] = useState(localStoragePlantIndex);\n    const [disableAdd, setDisableAdd] = useState(false)\n    const [formHasAllRequiredFields, setFormHasAllRequiredFields] = useState(true); \n    const [isQuantityArrayValid, setisQuantityArrayValid] = useState(true); \n    const [formConfirmVisible, setFormConfirmVisible] = useState(false); \n    const [formConfirmClearVisible, setFormConfirmClearVisible] = useState(false); \n    const [showWarningMessage, setShowWarningMessage] = useState(false); \n\n    // Dispatch\n    const dispatch = useDispatch()\n\n    // Navigation \n    const navigate = useNavigate()\n    \n    // Set one default plant card if the array of plants is empty. This allows the user to \n    // start off with one object when visiting this page. \n    useEffect(()=>{\n        if(!quantityArray.length){\n            let arr = []; \n            arr.push(new PlantSpecifics(\"\", 0, \"\", [], 0))\n            setQuantityArray(arr); \n        }else{\n            if(validateQuantityArray()){\n                setDisableAdd(false); \n            }else{\n                setDisableAdd(true);\n            }\n        }\n    },[quantityArray]); \n\n    // Constantly saving relevant state into local storage in case the user navigates away from the page\n    useEffect(()=>{\n        localStorage.setItem('plantInfo', JSON.stringify(plantInfo))\n        localStorage.setItem('quantityArray', JSON.stringify(quantityArray));\n        localStorage.setItem('plantIndex', JSON.stringify(plantIndex));\n    }, [plantInfo, quantityArray, plantIndex])\n\n    // Handlers and Actions \n    function handleInputChange(event){\n        let newObj = {}; \n\n        if (event.target.name === 'price' && event.target.value > 0) newObj[event.target.name] = parseInt(event.target.value);\n        else newObj[event.target.name] = event.target.value;\n        \n        setPlantInfo({\n            ...plantInfo, \n            ...newObj\n        })  \n    }; \n    \n    function handleMultiple(e){\n        let val = e.target.value; \n        if(val.toLocaleUpperCase() == \"Single\".toLocaleUpperCase()){\n            if(quantityArray.length > 1) setShowWarningMessage(true)\n            if(quantityArray.length === 1) setMultiple(false); \n        }else{\n            setMultiple(true); \n        } \n    }\n    function handleSwitchingFromMultipleToSingle(){\n        setQuantityArray([]); \n        setMultiple(false); \n        setShowWarningMessage(false); \n    }\n\n    function handleDeletePlantFromList(idx){\n        let filteredArr = quantityArray.filter(obj => obj.idx !== idx)\n        setQuantityArray(filteredArr);\n    }\n\n    function handleAddPlantToList(){\n        let tempArr = [...quantityArray, new PlantSpecifics(\"\", 0, \"\", [], plantIndex) ];\n        setQuantityArray(tempArr); \n        setPlantIndex(plantIndex + 1)\n    }\n\n    function handleSavePlant(detailsObj){\n        // validation here\n        let newObj = quantityArray.find(obj => detailsObj.idx == obj.idx)\n        let idxOfObj = quantityArray.indexOf(newObj);\n        // Change price to float with two decimal places \n        detailsObj.price = parseFloat(detailsObj.price).toFixed(2); \n        // Mark the object as saved\n        detailsObj.saved = true; \n        let newArr = [...quantityArray.slice(0,idxOfObj), detailsObj, ...quantityArray.slice(idxOfObj+1)]; \n        setQuantityArray(newArr); \n    }\n\n    function handlePreSubmit(e){\n        // Prevent postback \n        e.preventDefault(); \n        if (validatePlantObject() && validateQuantityArray(true)){\n            setFormConfirmVisible(true); \n        }\n    }\n    function handleSubmit(e){\n\n        e.preventDefault(); \n        // Add quantity array to our plant object\n        plantInfo.multiple = quantityArray; \n        dispatch(createNewPlant(plantInfo));\n        setFormConfirmVisible(false); \n        localStorage.removeItem('plantInfo'); \n        localStorage.removeItem('quantityArray'); \n        localStorage.removeItem('plantIndex'); \n        navigate('/plants', {replace: true})\n    }\n\n    function handleClearForm(){\n        let blankPlantObject = new GeneralPlantInfo(\"\", \"\")\n        setPlantInfo(blankPlantObject)\n    }\n\n    // Form Validation \n    function validateQuantityArray(showMessage = false){\n        let result = true; \n        for (let i = 0; i < quantityArray.length; i++) {\n            const details = quantityArray[i];\n            if(!details.saved){\n                if(showMessage) setisQuantityArrayValid(false); \n                return false; \n            }\n        }\n        setisQuantityArrayValid(true); \n        return result; \n    }\n    function validatePlantObject(){\n        let PlantValidator = new PlantObjectValidator(plantInfo); \n        let result  = PlantValidator.validatePlantObject(); \n        setFormHasAllRequiredFields(PlantValidator.hasAllRequiredFields); \n        return result; \n    }\n    \n    return (\n        <Paper>\n            {formConfirmVisible && <FormConfirmAddPlant plantInfo={plantInfo} quantityArray={quantityArray} setFormConfirmVisible={setFormConfirmVisible} handleSubmit={handleSubmit}/>}\n            {formConfirmClearVisible && <FormConfirmClear handleClearForm={handleClearForm} setFormConfirmClearVisible={setFormConfirmClearVisible}/>}\n            {showWarningMessage && <WarningMessage message=\"Changing to Single will delete all other plants. Do you wish to proceed?\" handleYes={handleSwitchingFromMultipleToSingle} handleNo={()=>setShowWarningMessage(false)}/>}\n            {formConfirmVisible || formConfirmClearVisible ? <></> : \n                <form autoComplete=\"off\" noValidate onSubmit={(e) => handlePreSubmit(e)}>\n                \n                    <Box>\n                        <Typography>Describe the new member!</Typography>\n                    </Box>\n                    <Box>\n                        {!formHasAllRequiredFields && <Typography color=\"error\">* Name and genus are required.</Typography>}\n                        {!isQuantityArrayValid && <Typography color=\"error\">* Please save all plants. You can discard if necessary.</Typography>}\n                    </Box>\n                    <Box sx={{backgroundColor: '#FAFAFA', margin: '1rem 0'}}>\n                        <Box>\n                            <InputLabel>Name</InputLabel>\n                            <Input name=\"name\" type=\"text\" value={plantInfo.name} onChange={handleInputChange}></Input>\n                        </Box>\n                        <Box>\n                            <InputLabel>Genus</InputLabel>\n                            <Select label=\"Genus\" name=\"genus\" value={plantInfo.genus ? plantInfo.genus : ''} onChange={handleInputChange}>\n                                <MenuItem value=\"\"> -- </MenuItem>\n                                {\n                                    genusList.map(genus => <MenuItem key={nanoid()} value={genus}>{genus}</MenuItem>)\n                                }\n                            </Select>\n                        </Box>\n                        <Box>\n                            <FormControl>\n                                <FormLabel>How Many?</FormLabel>\n                                <RadioGroup onChange={handleMultiple}>\n                                    <FormControlLabel value=\"Single\" label=\"Single\" control={<Radio checked={!multiple} />} />\n                                    <FormControlLabel value=\"Multiple\" label=\"Multiple\" control={<Radio checked={multiple} />} />\n                                </RadioGroup>\n                            </FormControl>\n                            {multiple && <Box><Button variant=\"contained\" color=\"success\" disabled={disableAdd} onClick={handleAddPlantToList}>Add<AddIcon /></Button></Box>}\n                        </Box>\n                    </Box>\n                    <Box>\n                        <Box>\n                            {\n                                quantityArray.map((info, index) => (\n                                    <PlantDetails plantInfo={info}\n                                        listIndex ={index}\n                                        handleSavePlant={handleSavePlant}\n                                        handleDeletePlantFromList={handleDeletePlantFromList}\n                                        key={nanoid()}\n                                    />))\n                            }\n                        </Box>\n                        \n                    </Box>\n                    <Box margin={'2rem 0'}>\n                        <Button variant=\"contained\" size=\"large\" type=\"submit\">Add</Button>\n                        <Button variant=\"contained\" color=\"error\" size=\"large\" onClick={() => setFormConfirmClearVisible(true)}>Clear</Button>\n                    </Box>\n                </form>\n            }\n        </Paper>\n    )\n}\n\nexport default FormAddPlant;","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/constants/sizes.js",["235"],[],"export default [\"Small\", \"Medium\", \"Large\"]","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/FormConfirmAddPlant.js",[],[],"/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/constants/limits.js",[],[],"/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/store/store.js",[],[],"/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/constants/actionTypes.js",[],[],"/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/api/index.js",[],[],"/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/models/fileClass.js",[],[],"/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/FormConfirmClear.js",[],[],"/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/PlantCard.js",["236","237","238","239","240","241","242"],[],"import React, {useEffect, useState} from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { useParams, useNavigate} from 'react-router-dom';\n// Redux store functions\nimport { deletePlant, editPlant} from '../../store/plantsSlice';\nimport {fetchPlant, SelectSinglePlant, getPlantStatus, getPlantError, resetState, getPlantParentName} from '../../store/plantSlice'; \n// Meterial UI Section\nimport { Card, Box, Typography} from '@mui/material';\n\n// Other Imports \nimport FormConfirmDelete from './FormConfirmDelete';\nimport { PlantObjectValidator } from '../../services/validation';\nimport LoadingSpinner from '../Common/LoadingSpinner';\nimport ErrorMessage from '../Common/ErrorMessage';\nimport EditContent from './PlantCard/EditContent';\nimport PresentationContent from './PlantCard/PresentationContent';\nimport { setFileSelection } from '../../services/fileSelection';\n\nconst PlantCard = () => { \n    const { sectionId, id } = useParams();\n    const plant = useSelector(SelectSinglePlant); \n    const plantParentName = useSelector(getPlantParentName); \n    const plantStatus = useSelector(getPlantStatus); \n    const plantError = useSelector(getPlantError); \n    const [plantInfo, setPlantInfo] = useState({});\n    const [editMode, setEditMode] = useState(false); \n    const [formConfirmDeleteVisible, setFormConfirmDeleteVisible] = useState(false); \n    const [formHasAllRequiredFields, setFormHasAllRequiredFields] = useState(true);\n    const [inputOfNumberValid, setInputOfNumberValid] = useState(true);\n    const dispatch = useDispatch(); \n    const navigate = useNavigate(); \n    console.log(plant)\n    useEffect(() => {\n        if(plantStatus == 'idle'){\n            dispatch(fetchPlant(id))\n        }\n        \n    }, [plantStatus, id, dispatch]); \n    useEffect(()=>{\n        setPlantInfo(plant)\n    }, [plant]); \n\n    useEffect(()=>{\n        return () =>{\n            dispatch(resetState()); \n        }\n    }, [])\n    let content; \n\n    if(plantStatus == 'loading'){\n        content = <LoadingSpinner />\n    } else if(plantStatus == 'succeeded'){\n        content = <PresentationContent plant={plant} handleEditMode={handleEditMode} setFormConfirmDeleteVisible={setFormConfirmDeleteVisible}/>\n    } else if(plantStatus == 'failed'){\n        content = <ErrorMessage /> \n    }\n\n    function handleInputChange(event){\n        let newObj = {};\n        if (!isNaN(parseInt(event.target.value))) {\n            newObj[event.target.name] = parseInt(event.target.value);\n        } else {\n            newObj[event.target.name] = event.target.value;\n        }\n        setPlantInfo({\n            ...plantInfo,\n            ...newObj\n        })\n    }\n    function handleFileSelection(event){\n        console.log('clicked file')\n        setFileSelection(event, plantInfo, setPlantInfo); \n    }\n    function handleEditMode(){\n        setEditMode(!editMode);  \n    }; \n\n    function handleSaveEdit(){\n        let PlantValidator = new PlantObjectValidator(plantInfo)\n        let result = PlantValidator.validatePlantDetailsObject(); \n        setFormHasAllRequiredFields(PlantValidator.hasAllRequiredFields);\n        setInputOfNumberValid(PlantValidator.inputNumberIsValid);\n        if(result){\n            console.log('success ---->', plantInfo)\n            // dispatch(editPlant(plantInfo));\n            // navigate('/plants', {replace: true}); \n        } \n    }; \n\n    function handleDeleteItem(){\n        //console.log(sectionId, ' parent---->', id, ' childid --> ')\n        let idInfoObject = {sectionId: sectionId, id: id}\n        dispatch(deletePlant(idInfoObject));\n        navigate('/plants', {replace: true}); \n    }; \n    \n    return (\n            <Box>\n            {formConfirmDeleteVisible && <FormConfirmDelete handleDeleteItem={handleDeleteItem} setFormConfirmDeleteVisible={setFormConfirmDeleteVisible} /> }\n                <Card sx={{ margin: \"10px\" }}>\n                <Typography variant=\"h5\">{plantParentName}</Typography>\n                    {editMode ? (\n                    <EditContent plant={plant} plantInfo={plantInfo}\n                              formHasAllRequiredFields={formHasAllRequiredFields}\n                              inputOfNumberValid={inputOfNumberValid} \n                              handleSaveEdit={handleSaveEdit}\n                              handleEditMode={handleEditMode}\n                              handleInputChange={handleInputChange}\n                              handleFileSelection={handleFileSelection}\n                              />\n                    ) : (\n                        content\n                    )}\n                </Card>\n            </Box>\n           \n        \n      \n    )\n}\n\nexport default PlantCard;","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/PlantListItem.js",["243","244","245","246"],[],"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Typography, ListItem, Badge, Box, Card, CardHeader, CardActionArea, CardActions, CardContent, CardMedia} from '@mui/material';\nimport PreviewIcon from '@mui/icons-material/Preview';\nimport ModeEditOutlineTwoToneIcon from '@mui/icons-material/ModeEditOutlineTwoTone';\nconst PlantListItem = ({ plant, sectionId }) => {\n    \n    return (\n       <ListItem >\n            <Card sx={{width: '100%'}}>\n                <CardActions>\n                    <Button> <Link to={`/plant-details/${sectionId}/${plant._id}`}><ModeEditOutlineTwoToneIcon /></Link></Button>\n                </CardActions>\n                <CardHeader\n                title={plant.type}\n                subheader={`$${plant.price}`}>\n                </CardHeader>\n                <CardMedia\n                    component=\"img\"\n                    height=\"194\"\n                    image={`${plant.selectedFiles[0].base64}`}\n                    alt=\"Paella dish\"\n                />\n                <CardContent>\n                    <Typography variant=\"body2\" color=\"text.secondary\">{plant.description}</Typography>\n                </CardContent>\n                \n            </Card>\n       </ListItem>\n    )\n}\n\nexport default PlantListItem;","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/constants/status.js",["247"],[],"export default [\"active\", \"pending\", \"complete\"]","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/FormConfirmDelete.js",[],[],"/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/store/plantSlice.js",["248"],[],"\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport * as api from '../api/index';\n\nconst slice = createSlice({\n    name: 'plant',\n    initialState: {\n        plant: {},\n        parentName: null,\n        status: 'idle', //'idel' | 'loading' | 'succeeded' | 'failed'\n        error: null\n    },\n    reducers: {\n        resetState(state){\n            state.plant.data = {}; \n            state.status = 'idle'; \n        }\n    }, \n    extraReducers(buildrer){\n        buildrer\n            .addCase(fetchPlant.pending, (state,action)=>{\n                state.status = 'loading';\n            })\n            .addCase(fetchPlant.fulfilled, (state, action) => {\n                if(action.payload != undefined){\n                    state.parentName = action.payload.parentName; \n                    delete action.payload.parentName; \n                    state.plant.data = action.payload\n                    state.status = 'succeeded'\n                }else{\n                    state.status = 'failed'\n                }\n            })\n            .addCase(fetchPlant.rejected, (state, action) => {\n                state.status = 'failed'\n                state.error = action.error.message\n            })\n    }\n})\nexport default slice.reducer; \n\nexport const { resetState } = slice.actions;\n\nexport const SelectSinglePlant = (state) => state.plant.plant.data; \nexport const getPlantParentName = (state) => state.plant.parentName; \nexport const getPlantStatus = (state) => state.plant.status; \nexport const getPlantError = (state) => state.plant.error; \n\nexport const resetPlantstate = async ()=>{\n    resetState()\n}\n\n\nexport const fetchPlant = createAsyncThunk('plant/fetchPlant', async (id) => {\n    try {\n\n        console.log(id)\n        let { data } = await api.fetchOnePlant(id);\n        return data\n    } catch (error) {\n\n    }\n})","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/store/plantsSlice.js",[],[],"/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Common/ErrorMessage.js",[],[],"/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Common/LoadingSpinner.js",[],[],"/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/services/validation.js",["249","250","251","252","253","254"],[],"export class PlantObjectValidator{\n    constructor(plantInfo){\n        this.plantInfo = plantInfo; \n        this.hasAllRequiredFields = true; \n        this.inputNumberIsValid = true; \n    }\n    \n    validatePlantObject(){ \n        if (this.plantInfo.name.trim() == \"\" || this.plantInfo.genus.trim() == \"\" ) {\n            this.hasAllRequiredFields = false; \n        }\n        return this.hasAllRequiredFields && this.inputNumberIsValid; ;\n    } \n    validatePlantDetailsObject() {\n        if (this.plantInfo.description == \"\" || this.plantInfo.price == 0 || this.plantInfo.type == \"\" || this.plantInfo.selectedFiles.length == 0) {\n            // Fill out entire form\n            this.hasAllRequiredFields = false; \n        } else if (isNaN(this.plantInfo.price) || parseInt(this.plantInfo.price) < 0) {\n            this.inputNumberIsValid = false; \n        }\n        return this.hasAllRequiredFields && this.inputNumberIsValid;\n    }\n}","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/PlantCard/EditContent.js",["255","256","257"],[],"import React from 'react';\nimport { Card, Typography, CardContent, CardMedia, Box, FormControl, InputLabel, Select, MenuItem, CardActions, Input, Button} from '@mui/material';\nimport typeList from '../../../lists/plantTypeList';\nimport EditIcon from '@mui/icons-material/Edit';\nimport sizes from '../../../constants/sizes';\nimport statuses from '../../../constants/status';\n\nconst EditContent = ({ plant, plantInfo, formHasAllRequiredFields, inputOfNumberValid, handleSaveEdit, handleEditMode, handleInputChange, handleFileSelection}) => {\n    console.log(plant, plantInfo)\n    return (\n        <>\n        <CardContent>\n            <>\n                <CardMedia component=\"img\" height=\"200\" image={`${plant?.selectedFiles[0].base64}`} />\n                \n                <input name=\"selectedFiles\" \n                       id=\"file\" \n                       type=\"file\" \n                       style={{ display: 'none' }} \n                       onChange={handleFileSelection} />\n                <label htmlFor=\"file\">\n                    <Button>\n                        <EditIcon />\n                    </Button>\n                </label>\n            </>\n            <Box>\n                {!formHasAllRequiredFields && <Typography color=\"error\">* All fields and images are required.</Typography>}\n                {!inputOfNumberValid && <Typography color=\"error\">* Price is not a valid number.</Typography>}\n            </Box>\n            <Box>\n                <Box>\n                    <FormControl fullWidth>\n                        <InputLabel id=\"category\">type</InputLabel>\n                        <Select label=\"Type\" name=\"type\" id=\"type\" value={plantInfo?.type} sx={{ color: 'black' }} onChange={handleInputChange}>\n                            <MenuItem value=\"\"> -- </MenuItem>\n                                {typeList.map(genus => <MenuItem key={typeList.indexOf(genus)} value={genus}>{genus}</MenuItem>)}\n                        </Select>\n                    </FormControl>\n                </Box>\n                <Box>\n                    <FormControl fullWidth>\n                        <InputLabel id=\"description\">Description</InputLabel>\n                        <Input name='description' type=\"text\" id=\"description\" value={plantInfo?.description} sx={{ display: 'block' }} placeholder={plantInfo?.description.toString()} onChange={handleInputChange}></Input>\n                    </FormControl>\n                </Box>\n                <FormControl fullWidth>\n                    <InputLabel id=\"price\">Price</InputLabel>\n                    <Input name='price' type=\"number\" id=\"price\" value={plantInfo?.price} sx={{ display: 'block' }} placeholder={plantInfo?.price.toString()} onChange={handleInputChange}></Input>\n                </FormControl>\n            </Box>\n        </CardContent>\n        <CardActions>\n                <Button onClick={handleSaveEdit}>Save</Button>\n                <Button color=\"warning\" onClick={handleEditMode}>Cancel</Button>\n        </CardActions>\n        </>\n    )\n}\n\nexport default EditContent;","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/PlantCard/PresentationContent.js",[],[],"/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/PlantsContainer.js",["258","259","260","261","262","263","264","265","266","267","268","269","270","271","272"],[],"import React, {useEffect, useState} from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Typography, ListItem, Badge, Box, Paper, Avatar } from '@mui/material';\nimport PreviewIcon from '@mui/icons-material/Preview';\nimport PlantListItem from '../Plants/PlantListItem';\nimport { SelectAllPlants, getGenusSections } from '../../store/plantsSlice';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {getPlantsStatus } from '../../store/plantsSlice';\nimport LoadingSpinner from '../Common/LoadingSpinner';\nimport ErrorMessage from '../Common/ErrorMessage';\nimport PlantSection from './PlantSection';\n\nconst PlantsContainer = ({searchedString}) => {\n    const plantsStatus = useSelector(getPlantsStatus);\n    const genusSections = useSelector(getGenusSections); \n    const plantList = useSelector(SelectAllPlants);\n    const [filteredList, setFilteredList] = useState([])\n    useEffect(() => {\n        let list = plantList.filter(item => item.name.toUpperCase().includes(searchedString.toUpperCase()))\n        setFilteredList(list)\n    }, [searchedString])\n    if(plantsStatus == 'loading'){\n        return(<LoadingSpinner/>)\n    }\n    if(plantsStatus == 'failed'){\n        return(<ErrorMessage />)\n    }\n    if (searchedString.length == 0) {\n        return (\n            <>\n                {genusSections.map(section => <Box sx={{ }}>\n                    <Typography variant=\"h6\" sx={{marginBottom: '1rem'}}>Genus: {section}</Typography>\n                   \n                    {plantList.map(plant => {\n                        if (plant.genus == section) return <PlantSection plantSection={plant} />\n                    })}\n                </Box>)}\n            </>\n        )\n    }else{\n        return(\n            <div>\n               \n                {filteredList.map(plant => <PlantSection plantSection={plant} />)}\n            </div>\n        )\n    }\n   \n}\n\nexport default PlantsContainer;","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/models/generalPlantInfo.js",[],[],"/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/models/plantSpecifics.js",[],[],"/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/PlantSpecifics/PlantDetails.js",["273","274","275","276","277","278"],[],"import React, { useEffect, useState } from 'react';\nimport { Button, Typography, Box, List, ListItem, TextField, IconButton, Card, CardHeader, CardContent, CardActions, Select, MenuItem} from '@mui/material';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport OutlinedInput from '@mui/material/OutlinedInput';\nimport CloseRounded from '@mui/icons-material/CloseRounded';\nimport DoneIcon from '@mui/icons-material/Done';\nimport { NumericFormat } from 'react-number-format';\nimport {CHARACTER_LIMIT} from '../../../constants/limits'; \n\nimport selectedFile from '../../../models/fileClass';\nimport PlantSpecifics from '../../../models/plantSpecifics';\nimport {plantType} from '../../../constants/plantType'; \nimport { nanoid } from 'nanoid';\n\nimport { PlantObjectValidator } from '../../../services/validation';\n\nconst PlantDetails = ({ plantInfo, listIndex, handleSavePlant, handleDeletePlantFromList}) => {\n    let plantSpecificsObject = new PlantSpecifics(\"\", 0, \"\", []);\n    // let localStoragePlantDetails = JSON.parse(localStorage.getItem(`plantDetails${plantInfo.idx}`)) || plantInfo\n    let obj = plantInfo || plantSpecificsObject; \n    const [plantDetails, setPlantDetails] = useState(obj);\n    const [uniqueID, setUniqueID] = useState(nanoid()); \n    const [formCompleted, setFormCompleted] = useState(true); \n    const [isNumericOrPositive, setIsNumericOrPositive] = useState(true); \n    const regex = new RegExp('^[+-]?[0-9]{1,3}(?:,?[0-9]{3})*\\.[0 - 9]{2}$')\n   console.log(plantDetails)\n\n    function handleInputChange(event) {\n        let newObj = {};\n\n        if (event.target.name === 'price' && regex.test(event.target.value)){\n            newObj[event.target.name] = event.target.value\n        }\n        // else newObj[event.target.name] = event.target.value;\n        newObj[event.target.name] = event.target.value;\n        setPlantDetails({\n            ...plantDetails,\n            ...newObj\n        })\n    };\n\n    const toBase64 = file => new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = error => reject(error);\n    });\n\n    async function handleFileSelection(event) {\n        let files = event.target.files;\n        let tempArray = [];\n\n        if (files) {\n            for (let i = 0; i < files.length; i++) {\n                let selectedFileObj = new selectedFile(files[i].name, files[i].type, files[i].size, await toBase64(files[i]));\n                tempArray.push(selectedFileObj);\n            };\n        }\n        setPlantDetails({ ...plantDetails, selectedFiles: tempArray })\n    }\n\n    function DeleteFileFromList(event) {\n        let filteredList = plantDetails.selectedFiles.filter(file => file.name !== event.currentTarget.value);\n        setPlantDetails({ ...plantDetails, selectedFiles: [...filteredList] });\n    }\n    function DeletePlantCard(){\n        handleDeletePlantFromList(plantDetails.idx)\n    }\n\n    function handleClearForm() {\n        let clearedDetails = new PlantSpecifics(\"\", 0, \"\", [], plantDetails.idx)\n        setPlantDetails(clearedDetails)\n    }\n    function handleSave(){\n        // validation here\n        if(validatePlantDetailsObject()){\n            handleSavePlant(plantDetails); \n        }else{\n            \n        }\n    }\n    function handleEditMode(){\n        let newobj = {...plantDetails, saved: false}\n        setPlantDetails(newobj); \n    }\n\n    function validatePlantDetailsObject(){\n        let PlantValidator = new PlantObjectValidator(plantDetails);\n        let result = PlantValidator.validatePlantDetailsObject();\n        \n        setFormCompleted(PlantValidator.hasAllRequiredFields); \n        setIsNumericOrPositive(PlantValidator.inputNumberIsValid)\n        return result; \n    }\n    \n    return(\n        <>\n            <Card sx={{ maxWidth: 345, backgroundColor: '#cfd1d0', margin: '1rem .5rem'}}>\n                <CardActions disableSpacing>\n                    <IconButton onClick={DeletePlantCard}>\n                        <CloseRounded />\n                    </IconButton>\n                    {plantDetails.saved && <DoneIcon />}\n                </CardActions>\n                <CardHeader \n                    title={`Plant #${listIndex + 1}`}\n                />\n                <CardContent>\n                    <Box>\n                        {!formCompleted && <Typography sx={{color: 'red'}}>Please fill out entire form</Typography>}\n                        {!isNumericOrPositive && <Typography sx={{ color: 'red' }}>Price must be numeric and over 0.</Typography>}\n                    </Box>\n                    <Box>\n                        <Select \n                            value={plantDetails.type}\n                            label=\"Type\"\n                            name=\"type\"\n                            disabled={plantDetails.saved}\n                            onChange={handleInputChange}>\n                            <MenuItem value=\"\">--</MenuItem>\n                            {plantType.map(type => <MenuItem value={type} key={nanoid()}>{type}</MenuItem>)}\n                        </Select>\n                    </Box>\n                    <Box>\n                        <TextField\n                            label=\"Price $\"\n                            name=\"price\"\n                            id=\"price\"\n                            disabled={plantDetails.saved}\n                            inputProps={{\n                                inputMode: 'numeric', pattern: '[0-9]*' }}\n                            value={plantDetails.price}\n                            onChange={handleInputChange}\n                        />\n                    </Box>\n                    <Box>\n                        <TextField\n                            label=\"Description\"\n                            name=\"description\"\n                            disabled={plantDetails.saved}\n                            id={plantDetails.idx.toString()}\n                            fullWidth\n                            multiline\n                            maxRows={4}\n                            inputProps={{ maxLength: CHARACTER_LIMIT }}\n                            value={plantDetails.description}\n                            variant=\"outlined\"\n                            onChange={handleInputChange}\n                        />\n                    </Box>\n                    <Box>\n                        <input\n                            style={{ display: \"none\" }}\n                            name=\"selectedFiles\"\n                            id={uniqueID}\n                            type=\"file\"\n                            multiple\n                            onChange={handleFileSelection}\n                        />\n                        <label htmlFor={uniqueID}>\n                            <Button variant=\"contained\" component=\"span\" disabled={plantDetails.saved}>\n                                Upload Image(s)\n                                </Button>\n                        </label>\n                        <Box>\n                            <List >\n                                {plantDetails.selectedFiles.map(file => <ListItem key={nanoid()}>\n                                    <Typography variant=\"subtitle2\">{`${file.name.slice(0, 10)}...${file.name.slice(file.name.length - 4, file.name.length)}`}</Typography>\n                                    <Button\n                                        disabled={plantDetails.saved}\n                                        value={file.name}\n                                        onClick={DeleteFileFromList}\n                                    >\n                                        <CloseRounded />\n                                    </Button>\n                                </ListItem>)}\n                            </List>\n                        </Box>\n                    </Box>\n                </CardContent>\n                <CardActions>\n                    { plantDetails.saved ? (<Button onClick={handleEditMode}>Edit</Button>) : (\n                        <>\n                            <Button onClick={handleSave}>Save</Button>\n                            <Button onClick={handleClearForm}>Clear</Button>\n                        </>\n                    )\n                        \n                    }\n                </CardActions>\n            </Card>                       \n                        </>\n    )\n}\n\nexport default PlantDetails;","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/constants/plantType.js",[],[],"/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Common/WarningMessage.js",[],[],"/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/components/Plants/PlantSection.js",["279","280","281","282","283","284"],[],"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Typography, ListItem, Badge, Box, Paper} from '@mui/material';\nimport PreviewIcon from '@mui/icons-material/Preview';\nimport PlantListItem from './PlantListItem';\n\nconst PlantSection = ({ plantSection }) => {\n\n    return (\n        <Paper sx={{ padding: '1rem .5rem', marginBottom: '1rem', backgroundColor: '#383838', color: 'white'}}>\n            <Box sx={{ textAlign: 'center'}} >\n                <Typography variant=\"body1\">Group: {plantSection.name}</Typography>\n                <Typography variant=\"caption\" variant=\"h6\">{plantSection.category}</Typography>\n            </Box>\n            {\n                plantSection.multiple && (\n                    plantSection.multiple.map(plant => <PlantListItem plant={plant} sectionId={plantSection._id} />)\n                )\n            }\n       </Paper>\n    )\n}\n\nexport default PlantSection;","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/lists/genusList.js",["285"],[],"export default [\"Alocasia\", \"Anthurium\", \"Calathea\", \"Succulent\", \"Cacti\",\"Hoya\", \"Monstera\",\"Philodendron\", \"Pothos\"];","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/lists/plantTypeList.js",["286"],[],"export default [\"Node\", \"Cutting\", \"Full Plant\"]","/Users/dortiz/Desktop/Development/PersonalProjects/VerdeInventorySystem/client/src/services/fileSelection.js",[],[],{"ruleId":"287","severity":1,"message":"288","line":1,"column":16,"nodeType":"289","messageId":"290","endLine":1,"endColumn":25},{"ruleId":"287","severity":1,"message":"291","line":5,"column":10,"nodeType":"289","messageId":"290","endLine":5,"endColumn":21},{"ruleId":"287","severity":1,"message":"292","line":2,"column":10,"nodeType":"289","messageId":"290","endLine":2,"endColumn":16},{"ruleId":"287","severity":1,"message":"293","line":3,"column":16,"nodeType":"289","messageId":"290","endLine":3,"endColumn":26},{"ruleId":"287","severity":1,"message":"294","line":3,"column":28,"nodeType":"289","messageId":"290","endLine":3,"endColumn":39},{"ruleId":"287","severity":1,"message":"295","line":5,"column":10,"nodeType":"289","messageId":"290","endLine":5,"endColumn":20},{"ruleId":"287","severity":1,"message":"296","line":5,"column":63,"nodeType":"289","messageId":"290","endLine":5,"endColumn":67},{"ruleId":"287","severity":1,"message":"297","line":5,"column":69,"nodeType":"289","messageId":"290","endLine":5,"endColumn":77},{"ruleId":"287","severity":1,"message":"298","line":9,"column":14,"nodeType":"289","messageId":"290","endLine":9,"endColumn":32},{"ruleId":"287","severity":1,"message":"299","line":14,"column":11,"nodeType":"289","messageId":"290","endLine":14,"endColumn":20},{"ruleId":"300","severity":1,"message":"301","line":28,"column":25,"nodeType":"302","messageId":"303","endLine":28,"endColumn":27},{"ruleId":"287","severity":1,"message":"304","line":3,"column":23,"nodeType":"289","messageId":"290","endLine":3,"endColumn":34},{"ruleId":"305","severity":1,"message":"306","line":63,"column":7,"nodeType":"307","endLine":63,"endColumn":22,"suggestions":"308"},{"ruleId":"300","severity":1,"message":"301","line":87,"column":36,"nodeType":"302","messageId":"303","endLine":87,"endColumn":38},{"ruleId":"300","severity":1,"message":"301","line":113,"column":63,"nodeType":"302","messageId":"303","endLine":113,"endColumn":65},{"ruleId":"309","severity":1,"message":"310","line":1,"column":1,"nodeType":"311","endLine":1,"endColumn":44},{"ruleId":"287","severity":1,"message":"312","line":6,"column":23,"nodeType":"289","messageId":"290","endLine":6,"endColumn":32},{"ruleId":"287","severity":1,"message":"313","line":25,"column":11,"nodeType":"289","messageId":"290","endLine":25,"endColumn":21},{"ruleId":"300","severity":1,"message":"301","line":35,"column":24,"nodeType":"302","messageId":"303","endLine":35,"endColumn":26},{"ruleId":"305","severity":1,"message":"314","line":48,"column":8,"nodeType":"307","endLine":48,"endColumn":10,"suggestions":"315"},{"ruleId":"300","severity":1,"message":"301","line":51,"column":20,"nodeType":"302","messageId":"303","endLine":51,"endColumn":22},{"ruleId":"300","severity":1,"message":"301","line":53,"column":27,"nodeType":"302","messageId":"303","endLine":53,"endColumn":29},{"ruleId":"300","severity":1,"message":"301","line":55,"column":27,"nodeType":"302","messageId":"303","endLine":55,"endColumn":29},{"ruleId":"287","severity":1,"message":"316","line":3,"column":40,"nodeType":"289","messageId":"290","endLine":3,"endColumn":45},{"ruleId":"287","severity":1,"message":"317","line":3,"column":47,"nodeType":"289","messageId":"290","endLine":3,"endColumn":50},{"ruleId":"287","severity":1,"message":"318","line":3,"column":70,"nodeType":"289","messageId":"290","endLine":3,"endColumn":84},{"ruleId":"287","severity":1,"message":"319","line":4,"column":8,"nodeType":"289","messageId":"290","endLine":4,"endColumn":19},{"ruleId":"309","severity":1,"message":"310","line":1,"column":1,"nodeType":"311","endLine":1,"endColumn":49},{"ruleId":"300","severity":1,"message":"320","line":25,"column":35,"nodeType":"302","messageId":"303","endLine":25,"endColumn":37},{"ruleId":"300","severity":1,"message":"301","line":9,"column":40,"nodeType":"302","messageId":"303","endLine":9,"endColumn":42},{"ruleId":"300","severity":1,"message":"301","line":9,"column":77,"nodeType":"302","messageId":"303","endLine":9,"endColumn":79},{"ruleId":"300","severity":1,"message":"301","line":15,"column":40,"nodeType":"302","messageId":"303","endLine":15,"endColumn":42},{"ruleId":"300","severity":1,"message":"301","line":15,"column":70,"nodeType":"302","messageId":"303","endLine":15,"endColumn":72},{"ruleId":"300","severity":1,"message":"301","line":15,"column":98,"nodeType":"302","messageId":"303","endLine":15,"endColumn":100},{"ruleId":"300","severity":1,"message":"301","line":15,"column":143,"nodeType":"302","messageId":"303","endLine":15,"endColumn":145},{"ruleId":"287","severity":1,"message":"321","line":2,"column":10,"nodeType":"289","messageId":"290","endLine":2,"endColumn":14},{"ruleId":"287","severity":1,"message":"322","line":5,"column":8,"nodeType":"289","messageId":"290","endLine":5,"endColumn":13},{"ruleId":"287","severity":1,"message":"323","line":6,"column":8,"nodeType":"289","messageId":"290","endLine":6,"endColumn":16},{"ruleId":"287","severity":1,"message":"324","line":2,"column":10,"nodeType":"289","messageId":"290","endLine":2,"endColumn":14},{"ruleId":"287","severity":1,"message":"292","line":3,"column":10,"nodeType":"289","messageId":"290","endLine":3,"endColumn":16},{"ruleId":"287","severity":1,"message":"325","line":3,"column":30,"nodeType":"289","messageId":"290","endLine":3,"endColumn":38},{"ruleId":"287","severity":1,"message":"316","line":3,"column":40,"nodeType":"289","messageId":"290","endLine":3,"endColumn":45},{"ruleId":"287","severity":1,"message":"326","line":3,"column":52,"nodeType":"289","messageId":"290","endLine":3,"endColumn":57},{"ruleId":"287","severity":1,"message":"327","line":3,"column":59,"nodeType":"289","messageId":"290","endLine":3,"endColumn":65},{"ruleId":"287","severity":1,"message":"319","line":4,"column":8,"nodeType":"289","messageId":"290","endLine":4,"endColumn":19},{"ruleId":"287","severity":1,"message":"328","line":5,"column":8,"nodeType":"289","messageId":"290","endLine":5,"endColumn":21},{"ruleId":"287","severity":1,"message":"291","line":7,"column":23,"nodeType":"289","messageId":"290","endLine":7,"endColumn":34},{"ruleId":"305","severity":1,"message":"329","line":21,"column":8,"nodeType":"307","endLine":21,"endColumn":24,"suggestions":"330"},{"ruleId":"300","severity":1,"message":"301","line":22,"column":21,"nodeType":"302","messageId":"303","endLine":22,"endColumn":23},{"ruleId":"300","severity":1,"message":"301","line":25,"column":21,"nodeType":"302","messageId":"303","endLine":25,"endColumn":23},{"ruleId":"300","severity":1,"message":"301","line":28,"column":31,"nodeType":"302","messageId":"303","endLine":28,"endColumn":33},{"ruleId":"331","severity":1,"message":"332","line":34,"column":42,"nodeType":"333","messageId":"334","endLine":34,"endColumn":44},{"ruleId":"300","severity":1,"message":"301","line":35,"column":41,"nodeType":"302","messageId":"303","endLine":35,"endColumn":43},{"ruleId":"287","severity":1,"message":"288","line":1,"column":17,"nodeType":"289","messageId":"290","endLine":1,"endColumn":26},{"ruleId":"287","severity":1,"message":"335","line":3,"column":8,"nodeType":"289","messageId":"290","endLine":3,"endColumn":22},{"ruleId":"287","severity":1,"message":"336","line":4,"column":8,"nodeType":"289","messageId":"290","endLine":4,"endColumn":21},{"ruleId":"287","severity":1,"message":"337","line":7,"column":10,"nodeType":"289","messageId":"290","endLine":7,"endColumn":23},{"ruleId":"287","severity":1,"message":"338","line":22,"column":22,"nodeType":"289","messageId":"290","endLine":22,"endColumn":33},{"ruleId":"339","severity":1,"message":"340","line":25,"column":62,"nodeType":"341","messageId":"342","endLine":25,"endColumn":63,"suggestions":"343"},{"ruleId":"287","severity":1,"message":"324","line":2,"column":10,"nodeType":"289","messageId":"290","endLine":2,"endColumn":14},{"ruleId":"287","severity":1,"message":"292","line":3,"column":10,"nodeType":"289","messageId":"290","endLine":3,"endColumn":16},{"ruleId":"287","severity":1,"message":"325","line":3,"column":30,"nodeType":"289","messageId":"290","endLine":3,"endColumn":38},{"ruleId":"287","severity":1,"message":"316","line":3,"column":40,"nodeType":"289","messageId":"290","endLine":3,"endColumn":45},{"ruleId":"287","severity":1,"message":"319","line":4,"column":8,"nodeType":"289","messageId":"290","endLine":4,"endColumn":19},{"ruleId":"344","severity":1,"message":"345","line":13,"column":47,"nodeType":"346","messageId":"347","endLine":13,"endColumn":59},{"ruleId":"309","severity":1,"message":"310","line":1,"column":1,"nodeType":"311","endLine":1,"endColumn":120},{"ruleId":"309","severity":1,"message":"310","line":1,"column":1,"nodeType":"311","endLine":1,"endColumn":49},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useDispatch' is defined but never used.","'Button' is defined but never used.","'useHistory' is defined but never used.","'useLocation' is defined but never used.","'Typography' is defined but never used.","'Menu' is defined but never used.","'MenuItem' is defined but never used.","'handleCloseNavMenu' is defined but never used.","'plantList' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useSelector' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'validateQuantityArray'. Either include it or remove the dependency array.","ArrayExpression",["348"],"import/no-anonymous-default-export","Assign array to a variable before exporting as module default","ExportDefaultDeclaration","'editPlant' is defined but never used.","'plantError' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["349"],"'Badge' is defined but never used.","'Box' is defined but never used.","'CardActionArea' is defined but never used.","'PreviewIcon' is defined but never used.","Expected '!==' and instead saw '!='.","'Card' is defined but never used.","'sizes' is defined but never used.","'statuses' is defined but never used.","'Link' is defined but never used.","'ListItem' is defined but never used.","'Paper' is defined but never used.","'Avatar' is defined but never used.","'PlantListItem' is defined but never used.","React Hook useEffect has a missing dependency: 'plantList'. Either include it or remove the dependency array.",["350"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'InputAdornment' is defined but never used.","'OutlinedInput' is defined but never used.","'NumericFormat' is defined but never used.","'setUniqueID' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["351","352"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps",{"desc":"353","fix":"354"},{"desc":"355","fix":"356"},{"desc":"357","fix":"358"},{"messageId":"359","fix":"360","desc":"361"},{"messageId":"362","fix":"363","desc":"364"},"Update the dependencies array to be: [quantityArray, validateQuantityArray]",{"range":"365","text":"366"},"Update the dependencies array to be: [dispatch]",{"range":"367","text":"368"},"Update the dependencies array to be: [plantList, searchedString]",{"range":"369","text":"370"},"removeEscape",{"range":"371","text":"372"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"373","text":"374"},"Replace the `\\` with `\\\\` to include the actual backslash character.",[2755,2770],"[quantityArray, validateQuantityArray]",[1942,1944],"[dispatch]",[1066,1082],"[plantList, searchedString]",[1468,1469],"",[1468,1468],"\\"]